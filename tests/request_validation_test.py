# coding: utf-8
# DO NOT EDIT: File is generated by code generator.

import os
import unittest
import pokepay as pp
from pokepay.client import Client

package_root = os.path.dirname(os.path.dirname(pp.__file__))
config_path = os.path.join(package_root, 'config.ini')
client = Client(config_path)


class PokepayTest(unittest.TestCase):

    def test_get_ping_0(self):
        response = client.send(pp.GetPing(
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_send_echo_0(self):
        response = client.send(pp.SendEcho(
                                  "AIRkH"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_user_0(self):
        response = client.send(pp.GetUser(
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_user_accounts_0(self):
        response = client.send(pp.ListUserAccounts(
                                  "a0cca592-bf22-4263-8ecd-026754ff855d"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_user_accounts_1(self):
        response = client.send(pp.ListUserAccounts(
                                  "a0cca592-bf22-4263-8ecd-026754ff855d",
                                  per_page=3358
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_user_accounts_2(self):
        response = client.send(pp.ListUserAccounts(
                                  "a0cca592-bf22-4263-8ecd-026754ff855d",
                                  page=5271,
                                  per_page=8562
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_user_account_0(self):
        response = client.send(pp.CreateUserAccount(
                                  "4790f39c-f3ce-4a37-b7c6-ca019185d723",
                                  "9f527c51-9a7e-4677-87ab-ae21ff187cf5"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_user_account_1(self):
        response = client.send(pp.CreateUserAccount(
                                  "4790f39c-f3ce-4a37-b7c6-ca019185d723",
                                  "9f527c51-9a7e-4677-87ab-ae21ff187cf5",
                                  metadata="{\"key1\":\"foo\",\"key2\":\"bar\"}"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_user_account_2(self):
        response = client.send(pp.CreateUserAccount(
                                  "4790f39c-f3ce-4a37-b7c6-ca019185d723",
                                  "9f527c51-9a7e-4677-87ab-ae21ff187cf5",
                                  external_id="iGtQW4pnFSkfz0ZA",
                                  metadata="{\"key1\":\"foo\",\"key2\":\"bar\"}"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_user_account_3(self):
        response = client.send(pp.CreateUserAccount(
                                  "4790f39c-f3ce-4a37-b7c6-ca019185d723",
                                  "9f527c51-9a7e-4677-87ab-ae21ff187cf5",
                                  name="uHKErS89ga8rAwXpAiqwTxt1HL4wWzmkMDA4SVfWD13Zj3L9DQPYajb0tVdWEdtL2ujHbA770c9iXi2Q1VWdznJovLhT0BrHHw3tEdBOJZocfpIFBg2EP1IMpzVlOR0ZjHbJ4pIYeH1mIjK91BovJNiyan2Rg9xEgMUhIRyB0Lq7z8Ljil9JSMA7rA7mkLLtmKfguDK2IgQjODYIDOJbPEulQI",
                                  external_id="vNSkQALktsxpQNr6y6a28m0nRuldHpS",
                                  metadata="{\"key1\":\"foo\",\"key2\":\"bar\"}"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_account_0(self):
        response = client.send(pp.GetAccount(
                                  "ce82075e-0d91-419b-b5bc-31458306bc55"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_account_0(self):
        response = client.send(pp.UpdateAccount(
                                  "9d4a4a80-c7f0-40db-a450-36e946e1971a"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_account_1(self):
        response = client.send(pp.UpdateAccount(
                                  "9d4a4a80-c7f0-40db-a450-36e946e1971a",
                                  can_transfer_topup=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_account_2(self):
        response = client.send(pp.UpdateAccount(
                                  "9d4a4a80-c7f0-40db-a450-36e946e1971a",
                                  status="suspended",
                                  can_transfer_topup=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_account_3(self):
        response = client.send(pp.UpdateAccount(
                                  "9d4a4a80-c7f0-40db-a450-36e946e1971a",
                                  is_suspended=True,
                                  status="suspended",
                                  can_transfer_topup=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_delete_account_0(self):
        response = client.send(pp.DeleteAccount(
                                  "3f9092d1-1997-4132-869d-a7c75a5d798b"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_delete_account_1(self):
        response = client.send(pp.DeleteAccount(
                                  "3f9092d1-1997-4132-869d-a7c75a5d798b",
                                  cashback=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_balances_0(self):
        response = client.send(pp.ListAccountBalances(
                                  "fe9ba5e6-5a43-4eb0-a1f4-973999643afe"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_balances_1(self):
        response = client.send(pp.ListAccountBalances(
                                  "fe9ba5e6-5a43-4eb0-a1f4-973999643afe",
                                  direction="asc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_balances_2(self):
        response = client.send(pp.ListAccountBalances(
                                  "fe9ba5e6-5a43-4eb0-a1f4-973999643afe",
                                  expires_at_to="2019-01-29T08:31:34.000000+09:00",
                                  direction="asc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_balances_3(self):
        response = client.send(pp.ListAccountBalances(
                                  "fe9ba5e6-5a43-4eb0-a1f4-973999643afe",
                                  expires_at_from="2025-01-12T13:40:21.000000+09:00",
                                  expires_at_to="2023-01-11T21:31:56.000000+09:00",
                                  direction="asc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_balances_4(self):
        response = client.send(pp.ListAccountBalances(
                                  "fe9ba5e6-5a43-4eb0-a1f4-973999643afe",
                                  per_page=1016,
                                  expires_at_from="2024-09-04T17:10:42.000000+09:00",
                                  expires_at_to="2018-06-16T11:20:58.000000+09:00",
                                  direction="desc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_balances_5(self):
        response = client.send(pp.ListAccountBalances(
                                  "fe9ba5e6-5a43-4eb0-a1f4-973999643afe",
                                  page=218,
                                  per_page=2182,
                                  expires_at_from="2024-06-22T12:06:55.000000+09:00",
                                  expires_at_to="2024-12-24T09:24:19.000000+09:00",
                                  direction="asc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_expired_balances_0(self):
        response = client.send(pp.ListAccountExpiredBalances(
                                  "36c55dae-a763-48a7-a91e-94db92494432"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_expired_balances_1(self):
        response = client.send(pp.ListAccountExpiredBalances(
                                  "36c55dae-a763-48a7-a91e-94db92494432",
                                  direction="asc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_expired_balances_2(self):
        response = client.send(pp.ListAccountExpiredBalances(
                                  "36c55dae-a763-48a7-a91e-94db92494432",
                                  expires_at_to="2024-06-30T13:46:34.000000+09:00",
                                  direction="desc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_expired_balances_3(self):
        response = client.send(pp.ListAccountExpiredBalances(
                                  "36c55dae-a763-48a7-a91e-94db92494432",
                                  expires_at_from="2016-12-02T09:27:57.000000+09:00",
                                  expires_at_to="2024-02-13T02:34:31.000000+09:00",
                                  direction="desc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_expired_balances_4(self):
        response = client.send(pp.ListAccountExpiredBalances(
                                  "36c55dae-a763-48a7-a91e-94db92494432",
                                  per_page=5871,
                                  expires_at_from="2019-07-12T13:14:21.000000+09:00",
                                  expires_at_to="2016-08-23T18:23:34.000000+09:00",
                                  direction="asc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_expired_balances_5(self):
        response = client.send(pp.ListAccountExpiredBalances(
                                  "36c55dae-a763-48a7-a91e-94db92494432",
                                  page=4236,
                                  per_page=3454,
                                  expires_at_from="2018-03-08T11:42:37.000000+09:00",
                                  expires_at_to="2016-04-28T02:09:16.000000+09:00",
                                  direction="asc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_customer_account_0(self):
        response = client.send(pp.UpdateCustomerAccount(
                                  "84b859aa-f0d3-4f6c-a841-282e9f5ab662"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_customer_account_1(self):
        response = client.send(pp.UpdateCustomerAccount(
                                  "84b859aa-f0d3-4f6c-a841-282e9f5ab662",
                                  metadata="{\"key1\":\"foo\",\"key2\":\"bar\"}"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_customer_account_2(self):
        response = client.send(pp.UpdateCustomerAccount(
                                  "84b859aa-f0d3-4f6c-a841-282e9f5ab662",
                                  external_id="rppUqGdxMolEMce2oIWkzh6xh3kO5wXHuEli1NcEVyTrbdyJqm",
                                  metadata="{\"key1\":\"foo\",\"key2\":\"bar\"}"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_customer_account_3(self):
        response = client.send(pp.UpdateCustomerAccount(
                                  "84b859aa-f0d3-4f6c-a841-282e9f5ab662",
                                  account_name="h3W",
                                  external_id="fGT9d54NzUibZax1gbE",
                                  metadata="{\"key1\":\"foo\",\"key2\":\"bar\"}"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_customer_account_4(self):
        response = client.send(pp.UpdateCustomerAccount(
                                  "84b859aa-f0d3-4f6c-a841-282e9f5ab662",
                                  status="suspended",
                                  account_name="tEhHNUjZJEl7H6aHeFVmJSAKrLNuNDUQhJfNq76RxAuxSVrnur4Ju4ayidm5BuCe0yTSEIanUYTV2eUYLa0Qhqw2R1myjYzFL4j0HTXKtxMi6tvMf7GbuKVO",
                                  external_id="o81owGN6i0XTT33lqYdKQ0h3ghVZk7eO",
                                  metadata="{\"key1\":\"foo\",\"key2\":\"bar\"}"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_account_transfer_summary_0(self):
        response = client.send(pp.GetAccountTransferSummary(
                                  "b9de1b01-2893-4024-85a2-263d27f20e39"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_account_transfer_summary_1(self):
        response = client.send(pp.GetAccountTransferSummary(
                                  "b9de1b01-2893-4024-85a2-263d27f20e39",
                                  transfer_types=["refund-payment", "refund-topup", "topup", "refund-exchange-inflow", "payment", "campaign-topup", "refund-exchange-outflow", "exchange-outflow", "refund-campaign", "refund-coupon", "exchange-inflow"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_account_transfer_summary_2(self):
        response = client.send(pp.GetAccountTransferSummary(
                                  "b9de1b01-2893-4024-85a2-263d27f20e39",
                                  to="2016-10-27T21:00:49.000000+09:00",
                                  transfer_types=["refund-exchange-outflow", "use-coupon", "refund-topup", "refund-payment", "campaign-topup", "topup", "payment", "exchange-inflow", "exchange-outflow", "refund-coupon", "refund-campaign", "refund-exchange-inflow"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_account_transfer_summary_3(self):
        response = client.send(pp.GetAccountTransferSummary(
                                  "b9de1b01-2893-4024-85a2-263d27f20e39",
                                  start="2022-08-16T01:04:09.000000+09:00",
                                  to="2024-11-25T15:55:46.000000+09:00",
                                  transfer_types=["refund-campaign", "topup", "refund-topup", "refund-exchange-outflow", "exchange-inflow", "refund-exchange-inflow", "exchange-outflow", "use-coupon", "campaign-topup", "payment", "refund-payment"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_0(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "c41f5bb2-749b-44ef-829d-581a94e833f3"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_1(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "c41f5bb2-749b-44ef-829d-581a94e833f3",
                                  email="hUtXGZ9lfp@9Twg.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_2(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "c41f5bb2-749b-44ef-829d-581a94e833f3",
                                  tel="0099877969",
                                  email="qdhqoMR6oA@dT5y.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_3(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "c41f5bb2-749b-44ef-829d-581a94e833f3",
                                  external_id="PsPRTmUYdZdYDDGZDuZn0XgqQIqTu1",
                                  tel="03131471",
                                  email="YdRTWbMgZi@B4q5.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_4(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "c41f5bb2-749b-44ef-829d-581a94e833f3",
                                  status="pre-closed",
                                  external_id="IKvcyeytZUeCOzn479Q7e7CQ6",
                                  tel="073-94-711",
                                  email="6jQwMdVQzE@T3CT.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_5(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "c41f5bb2-749b-44ef-829d-581a94e833f3",
                                  is_suspended=True,
                                  status="pre-closed",
                                  external_id="aadmHoO937wRncWgLEMvwuXtyGneCNJhR9grzsET9HHziGJ",
                                  tel="0915-585-847",
                                  email="EnNvZa51B6@RuNH.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_6(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "c41f5bb2-749b-44ef-829d-581a94e833f3",
                                  created_at_to="2018-07-26T02:42:57.000000+09:00",
                                  is_suspended=False,
                                  status="pre-closed",
                                  external_id="kkEIImb7878ag0GpEoXRZP9Tuo6i",
                                  tel="0402-724",
                                  email="2arbhJouxW@Q6Fl.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_7(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "c41f5bb2-749b-44ef-829d-581a94e833f3",
                                  created_at_from="2017-05-13T13:51:02.000000+09:00",
                                  created_at_to="2017-01-23T16:21:15.000000+09:00",
                                  is_suspended=False,
                                  status="suspended",
                                  external_id="k1iTzlm9ILQGKVJoUCSY35cdkgvsbAY",
                                  tel="0584488892",
                                  email="yLz0xsJRhR@VsB9.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_8(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "c41f5bb2-749b-44ef-829d-581a94e833f3",
                                  per_page=6828,
                                  created_at_from="2021-07-13T22:31:44.000000+09:00",
                                  created_at_to="2021-01-25T13:11:30.000000+09:00",
                                  is_suspended=False,
                                  status="pre-closed",
                                  external_id="fWzO75yHWR5FLMa9CO3GmqQepv7",
                                  tel="080779634",
                                  email="vLJkkZMMdE@ANfW.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_9(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "c41f5bb2-749b-44ef-829d-581a94e833f3",
                                  page=6145,
                                  per_page=1495,
                                  created_at_from="2022-09-03T18:18:14.000000+09:00",
                                  created_at_to="2020-01-02T09:52:45.000000+09:00",
                                  is_suspended=True,
                                  status="suspended",
                                  external_id="Aje3PJg4zkA5dwRQrAEDCEBzCTk0p",
                                  tel="07714864-9146",
                                  email="6QjLE9oTv9@S3Zg.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_customer_account_0(self):
        response = client.send(pp.CreateCustomerAccount(
                                  "45dccf34-6a82-40cf-8035-99e4f021f54b"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_customer_account_1(self):
        response = client.send(pp.CreateCustomerAccount(
                                  "45dccf34-6a82-40cf-8035-99e4f021f54b",
                                  external_id="9OBT"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_customer_account_2(self):
        response = client.send(pp.CreateCustomerAccount(
                                  "45dccf34-6a82-40cf-8035-99e4f021f54b",
                                  account_name="n3gY0HIwJr5Xn6R9PIw5eC52tvIBnMyMg4CnT2dj7ORUTt4jEgn4792da7QYy7V605lzcBixerwgOsZo2yFQXiifPwyEPkMTjwK5UmBamQcUvvHD25XYGaGoRmlkWp",
                                  external_id="VKSQYACWhdJgT5"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_customer_account_3(self):
        response = client.send(pp.CreateCustomerAccount(
                                  "45dccf34-6a82-40cf-8035-99e4f021f54b",
                                  user_name="XIAxp1c5Q2vG7By91KC2xkwbMvROWfUAhh6XnZz0yJYgRGAM6oTzljbZYS9b6qmrSFaDiVxdn1z0TuA7dLQ8GnuuGnm3um0ZKYlqHYAPfacx4ba4pxXiFCicQd3QQrdtpp5IlW8KnTaroT8w3801ZxeZpTa0FFkkUFLVCDKp9TvCsVFg3Dy6t9FVfvRBKOl2QQeBI5NM6J7EhkzGk22yYle2ZOPXJOiEYcNwwBKhoxCdqw8S",
                                  account_name="S6L7O6ohLm8HBuYz7E9ZuYBAHz0vH45u4SHdXpfYeqMtcfd8wxcygIW1kAzyAHjkW0eFs",
                                  external_id="lSf8NaBTyV6GBT8tD"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_shop_accounts_0(self):
        response = client.send(pp.GetShopAccounts(
                                  "3418e411-a25d-4ec8-9b49-3e30dff9f6fa"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_shop_accounts_1(self):
        response = client.send(pp.GetShopAccounts(
                                  "3418e411-a25d-4ec8-9b49-3e30dff9f6fa",
                                  is_suspended=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_shop_accounts_2(self):
        response = client.send(pp.GetShopAccounts(
                                  "3418e411-a25d-4ec8-9b49-3e30dff9f6fa",
                                  created_at_to="2022-08-03T04:31:21.000000+09:00",
                                  is_suspended=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_shop_accounts_3(self):
        response = client.send(pp.GetShopAccounts(
                                  "3418e411-a25d-4ec8-9b49-3e30dff9f6fa",
                                  created_at_from="2017-08-07T10:46:15.000000+09:00",
                                  created_at_to="2025-07-22T01:28:13.000000+09:00",
                                  is_suspended=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_shop_accounts_4(self):
        response = client.send(pp.GetShopAccounts(
                                  "3418e411-a25d-4ec8-9b49-3e30dff9f6fa",
                                  per_page=2846,
                                  created_at_from="2019-11-04T14:53:12.000000+09:00",
                                  created_at_to="2024-09-23T03:45:25.000000+09:00",
                                  is_suspended=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_shop_accounts_5(self):
        response = client.send(pp.GetShopAccounts(
                                  "3418e411-a25d-4ec8-9b49-3e30dff9f6fa",
                                  page=7568,
                                  per_page=1670,
                                  created_at_from="2021-03-12T15:40:19.000000+09:00",
                                  created_at_to="2022-08-13T20:07:48.000000+09:00",
                                  is_suspended=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_0(self):
        response = client.send(pp.ListBills(
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_1(self):
        response = client.send(pp.ListBills(
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_2(self):
        response = client.send(pp.ListBills(
                                  upper_limit_amount=3835,
                                  is_disabled=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_3(self):
        response = client.send(pp.ListBills(
                                  lower_limit_amount=1487,
                                  upper_limit_amount=2295,
                                  is_disabled=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_4(self):
        response = client.send(pp.ListBills(
                                  shop_id="a3337384-6b0e-467b-951c-478ccdf43586",
                                  lower_limit_amount=8300,
                                  upper_limit_amount=5052,
                                  is_disabled=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_5(self):
        response = client.send(pp.ListBills(
                                  shop_name="IQiAP4UplfuFUQK5yc0JqyEbk4xV1ElwOVpwOgCs3REJLXlOpH9qH3TntlxmPSv0sqeMHVeJGZnQaE4lp3S7TMyfZKpPybiZ1Lwce18e7Eq5OqWuTabdRaaHOyfGqVUncXzhjskeGyZxmbEy050Zlv3tzVr8aTPDqMKbxS0Vs3OlIrdnx7rU9Fte9Z959oBy13mtel3d8TfJ3Ol39ScasZnA58jo0hnztlMdM7BVfn4iFYyJJXfrDUn2Z",
                                  shop_id="0b13f435-a4e4-4e54-823d-f14d3d6621e8",
                                  lower_limit_amount=7968,
                                  upper_limit_amount=7137,
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_6(self):
        response = client.send(pp.ListBills(
                                  created_to="2016-09-02T11:19:30.000000+09:00",
                                  shop_name="QqsldJHk3l4cpZ7fJl29A3O6y0fQnXOgwkIth5yMWiTVYzb9YasuIp7v4EzACicWq4Ul0bBBFnJwjrPufrwL",
                                  shop_id="19a57c35-abda-45b4-b1aa-9c3c70c8922e",
                                  lower_limit_amount=6733,
                                  upper_limit_amount=4789,
                                  is_disabled=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_7(self):
        response = client.send(pp.ListBills(
                                  created_from="2025-03-09T03:05:10.000000+09:00",
                                  created_to="2023-04-15T12:14:30.000000+09:00",
                                  shop_name="hJuNsCdqVbAgLZQKQXblhvdQVC38rMOaKHSf5htPpycWdWsbduWBxtfg1Kliu47KITpvwbo61t0xPHohZAfXS5WAq97VI0kJjyO9S00lRKqhRSKyv4aeUNiX5kIXisF2lvLdWFAH9CECfmZyvOgcw2bcIoYI3B409EBsOM5mHn7CA1SM3xNEFCgQheyCbSnP7P0SqnjQBF0gNpyvaBHzjlAdXU9",
                                  shop_id="bd0643a7-06e6-4ae2-ac34-114293457d45",
                                  lower_limit_amount=2117,
                                  upper_limit_amount=9958,
                                  is_disabled=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_8(self):
        response = client.send(pp.ListBills(
                                  description="TmiRof0lbldCRsSSTgoxqh3aCnDQum7xlHp8mSoN73gaH3XPjunt8NgffostplBJ13qPcXVXQ9E7OqefuC0zsB8aQbgel1VXLZNh",
                                  created_from="2016-10-27T18:39:04.000000+09:00",
                                  created_to="2020-04-19T11:21:31.000000+09:00",
                                  shop_name="VCGfzH0EqAidHGV4baZPNRUSJ9iQNhB3KMhlAuhO2DrrEN6v7h6DIeIXBVaS0Zi07XrJykFEWCqS7fIGsgSUetvzhcyY8O4aW8dVGclxW2nJI1LDT3BhMLUADblZz6ydgd6gveWK49xDzlQxtC3xLL1ERUl6NhqKkDSvghab5bsImY7PcHPZH7mH",
                                  shop_id="02e6d5fd-fe03-4700-86db-2d49d3ec9fa6",
                                  lower_limit_amount=3593,
                                  upper_limit_amount=9203,
                                  is_disabled=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_9(self):
        response = client.send(pp.ListBills(
                                  organization_code="",
                                  description="NgoBzsuiKajpcQf4nuECfdVUoATZ0pZ1FEusk3svdOIWNVHFftM1EZPsd7jOCTvYgQYDODNTX3YU3qGQBWGDfb1wlkuiN7kKWKFo",
                                  created_from="2024-02-23T19:10:44.000000+09:00",
                                  created_to="2017-10-30T02:54:59.000000+09:00",
                                  shop_name="9tuL5LH4EHPGJy8ZSoJ1krFHQyhzGXerHPOPDvrwRgeSOaGF6stofVWAQmmxPEjbZK4rVxAUW7FWHkKwdg6799FNaTUuVqVNtvvxMPy8uYVQrlAwBlTLDHylYVoU0Lud9b",
                                  shop_id="76813135-bc26-424d-88e4-438136936dbf",
                                  lower_limit_amount=3512,
                                  upper_limit_amount=7259,
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_10(self):
        response = client.send(pp.ListBills(
                                  private_money_id="69b26d55-eeee-4bf5-bb98-2f1a29611482",
                                  organization_code="q-Td-90tz6o18bTME",
                                  description="ruAKFNN9YCEWSULZdpylXeF6qvGwUl7ATMaf3NqLOcKmTPNREiEdfOxleMzyqb14XnQoYrg3WK0gxDGSVD8anN0lX3R6Ngh2OAi1BcnwfTRLJa4uoIhpR40nORwuCknsFuOeDw3ETEoYbDEhr0AwKkiQOHCQ",
                                  created_from="2019-04-23T00:27:44.000000+09:00",
                                  created_to="2016-12-11T02:13:34.000000+09:00",
                                  shop_name="IIRDiJ5EWSps1CcPm4CujuDviyaRPbQTt1c2CSzS35RxVGrM7sDhsRor5EZrBgBnWdBpXW3vXZAsIGmxl3OdV3odlFFoKvu4lobeulXI7c3F9nyrjjRiAP0nDGe4yWdLtrR0H47hbbDvB2dkQWYC4RW",
                                  shop_id="8e8f4a02-78f1-42ca-b720-84f336e5ea71",
                                  lower_limit_amount=4658,
                                  upper_limit_amount=6184,
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_11(self):
        response = client.send(pp.ListBills(
                                  bill_id="7AWpC",
                                  private_money_id="05cd6fa3-f4c4-4584-abf9-a19a5bc696cc",
                                  organization_code="9TFI8-q-o-ZW4-bU",
                                  description="y2EMgPVlahlWYdbEevpLkzdUFCwG4QGOnpUXmwhMFkO9ufFPOzF9Lvv7JJIkMwpNGlwPY7w3AePumXzLvyF75pQlwzsKLA3j0RsOTGgnfI7tlICoQDpnLAiZiYSVIBpBUCCSgk4gnk7sP6E17lkMgQrA88yuG2X4KRlpHewo2",
                                  created_from="2022-10-13T17:58:30.000000+09:00",
                                  created_to="2025-03-12T02:32:46.000000+09:00",
                                  shop_name="QkdX",
                                  shop_id="f9a98cd0-f696-4b40-9e46-9b2733ec1f34",
                                  lower_limit_amount=4515,
                                  upper_limit_amount=3614,
                                  is_disabled=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_12(self):
        response = client.send(pp.ListBills(
                                  per_page=2526,
                                  bill_id="V9XHbL",
                                  private_money_id="c3194636-5918-439e-bad9-d4be4bb692a2",
                                  organization_code="-IR8--7--ERjkpP---0r4-Qj",
                                  description="wTGLR8ci2cIIE66fhj2n6iiZ64HpvFGkJr1uo4NLstnS7EAbDgQaYkUrDsQyk3kwOisNW9XsMHBVPsrsYBnLGXRYzu4noxPXNWpdUvBBp2Jsu",
                                  created_from="2017-09-03T20:30:27.000000+09:00",
                                  created_to="2025-04-24T15:48:33.000000+09:00",
                                  shop_name="INCRpxja7me48LNXqpqJ",
                                  shop_id="5bf84d98-de21-4daf-b46a-89da69ccd9e0",
                                  lower_limit_amount=1911,
                                  upper_limit_amount=3624,
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_13(self):
        response = client.send(pp.ListBills(
                                  page=140,
                                  per_page=8266,
                                  bill_id="uUBm",
                                  private_money_id="24dc5c38-1511-4a3f-8a5d-5c10562ae630",
                                  organization_code="-OIPO8f--5J--ZEmK893-r0",
                                  description="zongKg5SFSpcaiWqMVEyXiabD2fPkrS1NvYbmwucdTPjBOMyHVeFGY5vB7gjE0J3rzoZQgeuXW4rw3Ob3VUIWbzDljJ6klDtciJUcw1w",
                                  created_from="2024-10-08T13:54:55.000000+09:00",
                                  created_to="2022-12-22T02:16:07.000000+09:00",
                                  shop_name="r",
                                  shop_id="5e81bd98-f8b4-420f-aadc-6cf9683ae759",
                                  lower_limit_amount=2035,
                                  upper_limit_amount=9757,
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_bill_0(self):
        response = client.send(pp.CreateBill(
                                  "ee649014-14df-4bce-9571-065bb6b55c95",
                                  "23be838b-7020-4801-af0f-6f65c939ded8"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_bill_1(self):
        response = client.send(pp.CreateBill(
                                  "ee649014-14df-4bce-9571-065bb6b55c95",
                                  "23be838b-7020-4801-af0f-6f65c939ded8",
                                  description="bzzGADkOfMAKTboQcaiYXr4rnNnjCoeQHMuXiGNUysmU86lvAOTbcLzXO1sbMRuBNUlL6"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_bill_2(self):
        response = client.send(pp.CreateBill(
                                  "ee649014-14df-4bce-9571-065bb6b55c95",
                                  "23be838b-7020-4801-af0f-6f65c939ded8",
                                  amount=3376.0,
                                  description="ReLv75kg6qcs3cEpI1m3wABqtL3bdaVTKdkTjUxGpAh3awQssfAXqJYYr4ARYbJcmLujs894lRg4qB30GRMkbzDn742v8m6fDAksXCcjSnMwkyUVD7CNlqSrG8bUcu2404OwW2YlKo3D8R7F9uqtTYDUe0c6WMBb0vMyr"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_bill_0(self):
        response = client.send(pp.UpdateBill(
                                  "c16a938b-9ef2-44bd-8e6f-2b8a65b0e2b2"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_bill_1(self):
        response = client.send(pp.UpdateBill(
                                  "c16a938b-9ef2-44bd-8e6f-2b8a65b0e2b2",
                                  is_disabled=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_bill_2(self):
        response = client.send(pp.UpdateBill(
                                  "c16a938b-9ef2-44bd-8e6f-2b8a65b0e2b2",
                                  description="CtAij6bFWlBc9nMouBh",
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_bill_3(self):
        response = client.send(pp.UpdateBill(
                                  "c16a938b-9ef2-44bd-8e6f-2b8a65b0e2b2",
                                  amount=9011.0,
                                  description="x",
                                  is_disabled=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_0(self):
        response = client.send(pp.CreateCheck(
                                  "b0ded9e1-b593-4cd6-ba88-8079a453b844",
                                  money_amount=3682.0
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_1(self):
        response = client.send(pp.CreateCheck(
                                  "b0ded9e1-b593-4cd6-ba88-8079a453b844",
                                  money_amount=4498.0,
                                  description="9dQAdVbIjdKodnIqsg2hwfCC3ynrJLnPSb5d8avvWNGGZpHcQub7jyKGPEze4eDg0kaj205"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_2(self):
        response = client.send(pp.CreateCheck(
                                  "b0ded9e1-b593-4cd6-ba88-8079a453b844",
                                  money_amount=5778.0,
                                  is_onetime=False,
                                  description="9Vfs0xgdWlEYjRqPOb8BVVabHLEG4agkq2G8IRGQBS0nchLLndRaY2NqmWOdlkOhTjC67yWAbgIrPt858HfVRa8DX5UPvkC2RO0Ka4lYXy6v8yeYaDtl3yxclWSiWAV8VoZ5q4f3l3OfQm9YtxuJK"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_3(self):
        response = client.send(pp.CreateCheck(
                                  "b0ded9e1-b593-4cd6-ba88-8079a453b844",
                                  money_amount=6130.0,
                                  usage_limit=2500,
                                  is_onetime=True,
                                  description="FgfnOa5xAhF9FsFDzTIAFGDPhp"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_4(self):
        response = client.send(pp.CreateCheck(
                                  "b0ded9e1-b593-4cd6-ba88-8079a453b844",
                                  money_amount=5537.0,
                                  expires_at="2024-12-09T23:17:36.000000+09:00",
                                  usage_limit=9117,
                                  is_onetime=True,
                                  description="zEARJ1rvmqI1bSsRkkjQVB7WPQBN4OQef6ic8PJreX4akuWpKD9afhWN8gpYbk1UQRVGeT6q9QlLL4St0RhV6KdSsO2fKUxMoBriyYb61zvPjBcIHUY8RekKTAhSuM7Lo0VuZ1eCkX9fH"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_5(self):
        response = client.send(pp.CreateCheck(
                                  "b0ded9e1-b593-4cd6-ba88-8079a453b844",
                                  money_amount=9711.0,
                                  point_expires_at="2024-01-25T06:53:05.000000+09:00",
                                  expires_at="2025-08-01T00:06:50.000000+09:00",
                                  usage_limit=396,
                                  is_onetime=True,
                                  description="VQAOjB0XTIEf"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_6(self):
        response = client.send(pp.CreateCheck(
                                  "b0ded9e1-b593-4cd6-ba88-8079a453b844",
                                  money_amount=1282.0,
                                  point_expires_in_days=6045,
                                  point_expires_at="2020-11-23T19:32:02.000000+09:00",
                                  expires_at="2016-11-05T21:40:18.000000+09:00",
                                  usage_limit=4226,
                                  is_onetime=False,
                                  description="NvwAf7hOlSBfFEUcOQMXEYHzF8m9cIjwUyTMaVMoVAP5OP1Cjryz"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_7(self):
        response = client.send(pp.CreateCheck(
                                  "b0ded9e1-b593-4cd6-ba88-8079a453b844",
                                  money_amount=2688.0,
                                  bear_point_account="18679ba0-531c-48c0-9544-cc2b776f7486",
                                  point_expires_in_days=8961,
                                  point_expires_at="2022-04-03T14:35:05.000000+09:00",
                                  expires_at="2022-06-02T11:03:48.000000+09:00",
                                  usage_limit=9788,
                                  is_onetime=False,
                                  description="Z0UkOPXKep1jFsPNeua1jB7"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_8(self):
        response = client.send(pp.CreateCheck(
                                  "b0ded9e1-b593-4cd6-ba88-8079a453b844",
                                  money_amount=8553.0,
                                  point_amount=9597.0
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_9(self):
        response = client.send(pp.CreateCheck(
                                  "b0ded9e1-b593-4cd6-ba88-8079a453b844",
                                  money_amount=8517.0,
                                  point_amount=348.0,
                                  description="F7xhaxW"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_10(self):
        response = client.send(pp.CreateCheck(
                                  "b0ded9e1-b593-4cd6-ba88-8079a453b844",
                                  money_amount=457.0,
                                  point_amount=59.0,
                                  is_onetime=True,
                                  description="TjjuPniB6yr4Okg2Udv9iXSqMQb8J3iQSJeJic2mGuJKmsKLeWViwh5Xh0Ohe1EHst26OluNAixs6BC1rh1DjTMJERyJtkUyg63OuNEg3mOoFwMhlx1RPa6KY"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_11(self):
        response = client.send(pp.CreateCheck(
                                  "b0ded9e1-b593-4cd6-ba88-8079a453b844",
                                  money_amount=4154.0,
                                  point_amount=9158.0,
                                  usage_limit=338,
                                  is_onetime=False,
                                  description="bXhU3xeAmdgIIk86pUwNP4PXVypEGcP3yMzT6mxM4uuK6GdmBVGY71PucWuEB8iBjiFIbSubHrvAi7K4jyfS9dg15S1q6jH34UfMTbaogiuk2Hs0mRi4FH4wAH9Jfj7o054MsL4b1CJFFK6iXZLbDkWhxmVZQrN7vHF2MDKVtEIQupvmKHRwHKhrE1cew1CNfg"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_12(self):
        response = client.send(pp.CreateCheck(
                                  "b0ded9e1-b593-4cd6-ba88-8079a453b844",
                                  money_amount=7863.0,
                                  point_amount=710.0,
                                  expires_at="2021-01-29T12:17:29.000000+09:00",
                                  usage_limit=4681,
                                  is_onetime=False,
                                  description="YctoKArmPX6ICAqae4Gsnk7CCks4Hk5SfM8qCg753Xc8sxEuuaOPh40uyY7zIQa1dLLxrHG11vw1vq47MweLd7PEXecikrpiqy8sfzPeC95z6SUSQpi9Wzm3lpy1cb2RHdUOA0t8u9bgfw5lRkS6OP4v7xcpJRU1gAPOZCWBu1LN9FJ0cnlAGNGx"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_13(self):
        response = client.send(pp.CreateCheck(
                                  "b0ded9e1-b593-4cd6-ba88-8079a453b844",
                                  money_amount=6566.0,
                                  point_amount=9852.0,
                                  point_expires_at="2017-10-28T12:04:32.000000+09:00",
                                  expires_at="2018-06-09T05:37:59.000000+09:00",
                                  usage_limit=9628,
                                  is_onetime=False,
                                  description="Lc8mXM6C7FzYciEIbzm3gXQmk"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_14(self):
        response = client.send(pp.CreateCheck(
                                  "b0ded9e1-b593-4cd6-ba88-8079a453b844",
                                  money_amount=7922.0,
                                  point_amount=4635.0,
                                  point_expires_in_days=5699,
                                  point_expires_at="2020-10-13T15:11:43.000000+09:00",
                                  expires_at="2022-08-31T03:54:45.000000+09:00",
                                  usage_limit=6237,
                                  is_onetime=False,
                                  description="2Ig2RcyGTEKbRkheq6QL08QyyZhWxWZXOgJUUSaNEWIfPAbzyBHOjNPScM2HIOB9HTAlispEbZ0nm2AG9fUViptAmbz3OlMcIwPiDhPvFVPSC9IO8VxniaFu09a6CuuEqXlxnf5GR396SeNDqXXKEJV0JkE3TjLaqeZO"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_15(self):
        response = client.send(pp.CreateCheck(
                                  "b0ded9e1-b593-4cd6-ba88-8079a453b844",
                                  money_amount=4781.0,
                                  point_amount=2633.0,
                                  bear_point_account="7cd70715-9a97-40ff-b7c5-d332a1c742b2",
                                  point_expires_in_days=1773,
                                  point_expires_at="2020-01-06T07:22:58.000000+09:00",
                                  expires_at="2017-02-28T02:18:19.000000+09:00",
                                  usage_limit=3357,
                                  is_onetime=False,
                                  description="SAD7vVGJBWjZfkSD8toOPMhnrU8KE3wpUrjUs8sizjd1z2FtADy5Q3C5jNeYsU9MpL2cFyrblmxyYFjVJ1ksDCEql8"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_16(self):
        response = client.send(pp.CreateCheck(
                                  "b0ded9e1-b593-4cd6-ba88-8079a453b844",
                                  point_amount=5129.0
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_17(self):
        response = client.send(pp.CreateCheck(
                                  "b0ded9e1-b593-4cd6-ba88-8079a453b844",
                                  point_amount=9724.0,
                                  description="3astJ4f63IhsEW"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_18(self):
        response = client.send(pp.CreateCheck(
                                  "b0ded9e1-b593-4cd6-ba88-8079a453b844",
                                  point_amount=2452.0,
                                  is_onetime=True,
                                  description="V1aJM8EwjAmRBWR0j6oBZVp6NIn0X9ZNmVTX8mLedIikedmC30IadhoI72wGGaOUhWf0bdfCQE42KbdvTX1CfA4ud9qfvPOSoxFI1UweO2XRdO2hY0pCC8FQpyDiFdYn6ST7vY9DrqkrzPV8XVdQkJOO2v1m3A"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_19(self):
        response = client.send(pp.CreateCheck(
                                  "b0ded9e1-b593-4cd6-ba88-8079a453b844",
                                  point_amount=3141.0,
                                  usage_limit=8665,
                                  is_onetime=True,
                                  description="lsFCHOKfiqVfddqZXHyl9FtM3BiAbJG4RFalUDm4QOG36z0pAjeCTeiy225IXwhDEUvB4npxY9ubMTI7cGyilStc03UjxERdVoe6HFhJgKELPhJZ4V6jG807jn4"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_20(self):
        response = client.send(pp.CreateCheck(
                                  "b0ded9e1-b593-4cd6-ba88-8079a453b844",
                                  point_amount=3201.0,
                                  expires_at="2024-12-17T12:16:09.000000+09:00",
                                  usage_limit=6576,
                                  is_onetime=False,
                                  description="fSZTliY3BcoO0R3ofHxO79PyMPuNxlOm9TssUDzbSN9easDT5qaXE9oVV6dzFzoMTL1nMwdKXWkN1V7WK5N3KEyrv8oYx3uFnGQ6ZUjkvuDzL1kINhlYHLw7e"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_21(self):
        response = client.send(pp.CreateCheck(
                                  "b0ded9e1-b593-4cd6-ba88-8079a453b844",
                                  point_amount=4039.0,
                                  point_expires_at="2021-10-21T07:15:29.000000+09:00",
                                  expires_at="2017-04-04T13:28:04.000000+09:00",
                                  usage_limit=2287,
                                  is_onetime=False,
                                  description="z2mwFW2G7CePrEb6qc1vzC0TUXZ7gJxmZbR4QIZxkVF44SiHUuKLea6KXKMTxnuRpjgiKiTeKThsCVHvt0FegcXhZNGhoP3dbXW7imuFIarDCIG12cWukEiPRDcMrsI69et7tZGcxsWh3x4WMFG9JtXGOrRTCDsNsdOxykdQVM02fdP8dPWgv17"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_22(self):
        response = client.send(pp.CreateCheck(
                                  "b0ded9e1-b593-4cd6-ba88-8079a453b844",
                                  point_amount=103.0,
                                  point_expires_in_days=1545,
                                  point_expires_at="2024-11-28T07:21:26.000000+09:00",
                                  expires_at="2020-08-26T07:40:31.000000+09:00",
                                  usage_limit=9070,
                                  is_onetime=False,
                                  description="VKZ2Yg2XW7z7bqKh4VDMi81vkZfIvFF2aVGBrt4d4BQcmvC7IyShbMWHW8OrxkY"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_23(self):
        response = client.send(pp.CreateCheck(
                                  "b0ded9e1-b593-4cd6-ba88-8079a453b844",
                                  point_amount=5119.0,
                                  bear_point_account="d1ba1d3b-1fdb-47ca-89e2-a6e51082e5ad",
                                  point_expires_in_days=2943,
                                  point_expires_at="2018-08-02T22:30:45.000000+09:00",
                                  expires_at="2017-07-14T22:48:02.000000+09:00",
                                  usage_limit=9589,
                                  is_onetime=True,
                                  description="wz6QVslbgmox4sylqaj0m4"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_cpm_token_0(self):
        response = client.send(pp.GetCpmToken(
                                  "NHRO5ZxO4O3NjLEysHxuDJ"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_0(self):
        response = client.send(pp.ListTransactions(
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_1(self):
        response = client.send(pp.ListTransactions(
                                  description="z86s8rMyDwBbVQMVNIv43CsGJ1N1Ty1LpoGWtPPIzjjzRC7Vh9LObliCnClJEf5Qg177zO5rb"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_2(self):
        response = client.send(pp.ListTransactions(
                                  types=["cashback"],
                                  description="EpgsB3u1k6p1M3AaDCD8U2M3hy0vfxtwSmqJp6yKARh5ZRW3Kxq9vutzMeQNTZUuVlFabCqRikwgbBJfMhTrHTPQaRFRzLrLpSH0GqkthOAKJR8VBFpRQxxKQe"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_3(self):
        response = client.send(pp.ListTransactions(
                                  is_modified=True,
                                  types=["expire"],
                                  description="TlRS"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_4(self):
        response = client.send(pp.ListTransactions(
                                  private_money_id="c58173e0-6c0a-4927-b350-ae7379973c89",
                                  is_modified=False,
                                  types=["expire", "payment", "cashback"],
                                  description="FQKcrRJGtyzouTG0fNi1SBzVwDCpwO7mzwiIebwBbgsjluVjYrLryI60OsM6yKV"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_5(self):
        response = client.send(pp.ListTransactions(
                                  organization_code="NiR4y3oI6DDGG-8-2bm99nV4-6",
                                  private_money_id="810867ad-d660-425c-8f8f-9b012eadea00",
                                  is_modified=True,
                                  types=[],
                                  description="uCdyUUls75UdwXdZijuTLMB27QQHu"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_6(self):
        response = client.send(pp.ListTransactions(
                                  transaction_id="tN",
                                  organization_code="s-8M6b-O--i----s",
                                  private_money_id="539d3808-02e2-45ea-8fb7-13bb48fae77b",
                                  is_modified=False,
                                  types=["exchange_inflow", "topup", "expire", "exchange_outflow"],
                                  description="N4lU5sMlhBuyia62bkzzlqIc0ydT6mqiA8RNdj3U"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_7(self):
        response = client.send(pp.ListTransactions(
                                  terminal_id="803db879-0d54-4a71-8821-93559b8743f2",
                                  transaction_id="wecpoFXApI",
                                  organization_code="-3-5n-r--7-0B--g4l-p-2M-z2-s",
                                  private_money_id="19ab3ea3-5c42-45bf-a247-5a075756b9a1",
                                  is_modified=True,
                                  types=[],
                                  description="gB5z5qrK2mXuD0UWST9ldTa29xEBfE4jaoCgaw81ksIPXpJoHnKZwzgtMuSjmXprQOJIDMtkxUA3CwMowYwsohy6o54EyGXhKAybq9is4L00eclCf6ygQgmzcLUKbT5feGtXeOgCjHXo5HdhOmdyoXuDdYfk0Kl5lQobWMeUr"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_8(self):
        response = client.send(pp.ListTransactions(
                                  customer_name="TL0yrW2IFnoVrabBtuZMnnkajdAwZKazac8bckasxqrpu0M7pIUsW64iTD7n",
                                  terminal_id="77ac2164-1439-446f-a917-f2119a3bc5b4",
                                  transaction_id="jTu3F",
                                  organization_code="M0f6g9mH",
                                  private_money_id="8c761014-fa19-4562-b6ca-ec6a513b12c1",
                                  is_modified=False,
                                  types=[],
                                  description="HzepSQlFXs1g1p8h9cEw94TVm3QEXbRfQ4MBKBqC3S2iDFnRE3SwskPWs7mGvsLBFz2ikalm5QIcpZb2q5YnZ6axCoTTIbjOEPBaRli2lUAMJ7CyG5TMfzsA0CzHGei6FNa5iNHS8ae3s1VgKjc7Q8j7Z0S"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_9(self):
        response = client.send(pp.ListTransactions(
                                  customer_id="bbb9b557-aa05-42df-8d3f-53cca7d69395",
                                  customer_name="nzw7xhca7VuCPQn3tgDKKsPg1tK8tF9sjwQnBp1nMIeAnY6Xeri5tCJDZsGcVm09iZYX0jHs0ds3Y41lK02B8JXAbkOFKSHaiDX11U4V4mzkiQ9KgdufJCOqQoqEQic9b7rjANNhMIW5uX0nomeRn6xi8YDAJH7HJXNF3Oy8VhKyGvyermibojKhVPIvz1I1HvcbolySSXeAcLtwR",
                                  terminal_id="f8abfb31-45b1-413a-a4f8-7c0bcaa3c7c4",
                                  transaction_id="AJrx0pv",
                                  organization_code="L2-kAk10H",
                                  private_money_id="e428bf44-d697-4b39-9345-02bb98291d91",
                                  is_modified=False,
                                  types=["expire", "cashback", "exchange_outflow", "payment", "exchange_inflow", "topup"],
                                  description="oiZ9sjCAHNKHbkDV7xD9UgYkUYCn38T5jddnt"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_10(self):
        response = client.send(pp.ListTransactions(
                                  shop_id="565d6596-9682-4c21-8cfc-05fdab2294df",
                                  customer_id="336ec650-2cb9-4f90-abc0-a2fc4ae562f7",
                                  customer_name="vyYD1qoSVwF6tpYAPGi6YnBQDM8MlLw6WNmhQ1XbNNNiRTERN1SPoqCbHjtLPWoEeyLYkaItEzRnlzKYkySdT2Gi04uqdwqTzZvD1PwMG5sUToLzAoDfdSJfprAXytppmaGjNfTvZeWlNcmFKOSukr",
                                  terminal_id="3c8bd2dc-622f-46d0-b0e1-b4539f4ca774",
                                  transaction_id="C08Ccb",
                                  organization_code="-F-0F-30--u8E-UjA1yE-86h-",
                                  private_money_id="53bd51c1-5eed-4b95-8af9-31db853099f5",
                                  is_modified=True,
                                  types=[],
                                  description="v51Dnx9WEjtPQeVvIzNJybaWd5nDKgnWgGOF388caTufq1V8gMtPEUm5qxAkXQdgmA6Ox4Cr60"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_11(self):
        response = client.send(pp.ListTransactions(
                                  per_page=2636,
                                  shop_id="b460e2fc-852f-4293-bf34-3934c1710ae1",
                                  customer_id="6712c23b-2383-4130-b136-f2dfc8722833",
                                  customer_name="ByMdg32LG1oWyluqXLUpztzpGIdluCdFeopAnKzAxtAmMd124CMe44VQ69lqvNuxrP4SroQtmwf2SR0athJ6w5HZkze23HnekgXpUMEHxZW0",
                                  terminal_id="b235fe8f-b71b-42d4-8063-7f367e7f6c65",
                                  transaction_id="IuVp5e",
                                  organization_code="-F5d118kJX-",
                                  private_money_id="aa60ac47-38c9-4730-a4af-9fb95d54910c",
                                  is_modified=False,
                                  types=["topup", "cashback", "expire", "exchange_outflow"],
                                  description="7shqF2iDJgp3ZW8SpDn16YEfYX3JUUHHD0kbha6rpojFdIy8Lev3F8En8X"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_12(self):
        response = client.send(pp.ListTransactions(
                                  page=3176,
                                  per_page=4306,
                                  shop_id="79be3681-7943-4470-b510-00d67b659019",
                                  customer_id="0f782632-14e9-479d-a4b4-69bf7fe3967a",
                                  customer_name="Rrop8yq1iTaMXh9J32aBIrleFDh2AVDnVQPI4cS2rMsWBfreBRQpW9vUd58fde96uK1qpkeDgc6H",
                                  terminal_id="c303d83d-be81-47e2-9b9e-7b6f388b2233",
                                  transaction_id="o2wSmfRoo",
                                  organization_code="l-y0-M-fT9--rXh",
                                  private_money_id="d1d72603-12a8-4e82-8fd9-317085218001",
                                  is_modified=False,
                                  types=["expire", "topup", "exchange_inflow", "cashback"],
                                  description="Qy1efJIm6p2nFeDatBkmxJUfJ8iWJ5x76ilzTFGw7NqxtlVIVfYnX2Qn7EnOChsUwktnh8VjRFve7MdNMBgFvJyEEmkecVySQ3ucJUKFqVhyrEcw3WNc5IXHiI2Hhl1OjgN6fFukYqihBSq8D0896GNWlaYQ8akcWxDZkhO"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_13(self):
        response = client.send(pp.ListTransactions(
                                  to="2017-06-15T20:11:56.000000+09:00",
                                  page=2800,
                                  per_page=6267,
                                  shop_id="3f07546b-e020-4dfa-91aa-75176d0dfc65",
                                  customer_id="fd14dc73-60f8-42b2-ad8c-c0ee944b4d65",
                                  customer_name="2LIVGGp8Vx16M91diHUGfol8Mhj42rW4z5Wjzvhmx48Q4mMZZBBUosSdONTSqEGwk1DyPJJ9VhetNR8hTecHZnx73cRhZIXdPCHq2mv2UAXA",
                                  terminal_id="2506d490-38f4-4fba-b13d-dd72ed30a710",
                                  transaction_id="kbL0z4gSPz",
                                  organization_code="--9-5jKh-66tZieYA7-E",
                                  private_money_id="3f07627c-77ba-473d-8747-2571b3e7f3e5",
                                  is_modified=False,
                                  types=["exchange_outflow", "cashback", "expire", "topup"],
                                  description="DzJGZ9TM0TySjAlV"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_14(self):
        response = client.send(pp.ListTransactions(
                                  start="2022-08-21T05:02:04.000000+09:00",
                                  to="2023-08-22T00:59:39.000000+09:00",
                                  page=7332,
                                  per_page=726,
                                  shop_id="bbfaa117-03a9-4fa4-8e3c-44e4ca9e2e88",
                                  customer_id="dfffc54f-10a5-4bc3-888e-a5167f459165",
                                  customer_name="kFyfPkq8IYlCnIEfVjyhIzvswfx06lwewFlBxBPgZymInLxkpSlp0CcXJpCFZzCR1WWP7a67366cHWhkYkA6trhbS9trPinjNzKWZdpxUSeeatx6TLoIfkctcu",
                                  terminal_id="8435a804-3c3d-4433-85d4-18eba3009519",
                                  transaction_id="D",
                                  organization_code="-4--jJ-64eW6-Tp-m-V0HjUu9-",
                                  private_money_id="95c84b40-9503-4a9a-bdf4-ff2d34fc2643",
                                  is_modified=False,
                                  types=["expire", "topup", "exchange_outflow", "exchange_inflow"],
                                  description="C2YnEIi9qrFhHU4UChBktVJM6Ehoat5RskjtjMRgfY9KAojiVjkW"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transaction_0(self):
        response = client.send(pp.CreateTransaction(
                                  "cb1374c7-08da-4914-8de6-4184771c3f04",
                                  "15918858-c262-4fe8-871c-821841c6becf",
                                  "79ccd9de-1646-4976-8e8b-75d9511ffeb5"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transaction_1(self):
        response = client.send(pp.CreateTransaction(
                                  "cb1374c7-08da-4914-8de6-4184771c3f04",
                                  "15918858-c262-4fe8-871c-821841c6becf",
                                  "79ccd9de-1646-4976-8e8b-75d9511ffeb5",
                                  description="OwkPTEUz8oSFQeGoSG3k81y4L7o3GM3UKBXMJoycpsy4LyLZFxRuuFLA4Ui8k1KypnJ8Uw7M1CvtXboHcAQ9ViIsvWqws3eBMzyIUtiNxNhmRynGWfznERPtN3LViJS1dpiuu6JWeysJ5UR27acols8OLFNhYvqrdgeoTKVw3QKHsut3xFubIL"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transaction_2(self):
        response = client.send(pp.CreateTransaction(
                                  "cb1374c7-08da-4914-8de6-4184771c3f04",
                                  "15918858-c262-4fe8-871c-821841c6becf",
                                  "79ccd9de-1646-4976-8e8b-75d9511ffeb5",
                                  point_expires_at="2024-11-07T12:20:55.000000+09:00",
                                  description="ZVISKCKpUoBc7VjLNhPbQNBNhem"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transaction_3(self):
        response = client.send(pp.CreateTransaction(
                                  "cb1374c7-08da-4914-8de6-4184771c3f04",
                                  "15918858-c262-4fe8-871c-821841c6becf",
                                  "79ccd9de-1646-4976-8e8b-75d9511ffeb5",
                                  point_amount=6017,
                                  point_expires_at="2021-07-11T10:11:12.000000+09:00",
                                  description="jnuLcC94xG8sb1tOVm7p5XAwHfSXk3eOR6TecHTnhwvZsEsT85OfQ8lzdmqxGSg8e3RhOb5BMcQPLOIjmc8VMDMHWqGdZh4akYykFCJxLZHGXI2AIAE56GVf0Gw7"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transaction_4(self):
        response = client.send(pp.CreateTransaction(
                                  "cb1374c7-08da-4914-8de6-4184771c3f04",
                                  "15918858-c262-4fe8-871c-821841c6becf",
                                  "79ccd9de-1646-4976-8e8b-75d9511ffeb5",
                                  money_amount=8299,
                                  point_amount=2285,
                                  point_expires_at="2019-11-05T17:34:47.000000+09:00",
                                  description="NPt7OvjdgkL3FTfLMcm3icBM39ZlgHnODxDuHCOV9jJuZqWToSer58JP7CddvYZG2P4sGsjZKQxe7fKpax0Uc45ft1nisEBoOyK7IWRvWeQ7"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_0(self):
        response = client.send(pp.ListTransactionsV2(
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_1(self):
        response = client.send(pp.ListTransactionsV2(
                                  per_page=728
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_2(self):
        response = client.send(pp.ListTransactionsV2(
                                  prev_page_cursor_id="9de12471-99ca-4b77-9813-2bfcca47c9ff",
                                  per_page=516
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_3(self):
        response = client.send(pp.ListTransactionsV2(
                                  next_page_cursor_id="22ec9ab3-265e-40a5-8442-7863a71151f2",
                                  prev_page_cursor_id="3ce137c1-2c06-471a-b0da-4aca6ffb016d",
                                  per_page=336
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_4(self):
        response = client.send(pp.ListTransactionsV2(
                                  to="2022-08-30T12:31:46.000000+09:00",
                                  next_page_cursor_id="db90af9f-6e3e-4355-8d6e-40e6176c6b1a",
                                  prev_page_cursor_id="2ffaad79-6d64-45aa-8a44-be69bf94ef44",
                                  per_page=521
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_5(self):
        response = client.send(pp.ListTransactionsV2(
                                  start="2016-07-21T22:31:11.000000+09:00",
                                  to="2021-02-28T12:59:09.000000+09:00",
                                  next_page_cursor_id="1dc97a39-0a28-440b-a504-36765ac3bb9e",
                                  prev_page_cursor_id="df2b38e6-1fc4-4b7c-b1ab-9b0a2612f150",
                                  per_page=268
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_6(self):
        response = client.send(pp.ListTransactionsV2(
                                  types=["exchange_outflow", "topup", "payment"],
                                  start="2016-01-01T04:27:16.000000+09:00",
                                  to="2022-02-25T22:31:49.000000+09:00",
                                  next_page_cursor_id="090174f5-5769-4e0b-832e-ba49023d62ae",
                                  prev_page_cursor_id="139de550-9f78-44af-87d8-9991a48220cc",
                                  per_page=647
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_7(self):
        response = client.send(pp.ListTransactionsV2(
                                  is_modified=True,
                                  types=["topup", "expire"],
                                  start="2024-06-24T22:54:19.000000+09:00",
                                  to="2022-01-09T17:10:32.000000+09:00",
                                  next_page_cursor_id="abfad28a-2261-4770-bb9f-eadaeb23d234",
                                  prev_page_cursor_id="35e21334-fb29-4919-b760-396ad97efee5",
                                  per_page=736
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_8(self):
        response = client.send(pp.ListTransactionsV2(
                                  transaction_id="Leg5dXf",
                                  is_modified=True,
                                  types=[],
                                  start="2021-08-22T00:03:33.000000+09:00",
                                  to="2020-05-09T09:50:53.000000+09:00",
                                  next_page_cursor_id="59d05ac4-417f-4c10-8d1f-fd95efe040e4",
                                  prev_page_cursor_id="10b62b00-d792-47e2-b891-c453cf6b7021",
                                  per_page=746
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_9(self):
        response = client.send(pp.ListTransactionsV2(
                                  description="dHtUdWqjwNZ6SqXcjRYXWjjppT0r9xvCuvBOfsidrDI9VlsfxLxW5axZvNGABU1Kq4dKF1bCFldqrEeXCX83UsZSPbix6b1Za3ly7V",
                                  transaction_id="1xEB",
                                  is_modified=True,
                                  types=["topup", "cashback", "exchange_outflow", "exchange_inflow", "payment"],
                                  start="2019-04-19T17:54:35.000000+09:00",
                                  to="2024-12-02T09:54:02.000000+09:00",
                                  next_page_cursor_id="6e975fc1-ef3d-43c2-a37a-2612a0ea96b8",
                                  prev_page_cursor_id="ac5c6261-5ad1-4e56-9134-810abdf9f8b6",
                                  per_page=717
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_10(self):
        response = client.send(pp.ListTransactionsV2(
                                  customer_name="RceMuSvImdDq9y3aEus7kZPbP6pY7uTyJAbvra0dcpr2XBaxBtLUqtpR4s1JU0lVQ2OypewcGn6EYrIoiJUtnz4tPDjzGeH1vMI9teS2D85S1UHA16vfzALVhDfz",
                                  description="Jqhsy99eYUXwCEgrx3b6fZBGl5iNgWbOvie519sB5ATfDwJwr3eQ20YGcyYu0bMGv3vztYfqlxsbOENjEAJX3lDTAofzZK4Rxx8sLYfBb6BjvrBrNNM0rEDhKG45tzzgCXrxrouPH3h",
                                  transaction_id="I04AO4rgT",
                                  is_modified=True,
                                  types=["expire", "exchange_outflow", "payment", "cashback"],
                                  start="2024-07-26T20:01:43.000000+09:00",
                                  to="2020-08-20T21:42:17.000000+09:00",
                                  next_page_cursor_id="941ef2f1-9cea-47bd-87fb-4acc6bcb1c50",
                                  prev_page_cursor_id="1dde2b95-6a30-4fc4-82d5-0387e9a02e6e",
                                  per_page=456
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_11(self):
        response = client.send(pp.ListTransactionsV2(
                                  customer_id="01138506-06f8-4697-973a-73c5b9fe2fec",
                                  customer_name="SvEGfkoczpVf2XfhCesDbLNG0um3YX4ee6SkSSSI0RCCs8xN6z62EIsVi251R9OVM6dJXfTSVkQAgLF0UCGkzWfvHQLNpl08",
                                  description="kirPvpqWe6LFMxqHgshQQxZyXH54xcjjzE4jf3bC1uhrBdvXqhm8jwzIEhcNYML2OSzpp2xgjGNFVHJxj8ajHmdLScmLSMjxtIdUuX8NpagwVisjQjWa0Ga7Mr0",
                                  transaction_id="bte93",
                                  is_modified=False,
                                  types=[],
                                  start="2023-12-05T01:05:41.000000+09:00",
                                  to="2025-07-15T18:47:09.000000+09:00",
                                  next_page_cursor_id="5112bfed-8bbd-45ba-8f09-c7c5be7e3368",
                                  prev_page_cursor_id="d93f74d8-963f-426e-8ef9-8a3e8a658155",
                                  per_page=930
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_12(self):
        response = client.send(pp.ListTransactionsV2(
                                  terminal_id="6877d983-9c44-4572-b38c-f2b0646ed5d9",
                                  customer_id="150bea29-3953-4b8a-9408-acf986e34ee0",
                                  customer_name="NNnFCcwr1avxToYBT4VEV6evoILJv7tTWIqRKgT33Bi9tzz6Ttxk7d6FPiA0lsYPm9uy3bOLitkN0",
                                  description="KHj5fbn2v2B0UJuNrXCxgjdk6CWOkAWhJ0Lot3",
                                  transaction_id="toFslAl38",
                                  is_modified=True,
                                  types=["exchange_inflow", "exchange_outflow", "cashback", "expire"],
                                  start="2021-06-30T14:29:44.000000+09:00",
                                  to="2023-04-27T20:48:19.000000+09:00",
                                  next_page_cursor_id="05eb8b06-89ea-44f9-b387-f2834ee3403c",
                                  prev_page_cursor_id="6f05a394-993e-4220-9eea-4e650951e99d",
                                  per_page=506
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_13(self):
        response = client.send(pp.ListTransactionsV2(
                                  shop_id="c212b7ba-9a85-45e5-8b99-b2e739d7cda7",
                                  terminal_id="da52f90b-54a8-4209-83b5-841db4dedd0b",
                                  customer_id="6d48ed45-51ff-4283-9c43-26815b5480f8",
                                  customer_name="1SgJEpSlopBJNy3qmiwYmDuOlcchHpAG2gwwi3nOK6tJxpePLFHBs9kILByZGqDqm9YAgnobRajraam0rBpkfu82GZDo8PtRb5vVt3TqmZrxia2ui6VWr3guQRAw5Cq4lwbs5G5iUu21d4ST7CuEydnlBtSyriuS9M5GXcqFt6wV9qfsP61uEwZUrs1XMhNzPArurgTCGgpfTuJZDkeCAQBkolLr",
                                  description="oUrTRKy1uTbc45m4YwxjxtGbA05zcwQ8eNnH7AYfIcNt7NKHBDT4zItl3ZAd6IFhkcz8jRzOJNYNTmAx0cRygrFZ66y9EQQUqakXyxFnuW2T4m1VyTa1OoANMT3g8KQuzrvKESksiTJQTVn",
                                  transaction_id="H",
                                  is_modified=False,
                                  types=[],
                                  start="2024-04-15T14:27:38.000000+09:00",
                                  to="2017-04-08T13:41:07.000000+09:00",
                                  next_page_cursor_id="d930a88e-56a4-4ffd-b7ae-c779b73b7c37",
                                  prev_page_cursor_id="52838966-3eb2-49bd-8c59-ce7791e5996d",
                                  per_page=380
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_14(self):
        response = client.send(pp.ListTransactionsV2(
                                  organization_code="V-Sl395---C-z7S5-H-5W-2-kd",
                                  shop_id="b882152a-de65-4772-ba7e-aff88188aee4",
                                  terminal_id="3d4253e2-96a2-4b40-b515-64dfba992f80",
                                  customer_id="b2ced270-729a-4bad-a03d-b756300687f9",
                                  customer_name="8ATO6lTexkb25xKe3io9ZDBIqGu38r7vCoqpH5QhZu1k2tSxqrr7YJPVhda0ziWsQtZgRc6cmsvPcY7yThlkSXuhO9OLfbw29j7FyeDINdaRXM95lPwMwz9IKIn6wEZkP",
                                  description="JyErXa70KC1ZDBuFoL3t7T5TQkGNyZe8GBabvL25GCAVUwr2eojbDaPOXkEpypH4JrghAf67UGzdtgboYq9",
                                  transaction_id="zCMQ97NziA",
                                  is_modified=False,
                                  types=[],
                                  start="2022-01-01T10:12:21.000000+09:00",
                                  to="2019-06-09T05:22:32.000000+09:00",
                                  next_page_cursor_id="690f4903-a5f1-41dc-adf9-4e3875a63e1a",
                                  prev_page_cursor_id="d423ded4-7964-4fa7-b052-f7cf4a704a52",
                                  per_page=529
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_15(self):
        response = client.send(pp.ListTransactionsV2(
                                  private_money_id="50889553-41ea-48f9-b67c-adf823ce3d66",
                                  organization_code="77FEB3qUK-k",
                                  shop_id="f7dcb836-0149-4c49-8494-4102615ea6f9",
                                  terminal_id="03df9db8-2356-4845-abb7-3f57ab1da6ae",
                                  customer_id="a2831318-0cf7-4a5f-8281-2b0b8dcc5fe4",
                                  customer_name="0msuDaOhM5oqV2xleoqU08aoK4SSRQxNI4HYZa4lL8vlyT5v2fWiN7LjHjlDtCGjTLI9kXm",
                                  description="3rfByXFrnlgeqVtAvQ0rVDYOMHbm3FgLktaUhgEFTnEcwpkpUTSKxUsOoZPlM9KHj0LscW1P81Qy90jmz1sBL2rdIxI95Aq016ZjJCH7wtIwkByOxgZ1CmhlD7BVFzYE678H",
                                  transaction_id="grDW8XfB04",
                                  is_modified=False,
                                  types=["expire", "cashback", "topup", "payment", "exchange_inflow"],
                                  start="2020-01-06T20:53:36.000000+09:00",
                                  to="2016-07-07T03:48:35.000000+09:00",
                                  next_page_cursor_id="b2b5dc71-463d-4465-8a57-c66ee4676b26",
                                  prev_page_cursor_id="38d6cf3b-d212-4809-bbf0-f0c0ae65a17c",
                                  per_page=688
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_0(self):
        response = client.send(pp.CreateTopupTransaction(
                                  "4b9b2098-1ea7-4b7d-94b6-42385c3006aa",
                                  "1fdefda8-8f90-479c-b3b5-04a02d3d9534",
                                  "2b085fef-414f-404e-b30c-07caf16f239c"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_1(self):
        response = client.send(pp.CreateTopupTransaction(
                                  "4b9b2098-1ea7-4b7d-94b6-42385c3006aa",
                                  "1fdefda8-8f90-479c-b3b5-04a02d3d9534",
                                  "2b085fef-414f-404e-b30c-07caf16f239c",
                                  request_id="abb94754-34df-42b7-89d4-35bac4b3ac18"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_2(self):
        response = client.send(pp.CreateTopupTransaction(
                                  "4b9b2098-1ea7-4b7d-94b6-42385c3006aa",
                                  "1fdefda8-8f90-479c-b3b5-04a02d3d9534",
                                  "2b085fef-414f-404e-b30c-07caf16f239c",
                                  metadata="{\"key\":\"value\"}",
                                  request_id="070ae720-ac1f-486c-9d66-9d9f9224f976"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_3(self):
        response = client.send(pp.CreateTopupTransaction(
                                  "4b9b2098-1ea7-4b7d-94b6-42385c3006aa",
                                  "1fdefda8-8f90-479c-b3b5-04a02d3d9534",
                                  "2b085fef-414f-404e-b30c-07caf16f239c",
                                  description="jHRgsb",
                                  metadata="{\"key\":\"value\"}",
                                  request_id="cb2ceb6a-14f2-47ef-a158-c68e366d2aab"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_4(self):
        response = client.send(pp.CreateTopupTransaction(
                                  "4b9b2098-1ea7-4b7d-94b6-42385c3006aa",
                                  "1fdefda8-8f90-479c-b3b5-04a02d3d9534",
                                  "2b085fef-414f-404e-b30c-07caf16f239c",
                                  point_expires_at="2022-08-02T22:15:07.000000+09:00",
                                  description="1fxLB1",
                                  metadata="{\"key\":\"value\"}",
                                  request_id="d487cff9-f3e6-4eb5-9112-3064cda241fc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_5(self):
        response = client.send(pp.CreateTopupTransaction(
                                  "4b9b2098-1ea7-4b7d-94b6-42385c3006aa",
                                  "1fdefda8-8f90-479c-b3b5-04a02d3d9534",
                                  "2b085fef-414f-404e-b30c-07caf16f239c",
                                  point_amount=7904,
                                  point_expires_at="2020-09-12T16:52:14.000000+09:00",
                                  description="wvhweVkrWRctnJ2TSLmfSkWFb6oLKvNkr7xERwVYEzuAqPS2Yq5Zx72l8Uwb6djbQEnxEVuuBukUKWopaaFtoO5CUO2HA5dwLtiNF6M5",
                                  metadata="{\"key\":\"value\"}",
                                  request_id="f1ee1412-40fb-491d-b13a-170163f455a8"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_6(self):
        response = client.send(pp.CreateTopupTransaction(
                                  "4b9b2098-1ea7-4b7d-94b6-42385c3006aa",
                                  "1fdefda8-8f90-479c-b3b5-04a02d3d9534",
                                  "2b085fef-414f-404e-b30c-07caf16f239c",
                                  money_amount=2401,
                                  point_amount=8189,
                                  point_expires_at="2022-10-19T13:39:38.000000+09:00",
                                  description="AMFoXb9rmaZQXIsaxB2CgIcPvFHqcQFB1JdewR9",
                                  metadata="{\"key\":\"value\"}",
                                  request_id="9024ecbb-e800-453b-a6e2-b45d82161f75"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_7(self):
        response = client.send(pp.CreateTopupTransaction(
                                  "4b9b2098-1ea7-4b7d-94b6-42385c3006aa",
                                  "1fdefda8-8f90-479c-b3b5-04a02d3d9534",
                                  "2b085fef-414f-404e-b30c-07caf16f239c",
                                  bear_point_shop_id="6794b3c7-1610-4089-bb97-fd2d95aa8ed0",
                                  money_amount=3473,
                                  point_amount=5609,
                                  point_expires_at="2021-11-27T08:22:55.000000+09:00",
                                  description="lh4drGbWvDfmVaNvPs9iu3XzENeNNhWBPj9P6rAeXLgWVKiBaMXABCznkolZF0XVehDsumc383ILCYIvwae0oDTZVM9Vn0NHWZb8ZS9tjcczZ4Gwb0PhYqZgpZBJnGwbDDj",
                                  metadata="{\"key\":\"value\"}",
                                  request_id="457a8c16-41f4-473d-a56a-e67baa506a4f"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_with_check_0(self):
        response = client.send(pp.CreateTopupTransactionWithCheck(
                                  "5dd080a5-a514-4a1f-8868-40feb93b038a",
                                  "91325879-5260-4a35-8ad4-2d848eace7c5"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_payment_transaction_0(self):
        response = client.send(pp.CreatePaymentTransaction(
                                  "66b1b6e3-f490-444d-9c3c-7f52a4ee1dbc",
                                  "4a6f0990-2205-4e7a-bfef-08f7dd62f10a",
                                  "1070e59d-0123-45bf-a02e-32724a291586",
                                  9028
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_payment_transaction_1(self):
        response = client.send(pp.CreatePaymentTransaction(
                                  "66b1b6e3-f490-444d-9c3c-7f52a4ee1dbc",
                                  "4a6f0990-2205-4e7a-bfef-08f7dd62f10a",
                                  "1070e59d-0123-45bf-a02e-32724a291586",
                                  9028,
                                  request_id="d490a262-3100-4d8b-b6c7-4c1cdbef2619"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_payment_transaction_2(self):
        response = client.send(pp.CreatePaymentTransaction(
                                  "66b1b6e3-f490-444d-9c3c-7f52a4ee1dbc",
                                  "4a6f0990-2205-4e7a-bfef-08f7dd62f10a",
                                  "1070e59d-0123-45bf-a02e-32724a291586",
                                  9028,
                                  products=[{"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}],
                                  request_id="b06d8cdc-54b4-4bed-9248-b320dcf58d8a"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_payment_transaction_3(self):
        response = client.send(pp.CreatePaymentTransaction(
                                  "66b1b6e3-f490-444d-9c3c-7f52a4ee1dbc",
                                  "4a6f0990-2205-4e7a-bfef-08f7dd62f10a",
                                  "1070e59d-0123-45bf-a02e-32724a291586",
                                  9028,
                                  metadata="{\"key\":\"value\"}",
                                  products=[{"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}],
                                  request_id="38ea6024-15d4-4d61-8a86-423af8ea204f"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_payment_transaction_4(self):
        response = client.send(pp.CreatePaymentTransaction(
                                  "66b1b6e3-f490-444d-9c3c-7f52a4ee1dbc",
                                  "4a6f0990-2205-4e7a-bfef-08f7dd62f10a",
                                  "1070e59d-0123-45bf-a02e-32724a291586",
                                  9028,
                                  description="MMolvbDp36ZS9Ve1qo3bvmXucCaFZQN2ap2j3Mr8o8HkBWUUKfQKZC3BSMS3hsgpJcO",
                                  metadata="{\"key\":\"value\"}",
                                  products=[{"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}],
                                  request_id="9ac4e641-90e4-45b6-958c-8f6f147822fc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_cpm_transaction_0(self):
        response = client.send(pp.CreateCpmTransaction(
                                  "cE4mBLmKXcPupi77r56oXC",
                                  "69188c4e-2113-4363-8325-43334faeaae4",
                                  4786.0
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_cpm_transaction_1(self):
        response = client.send(pp.CreateCpmTransaction(
                                  "cE4mBLmKXcPupi77r56oXC",
                                  "69188c4e-2113-4363-8325-43334faeaae4",
                                  4786.0,
                                  request_id="7e2d12c6-0dcb-477e-a5d4-fa5c2e1d0998"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_cpm_transaction_2(self):
        response = client.send(pp.CreateCpmTransaction(
                                  "cE4mBLmKXcPupi77r56oXC",
                                  "69188c4e-2113-4363-8325-43334faeaae4",
                                  4786.0,
                                  products=[{"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}],
                                  request_id="808d1e8e-3cc7-48b7-b0ca-c83dbd739c4d"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_cpm_transaction_3(self):
        response = client.send(pp.CreateCpmTransaction(
                                  "cE4mBLmKXcPupi77r56oXC",
                                  "69188c4e-2113-4363-8325-43334faeaae4",
                                  4786.0,
                                  metadata="{\"key\":\"value\"}",
                                  products=[{"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}],
                                  request_id="ba2c2be2-340e-4b01-921c-5988aceb9053"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_cpm_transaction_4(self):
        response = client.send(pp.CreateCpmTransaction(
                                  "cE4mBLmKXcPupi77r56oXC",
                                  "69188c4e-2113-4363-8325-43334faeaae4",
                                  4786.0,
                                  description="mw5RMuvJN6cdbvg50QHlnDydRn68KboUvDsNqKoorksWBQ398rR59EiVvlwAljCUfIeXX8HLaAA7O7c9AzboPOcXU3N4H4mDJ",
                                  metadata="{\"key\":\"value\"}",
                                  products=[{"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}],
                                  request_id="353709dd-b35b-4569-8024-fa4bb00b0e71"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transfer_transaction_0(self):
        response = client.send(pp.CreateTransferTransaction(
                                  "579126f3-0f29-45ad-a048-4009f35287c2",
                                  "2e2195b9-fa97-433b-9ad0-1dad04e0857d",
                                  "55aab81a-51ca-4470-acf1-631f9bf8851e",
                                  6914.0
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transfer_transaction_1(self):
        response = client.send(pp.CreateTransferTransaction(
                                  "579126f3-0f29-45ad-a048-4009f35287c2",
                                  "2e2195b9-fa97-433b-9ad0-1dad04e0857d",
                                  "55aab81a-51ca-4470-acf1-631f9bf8851e",
                                  6914.0,
                                  request_id="aa555288-f7fb-4168-9a4d-d822fea51059"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transfer_transaction_2(self):
        response = client.send(pp.CreateTransferTransaction(
                                  "579126f3-0f29-45ad-a048-4009f35287c2",
                                  "2e2195b9-fa97-433b-9ad0-1dad04e0857d",
                                  "55aab81a-51ca-4470-acf1-631f9bf8851e",
                                  6914.0,
                                  description="aIB",
                                  request_id="3f25a9e3-aa88-4e5d-916a-8b8e11624fb7"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transfer_transaction_3(self):
        response = client.send(pp.CreateTransferTransaction(
                                  "579126f3-0f29-45ad-a048-4009f35287c2",
                                  "2e2195b9-fa97-433b-9ad0-1dad04e0857d",
                                  "55aab81a-51ca-4470-acf1-631f9bf8851e",
                                  6914.0,
                                  metadata="{\"key\":\"value\"}",
                                  description="9HnlNHLuA0aOdVgj6K1GxL1yIWWOf6rndacFLJTT1b61igwFwXc9Xw81AcLgJ7HUPLZ2JY3PzdziozZN0eUlnWAmEdaqY8pJTyG58WWoVkTIofZ63ZHIa2ZaoOg0V0uaqelttkE7ehROL4XrOdkUWUyHCGGZhBjhjuTKoJ3qmoFsOI4faRjWQ8",
                                  request_id="064416e7-5085-495b-930e-ee4ba9e6144f"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_exchange_transaction_0(self):
        response = client.send(pp.CreateExchangeTransaction(
                                  "ae6b2c00-a58b-451e-80e8-efcbe62ff98b",
                                  "c70c7399-c50f-451f-b9a5-76980bff8402",
                                  "cb5df075-f585-4254-b41d-83a1ad0abf60",
                                  6825.0
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_exchange_transaction_1(self):
        response = client.send(pp.CreateExchangeTransaction(
                                  "ae6b2c00-a58b-451e-80e8-efcbe62ff98b",
                                  "c70c7399-c50f-451f-b9a5-76980bff8402",
                                  "cb5df075-f585-4254-b41d-83a1ad0abf60",
                                  6825.0,
                                  request_id="837cbbb5-b318-4585-8112-2a26c7e8fe9f"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_exchange_transaction_2(self):
        response = client.send(pp.CreateExchangeTransaction(
                                  "ae6b2c00-a58b-451e-80e8-efcbe62ff98b",
                                  "c70c7399-c50f-451f-b9a5-76980bff8402",
                                  "cb5df075-f585-4254-b41d-83a1ad0abf60",
                                  6825.0,
                                  description="9dHqyzQZgDiWvj8etzcFhDXwcbaPJFYUtWSDUUOzA6JdRqRnPGGmxcvLiruhnUYA2evPNgfEtt9VoXY8Zbi4bO3aVrBDzVdWXtFy5mPY7A1qrS8dHstlQrZdGZnteTqjTP7dz4MDySQpvknUff9KCWQ",
                                  request_id="e5b8a8e3-6709-4859-bfbc-c71a274d5f4a"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_bulk_create_transaction_0(self):
        response = client.send(pp.BulkCreateTransaction(
                                  "FvGq64q",
                                  "mrZJcpF",
                                  "iWZHeIfQdHdvs4v2aUitPGe5J3m0ryc2OEvF"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_bulk_create_transaction_1(self):
        response = client.send(pp.BulkCreateTransaction(
                                  "FvGq64q",
                                  "mrZJcpF",
                                  "iWZHeIfQdHdvs4v2aUitPGe5J3m0ryc2OEvF",
                                  private_money_id="542b6c58-1d38-459d-97fa-fe107125e67a"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_bulk_create_transaction_2(self):
        response = client.send(pp.BulkCreateTransaction(
                                  "FvGq64q",
                                  "mrZJcpF",
                                  "iWZHeIfQdHdvs4v2aUitPGe5J3m0ryc2OEvF",
                                  description="H3wIxddmLq7zZNIbWwSHwKCgXCSNnukUNKPot1qoYiOk2cFGGn09uTba138P32btAcZSker4bwN5IYLm99wEVRQ8sJxsInHOegu4ueAVfQ8nRhLcha2zRRyQ",
                                  private_money_id="4c1250ec-21ea-46b7-b31f-70fea16b41aa"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_transaction_0(self):
        response = client.send(pp.GetTransaction(
                                  "da124937-e649-4c71-982a-a6e301d6ef86"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_refund_transaction_0(self):
        response = client.send(pp.RefundTransaction(
                                  "62bfd79c-c5c6-48bb-be08-8badf5722a1e"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_refund_transaction_1(self):
        response = client.send(pp.RefundTransaction(
                                  "62bfd79c-c5c6-48bb-be08-8badf5722a1e",
                                  returning_point_expires_at="2023-02-22T09:28:07.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_refund_transaction_2(self):
        response = client.send(pp.RefundTransaction(
                                  "62bfd79c-c5c6-48bb-be08-8badf5722a1e",
                                  description="0ufgYUkqe3kskveA2n2lBOE9H5VVR8QU7QjrIemlNkbreYYQh0DpuFWTXBEy8Kcs0g4R",
                                  returning_point_expires_at="2022-07-14T07:05:27.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_transaction_by_request_id_0(self):
        response = client.send(pp.GetTransactionByRequestId(
                                  "07696302-af43-4e8a-9aca-20634c6a4d1d"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_external_transaction_0(self):
        response = client.send(pp.CreateExternalTransaction(
                                  "6699706b-410e-43ca-a36e-330eccec726b",
                                  "262b2a8f-f5fb-4076-8097-38383791f262",
                                  "92b16c33-0b6c-43e0-9bfe-faa6606c8e84",
                                  2437
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_external_transaction_1(self):
        response = client.send(pp.CreateExternalTransaction(
                                  "6699706b-410e-43ca-a36e-330eccec726b",
                                  "262b2a8f-f5fb-4076-8097-38383791f262",
                                  "92b16c33-0b6c-43e0-9bfe-faa6606c8e84",
                                  2437,
                                  request_id="65e2794f-510c-497b-a41b-1fbde5317529"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_external_transaction_2(self):
        response = client.send(pp.CreateExternalTransaction(
                                  "6699706b-410e-43ca-a36e-330eccec726b",
                                  "262b2a8f-f5fb-4076-8097-38383791f262",
                                  "92b16c33-0b6c-43e0-9bfe-faa6606c8e84",
                                  2437,
                                  products=[],
                                  request_id="80129708-8e2d-48ea-9ddb-957e3e63c5a5"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_external_transaction_3(self):
        response = client.send(pp.CreateExternalTransaction(
                                  "6699706b-410e-43ca-a36e-330eccec726b",
                                  "262b2a8f-f5fb-4076-8097-38383791f262",
                                  "92b16c33-0b6c-43e0-9bfe-faa6606c8e84",
                                  2437,
                                  metadata="{\"key\":\"value\"}",
                                  products=[{"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}],
                                  request_id="690fa3ad-e25a-4b53-9a69-767351df754b"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_external_transaction_4(self):
        response = client.send(pp.CreateExternalTransaction(
                                  "6699706b-410e-43ca-a36e-330eccec726b",
                                  "262b2a8f-f5fb-4076-8097-38383791f262",
                                  "92b16c33-0b6c-43e0-9bfe-faa6606c8e84",
                                  2437,
                                  description="JGtLxfbPFfaIRWKNMj5dtiKnG8zX8tvWqvm0QmTuUJdqTxvEdTrlIkQGkGEpBmPu4",
                                  metadata="{\"key\":\"value\"}",
                                  products=[{"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": False,
         "other":"{}"}],
                                  request_id="30d75c89-25bb-4deb-a7f1-509062af654f"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_refund_external_transaction_0(self):
        response = client.send(pp.RefundExternalTransaction(
                                  "84cf16a2-3d66-4e04-9885-aa03d2c00a45"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_refund_external_transaction_1(self):
        response = client.send(pp.RefundExternalTransaction(
                                  "84cf16a2-3d66-4e04-9885-aa03d2c00a45",
                                  description="l5C8v6PzPZ7WYdNdFH0K2AD1TKPyYWlsuXOaI"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_0(self):
        response = client.send(pp.ListTransfers(
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_1(self):
        response = client.send(pp.ListTransfers(
                                  description="vkZ0hBxHL8DiEhh2VnZoTnDJVFMsrvforwTxS8CU7xfi8Z8k0xTZqtjlnCMFHx8TKGI2xE1Bu"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_2(self):
        response = client.send(pp.ListTransfers(
                                  transfer_types=["transfer", "coupon", "topup", "cashback", "campaign", "payment"],
                                  description="Z6xonfMjSwz5WZMumkxzfJ30tPK0gRaUMP2gDk6hqbkZIVaXAnNHVk2JXX3zMOLBJZia176ashqVZtOtkEaR1q9tiLg6fzyprLRU7zHjv8AVBjeNyLKs5OWxHdcCIY8xfr6"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_3(self):
        response = client.send(pp.ListTransfers(
                                  transaction_types=["exchange"],
                                  transfer_types=["payment", "exchange", "cashback", "transfer", "campaign", "coupon"],
                                  description="JsJ"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_4(self):
        response = client.send(pp.ListTransfers(
                                  is_modified=True,
                                  transaction_types=["expire", "transfer", "exchange", "topup"],
                                  transfer_types=["cashback", "exchange"],
                                  description="Zx4bL3mKFhR8vX2cSSl7ObxLVY39aP4hWiGuhuMVGxVPfacjrslMZj02ZSv"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_5(self):
        response = client.send(pp.ListTransfers(
                                  private_money_id="7068670b-8849-46a0-9328-db3ec33dbddf",
                                  is_modified=True,
                                  transaction_types=[],
                                  transfer_types=["payment", "expire", "campaign", "cashback", "transfer", "coupon", "exchange"],
                                  description="pu0MDWpiDvc0yH6ElFsXXAu1ggrDUCau2gnuJ4JjDHOBMd26S3mihK7Gc9ouBdfj9baUMO0QAZUEFS2BtlR4VIQVU2y1HqZTEweuiw2lLR54hFsTWRshdiadwR5IXzLVIyr3tVtLqZwSGR9"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_6(self):
        response = client.send(pp.ListTransfers(
                                  transaction_id="d9dea1c1-4088-4174-9f53-a284a51dff44",
                                  private_money_id="77e561b9-24e3-4392-8f5f-9996faf7d62b",
                                  is_modified=False,
                                  transaction_types=["exchange", "payment", "expire"],
                                  transfer_types=["exchange", "topup"],
                                  description="VkjkAmAursWmY8lUcPFFH8OBO0gTOPvALkgMJawdwCaYZ0f5A4WuoS1IAZgM9FDFzPlCr68wDPzP1uu5pUlr0e255o067YSY4rtLpQIhTsQtfNlHNUlxPCHvPHeZ4gCJRD87F5OLspmSpFUbvNXpSViDBWfAPmGs"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_7(self):
        response = client.send(pp.ListTransfers(
                                  customer_name="08EBxCdTJypI42Inu56VLkNyEIUSlWSa6lZGo7PhTYTGs3X1TO4wzYkyXyy6lwP0N21ySbpke",
                                  transaction_id="60074f6d-1b1f-4444-a504-27aa2e7e66cd",
                                  private_money_id="24efa45b-7e07-4a9f-aedb-9b1d7d493633",
                                  is_modified=False,
                                  transaction_types=[],
                                  transfer_types=["payment", "cashback", "transfer"],
                                  description="zT4JKnzi5L8cpHHMwXcAIRcjNLk0uNWeNHUqo3XUcSS2VsZS4Lj4GkDI0oXRDtBJxvb11fmeXANYMff4lfRrFSD2GU0U0YSAX1Q89ssC5bpXwoj13v0TL4xfkZtGKmcVmh1Ev4M51rbMFUU1jVlGa8RcO6wCBU9Eja3cVhwcSD6iDQwph5T"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_8(self):
        response = client.send(pp.ListTransfers(
                                  customer_id="91296555-1f19-4e1d-942d-facd4e64e6aa",
                                  customer_name="16YqrHAO8roW5GeUYrGDCf0i4xR1YeuarVLqKYaajZ",
                                  transaction_id="fd1f4784-b934-4335-8b6c-bbcd9822fbe2",
                                  private_money_id="60a989b2-ba45-4de4-aaf0-3af8f00db7dd",
                                  is_modified=False,
                                  transaction_types=["payment", "transfer"],
                                  transfer_types=["expire", "transfer", "campaign"],
                                  description="SC89X69cCxk1lmjrE2LQn8WVW3m44epc5OJWLmTr626o4XX2rICXAhNDPHxc5nbxE6dOS7QbkrsxeFRrdV1gQxduyB3Z9uLKn8CBvuRo159rPRsnfNPsYuS9nBNol3v7"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_9(self):
        response = client.send(pp.ListTransfers(
                                  shop_name="lVyt80jIUhEuqcVn523Q4baN0pPcQtGvFKDcSo8tIJSa9PEebkW1DkF2wmIfJ50Imwzo4spi93QyENqmwOx8YnV9T8kaR9yxV",
                                  customer_id="6cd1cfeb-e294-4b69-929a-62303eb65459",
                                  customer_name="h350uvTmXJ3taiP6zrMBCvrTp2KPzJXVVtSjH7KpG4W7WMlwVoyitMfaSwwyI0wlFPTcSqX1OcJJCpH4abwAvDfIYbVEzwXEzeX",
                                  transaction_id="7d14df37-d484-4d83-8036-a0c3f19900f5",
                                  private_money_id="2a68520d-1062-47dc-be42-d1ac557b2699",
                                  is_modified=False,
                                  transaction_types=["transfer", "payment", "expire", "cashback"],
                                  transfer_types=[],
                                  description="vZavHGIwQGFD3y3WQcOQ77GqTbykQNeXwfkirPrCHC6oGX762VWlOvBKRDnWwJ1RB1Xf0sJSNdUIy9UNPxEn8d7PVOwf2KxYZgpwkatfDXh6wjcpgPghclYC1sotThNzacMPGRW9XLUFYLKH2dLAXy2plAkroUr6KjPvdUwWdZh0L8"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_10(self):
        response = client.send(pp.ListTransfers(
                                  shop_id="7eb0aff1-f14e-452e-8b7d-61adb380f83c",
                                  shop_name="4Tq0PqVhzCkKROCStDoZvAY3OKa5oCE4xLFobA9UOrBeN520IjUnvAonmJrl0Qqm11RMoDMOSwDGwLJ7XtGOGgKQwzAg5",
                                  customer_id="ecc88e49-3c14-489b-abee-d4fd8daef6c4",
                                  customer_name="gdQyyCPmcszk1DSduCpdgUz5UizzupfDUVzOTa3MaAaf4kTfREjRbk7TIk1gephK43IsijpvrzedeO1cdtY9cqUS5AzQzHdKGL1guEaRrfiOPX45f7SdsQcMHW7he8Z1qLepuyyE02MG8yUNtUKfprHpGaVcCOEeWb7TQI3q8qslujxF3n4fR7Vfp3vRJLnSgiLPjnc4kQ0HdyTor536XOfVM3XXOQ3tGi0CJH7VMgkZVkFMaOxCQ0Il",
                                  transaction_id="9733a614-fab4-4fcc-a0d3-5b31c67962c8",
                                  private_money_id="cbeb5039-2bd2-428b-ad68-6fb1d8d8bdfe",
                                  is_modified=False,
                                  transaction_types=[],
                                  transfer_types=["payment", "cashback", "expire", "transfer"],
                                  description="FmlvrlMvNLwEsnbNKTS2h75GF8UpjoAlQvJzCU8IgWIQfnPgb4T4DEkgPLD0xZMd5yjnHtiPzKYB9uBkIh8qvqswUq9MIMd1v50tEiK5VU8URPZftDXY7iH91521L9iCZDgOHv8ccbKA9zaXWI"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_11(self):
        response = client.send(pp.ListTransfers(
                                  per_page=6639,
                                  shop_id="445462f2-5650-4a1d-ade7-3618880ba8bf",
                                  shop_name="iqGxhGUs6ZnMyMQoClDSK7KRPQ6M6EMYtB6Ep2GnDZJdtjBh5VRBTfV5MJhYQTBRBM7G8j00YInJitv9WP6kwxoiXMMFgIG6MJKNbnVLomjuJJQI4ykecPid861BWO2utY6ykCTVCcIXTPlbcMZgCJ9BjKA9LvljTLcW71b8cClVacDr5l3x4FVfYiLUL8Bb8dzaB45kELqQHfqMF0cAfS47CSQOovJ8c1i3",
                                  customer_id="2bbf4666-5b65-4dce-8fb1-9f716b286690",
                                  customer_name="Bnpp3tyKjZPjTs65qzNTqIMvOUP7lDJ32SCMXHu4UsQsifzmvmEGKnmcQWOqm2bxZSUNMN2LXvZ3UB0bY6L3973iqLKkGFIZmfuXhD9mm06njf2aXb7PnD9gNpMDYfCPceKjPow2YL1adnoZFEUP94ii4uT2NJ6DSRSGMdhjjWzKEnHt1GlWmv2y5j3kpGt0e4jNi92dahl",
                                  transaction_id="bda42c6e-18a8-42ee-99eb-0eff2ebfea08",
                                  private_money_id="851c313a-c888-43a1-99e0-0d4bb926a292",
                                  is_modified=True,
                                  transaction_types=[],
                                  transfer_types=["transfer", "topup", "expire", "cashback", "coupon"],
                                  description="PkZF0J60lUnUwRinT2la9EMVbGBQcWz4E8fUZnWcjAk0kMso3CQzadAG14rJr7OIiIwKYtNBz"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_12(self):
        response = client.send(pp.ListTransfers(
                                  page=4465,
                                  per_page=529,
                                  shop_id="559ce0b8-c26e-4c01-bb5c-be21df42192a",
                                  shop_name="ODkJL8EIU81Vy5zPsQOGlQlr06Jl9JLWCZ8neyUVmWBR3xve7r3YSLXQYTyvYaaI2qvRlrSNIrRDPa1eyCiQOxDTwWc9gws9XAUrux74v2ITxjA0PgzICgqeJVlSY26G92wNF5y9aZcAMQT3BxPWw78yOKfPR1NUJQvD2rVGC8",
                                  customer_id="833e6222-c1b4-4612-8aae-1dca405fd4cb",
                                  customer_name="YYu6jp9XJncsuSh46krybNv1zjGCQgXpBAn6vYjVqpA4IONiLV0kr6A1DgXWodpkxho8rBfuxAgk4G7K3EbPTtYbjyxowsbeNA1qdSnOGMCPl7IMBQKQv86A0JZpBpvSAXbobD9Ki30vC5rrnazdVnK3PrJ5SiaT9q7d0MByh1j24T8jie07UHeDFjaRvAps3KfAZfCcJF6TIE",
                                  transaction_id="2798cae5-6e85-4152-bc82-eae3b243e7f2",
                                  private_money_id="a7391768-dba7-4f69-a04d-c4dee6af5f19",
                                  is_modified=True,
                                  transaction_types=["expire"],
                                  transfer_types=["expire", "coupon", "campaign"],
                                  description="qC0B7Kcw0qagkhJ7wfZWTULKa8VECsBZr3IToxXjdyKGc7ZzHUV5fOm8mtNakhvcdUzoLcA59nUhEAXqtCyQcPmsvpgfmd8PIAhkngoJScrC1WRA"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_13(self):
        response = client.send(pp.ListTransfers(
                                  to="2021-02-14T04:41:34.000000+09:00",
                                  page=5519,
                                  per_page=8002,
                                  shop_id="5cb8e7a4-db54-4107-a2bd-70923811a5d3",
                                  shop_name="rzSbRU1v2KZFFhdMjCCzsHpBmrvRb2UjrXmXby0g0KQCQJco6Fst7K2jJcCqUZTewzuJ3F92QKd3C9M0vBcKWIUBdcBNwq9T0OG7VRzcPfWGO1YJqrl83WexbWjPBIcMUJ3obVqULs7P",
                                  customer_id="3932f409-f473-4812-b809-d0c77e8b8d7b",
                                  customer_name="UAdxQTQ69L5ufP3C8GoKbqWo6okozRxG7O1lnWZInpqxewkSnO8G8BVdp2SnU56fm1",
                                  transaction_id="f3c38910-0015-42a0-9f66-aa74aa523a9c",
                                  private_money_id="5d7977f5-2fb8-4652-aef3-12e461c631e5",
                                  is_modified=True,
                                  transaction_types=["payment", "exchange", "expire", "transfer", "topup"],
                                  transfer_types=["transfer", "exchange", "campaign", "cashback"],
                                  description="gBjKxJ1kVUP7sJk9W7sPqDCWwYS94nlMA9QMeCafNqHwyMdjdwcWi3JTYLChkb6TlitzWaW4uPhPny3cB55XyFtx17QBRLdwgp38D246YReej2SSevahES9poV0ViKFLpI4REDYg"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_14(self):
        response = client.send(pp.ListTransfers(
                                  start="2024-07-10T08:49:16.000000+09:00",
                                  to="2017-07-26T19:47:22.000000+09:00",
                                  page=9304,
                                  per_page=8816,
                                  shop_id="2005b332-9651-40b8-a30a-48ffd1dc538a",
                                  shop_name="wkpiTfx0K3NI9FJ11nkGfRQlGszH71XXMwwageqdiCUtiam5OCYCyW06FKS14FS73",
                                  customer_id="6ff8661e-d9dc-4447-890a-261812bffa9d",
                                  customer_name="a3ijeaDjTIJss0bIT0ZqOXGSTVH9BRjr8phyPclxsBq9XBmkTSfhHrb5sDnsI3ZWUf9QMTgobmXveIIZc15XikWWDvoW8CZvliqF7CSsjWcuOJS4Ehtu4LwcLHvZh25xxfXebiI3VayaI3kTnTLIkpOXuMZobSfeWKzoEFQ5pyI5j9pCzj3hQwJJC",
                                  transaction_id="eb17985d-2eea-458d-ba95-fa47894a5d5b",
                                  private_money_id="ccebaccb-e5f8-4839-8a81-79e1339c2b8f",
                                  is_modified=True,
                                  transaction_types=["cashback", "payment", "topup", "exchange"],
                                  transfer_types=["expire", "campaign", "cashback", "exchange", "payment"],
                                  description="RysjIT"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_0(self):
        response = client.send(pp.ListTransfersV2(
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_1(self):
        response = client.send(pp.ListTransfersV2(
                                  to="2016-05-19T03:51:03.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_2(self):
        response = client.send(pp.ListTransfersV2(
                                  start="2018-06-28T12:53:42.000000+09:00",
                                  to="2025-08-05T21:35:39.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_3(self):
        response = client.send(pp.ListTransfersV2(
                                  description="1O8xVGeOGcFlOxiVnFhvQYgTq0yLoByCmHUuVyH3cfcF8Pf92JXudRmeZmjiokTl117bHBnYglbQt4QBFDEJKi3AHyd9yQ5W9RMhIq1dhsWztxTud1TnBQZsbkd",
                                  start="2020-07-27T06:53:50.000000+09:00",
                                  to="2019-07-22T10:30:08.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_4(self):
        response = client.send(pp.ListTransfersV2(
                                  transfer_types=["coupon", "expire", "campaign", "payment", "transfer", "topup"],
                                  description="KWD0fiDnREQQDwR5XEyIFeG77xZhQ031Bv0fXxSyFQJeZ6rdQ8buBb1f9slLRuiYJe4XyJvTb23a",
                                  start="2020-03-14T13:09:59.000000+09:00",
                                  to="2018-07-19T14:11:21.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_5(self):
        response = client.send(pp.ListTransfersV2(
                                  per_page=925,
                                  transfer_types=["coupon", "transfer", "expire", "payment"],
                                  description="Kvikb",
                                  start="2018-03-29T03:19:06.000000+09:00",
                                  to="2023-07-01T01:25:32.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_6(self):
        response = client.send(pp.ListTransfersV2(
                                  prev_page_cursor_id="5a8cb885-93b7-4968-b13f-e9065fc1ff54",
                                  per_page=521,
                                  transfer_types=[],
                                  description="9ynJs1QCqTRlC3W1MGePxsBFCAyv0dcBt87MHAdufVNZM7qsWa8JyqZo0jQRpDPE6rh6ExoxFn0c43cEW5yWSswalnNSPl4nKgIh67Gkz5WkqpvEXvT4G0zj9vSzfdqnwxVoVRAJZtMnbN2adZxWSJweQkjDaZNU8iBur4dbIER6acqYlw",
                                  start="2024-02-02T15:42:04.000000+09:00",
                                  to="2016-08-25T01:29:18.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_7(self):
        response = client.send(pp.ListTransfersV2(
                                  next_page_cursor_id="57d9e313-6445-438c-b0b9-3ec439e77024",
                                  prev_page_cursor_id="6a5565b3-e96f-4160-aad8-c857dc1f2327",
                                  per_page=387,
                                  transfer_types=["exchange"],
                                  description="7xTzrPkAXyiXMztQxtJ4M2WJmA50gKlydbRXM1sy2g1Pf0MqzXeXqK5rRDKBvomcRcTm4csmVWyjay9TthXSYCbva0t32yWLYVWM4QhXAPz9W0Mxm5OYGh3N4Z6M9NXBY9oPVgI76tvDy",
                                  start="2021-06-04T03:44:58.000000+09:00",
                                  to="2016-02-25T15:21:47.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_8(self):
        response = client.send(pp.ListTransfersV2(
                                  transaction_types=["cashback"],
                                  next_page_cursor_id="10f2975d-1790-456d-b970-2fc64059f4d2",
                                  prev_page_cursor_id="891bf7ed-f355-42fe-b6e5-ef827c4b9964",
                                  per_page=519,
                                  transfer_types=["transfer", "expire", "payment"],
                                  description="lSSsYDRmoQAbzux2YVPLs6mqcLQO6KAfySYCh0uqCGrCwLPsZTQHaYj8b8oAQjqHWHEUSfBXgsFSQYVjyMJi1osniwzvMM5724wrvJulOUj4A8M3jM0zpEWete9qDkCIpsjezZ2M4DgCUcWaYN25M17e8QItVUDPdnGbbjU",
                                  start="2017-06-10T09:09:15.000000+09:00",
                                  to="2016-04-18T19:52:41.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_9(self):
        response = client.send(pp.ListTransfersV2(
                                  is_modified=False,
                                  transaction_types=["exchange", "cashback", "transfer"],
                                  next_page_cursor_id="e2590801-5e40-461b-8110-539d51d51d2f",
                                  prev_page_cursor_id="a4a03b6f-faa6-48fe-88a4-d0f9078a983d",
                                  per_page=304,
                                  transfer_types=["exchange", "cashback"],
                                  description="yexDJw4m5W5NSAarqtGtlcKJp9gTWhEWSlBiVnl9lORTBFy0IWWO4H8KmbVB2M5EGOlNZgqvSi38sr7tIAdAm2GfCQqu6PVWox7el",
                                  start="2017-03-04T01:54:13.000000+09:00",
                                  to="2017-05-10T23:34:31.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_10(self):
        response = client.send(pp.ListTransfersV2(
                                  private_money_id="9d93ce54-91e6-4322-9d12-739d5879dd72",
                                  is_modified=False,
                                  transaction_types=["expire", "cashback", "transfer", "topup", "exchange"],
                                  next_page_cursor_id="2ed7910c-d1c1-47f9-aa8d-2ccc92902d9a",
                                  prev_page_cursor_id="0596f408-1119-41a3-a4cf-79ff70bb9da1",
                                  per_page=396,
                                  transfer_types=[],
                                  description="3AIIQZmW74G7CnNpvzFPpYINeb1rEwkSNbZUKM9QJifASeEjt7rgfB4dUvUA5MkBayzjLixvqernP2ia0JTvsqFBudbGeZdEPGzzDd2lyZr3fyGm4G1h2gpnMz4EtR2vopXxSWiIg6gduAWVf9XkDSsioG64",
                                  start="2018-08-02T17:59:49.000000+09:00",
                                  to="2018-12-07T20:05:22.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_11(self):
        response = client.send(pp.ListTransfersV2(
                                  transaction_id="272cff66-15e2-4374-ac9b-f38154ad010c",
                                  private_money_id="a5ea0593-81c3-464d-a293-659f455c9949",
                                  is_modified=True,
                                  transaction_types=["expire", "transfer", "payment"],
                                  next_page_cursor_id="49b96d65-7153-4c06-93f8-ae6282c39fac",
                                  prev_page_cursor_id="db7ac25b-147f-4852-94f9-1e160b46cd36",
                                  per_page=598,
                                  transfer_types=["campaign", "transfer", "payment", "cashback", "coupon"],
                                  description="6TRb2QsyUYaFBg0rLG7i",
                                  start="2022-07-09T08:10:51.000000+09:00",
                                  to="2024-10-28T00:32:14.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_12(self):
        response = client.send(pp.ListTransfersV2(
                                  customer_name="umX9lPF6p8o2y11Yrgt4LCmHaJMs2PMcoeItTVcWkxXihexQXo312p3Wls1sE7BHULcZQtWWfaD4rWZB2GIm3dWvJq3fHzlHa1nO6pf4h9ws9kLnk6c",
                                  transaction_id="b0c32819-3ece-4962-80e2-d630b93993a3",
                                  private_money_id="8e0a0ca0-6efb-46ca-8484-644a76a3e7dd",
                                  is_modified=False,
                                  transaction_types=["exchange", "topup", "transfer", "cashback", "payment", "expire"],
                                  next_page_cursor_id="14f80a79-934c-4bab-aa49-e047b893ed1c",
                                  prev_page_cursor_id="ca367023-56ba-4d95-8719-96ec05e940be",
                                  per_page=404,
                                  transfer_types=["payment", "topup", "transfer", "cashback", "campaign"],
                                  description="mHAR3RBnK72f11paMW4hGPanWOZJLbDfcebA2uxdCspznoi6atFNTbrEABXoODKwUOy71",
                                  start="2020-10-10T07:12:50.000000+09:00",
                                  to="2023-04-11T15:30:10.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_13(self):
        response = client.send(pp.ListTransfersV2(
                                  customer_id="a0327969-162f-4fed-9828-f97fd44ac862",
                                  customer_name="yuBcqQnQ9Lj9uq1rjYyblkDRghHjQDZezbRZC9FxfNOIHrbpOq6mcQRKL5CG2GPSQQB1U6IjRsZr2eFWgbnzGrBQcbaSK3iX1ZFYsGd1YMLCaCs0F5pkoUcbMvLHGSU2LTCLPQ5GJELxIJ85m7pWO5Oq5sU8iwoJ735Qje9VnUZQt0pzes3TegY2AoCAsHwCP5A6Scunsmt5agjEkUDn1nh1J0PoLY33AeuLX1vt0Xc",
                                  transaction_id="d3bdf3b0-ee95-4544-8f8b-87d06be1c6c9",
                                  private_money_id="2dd136f3-5908-487b-aabe-a695d5a68eef",
                                  is_modified=True,
                                  transaction_types=[],
                                  next_page_cursor_id="9033c9f9-954a-474b-8a86-87a41fd8fefa",
                                  prev_page_cursor_id="25b98bce-65d2-43a7-9d95-2e2ce43ebb06",
                                  per_page=356,
                                  transfer_types=["transfer", "topup"],
                                  description="TrsJZ4LsdIfCC8uQL",
                                  start="2016-06-19T21:09:18.000000+09:00",
                                  to="2020-07-22T17:47:49.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_14(self):
        response = client.send(pp.ListTransfersV2(
                                  shop_name="KagjGEM3GfsC9B0w8zKt6bQig1LgqOPtR6wzZdUh56Q0WZf8IPC7BRlPxu7PJAL2SSrdIkCx2w3UniyERaYjCV8kJefHmgXwlVomKPcnp5Z68uiRVcRs6iSVq6CAE1cykbPfFVTBynTVWrp1vTM1qsdO4ANmXuI4",
                                  customer_id="d9defb96-653e-4070-acea-e661c4734461",
                                  customer_name="jMjNf8XzKneiyaJFmKrTqfSFemIMfA7XBmcoIx81EXrZTOXzCYdt",
                                  transaction_id="f564454e-8e63-49d3-a325-e3b5cf7b91b0",
                                  private_money_id="ce716454-b5d2-49ad-9468-c276f58246bb",
                                  is_modified=False,
                                  transaction_types=["exchange", "topup", "expire", "transfer"],
                                  next_page_cursor_id="b06f04e1-4cd9-4cf4-987e-d2785c82c77e",
                                  prev_page_cursor_id="72fa7747-a9c8-4bbd-b210-00b518cb02a9",
                                  per_page=579,
                                  transfer_types=["coupon", "payment", "cashback"],
                                  description="0CKWqFPB7cXogK3lXTpk1ACQL5MC28qImQU81piDFRyBs61QA64ubFmiSNGPB6PWeR4fjojaItl7qDDnWfDz83II3SsVbG",
                                  start="2020-04-08T02:34:10.000000+09:00",
                                  to="2024-05-07T09:48:34.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_15(self):
        response = client.send(pp.ListTransfersV2(
                                  shop_id="1f497aaa-58ca-469a-be9b-00c14a74767a",
                                  shop_name="xkiC6dodh0lsFj5rFalo907TQSGuwj68ad9K1XBWVYxIt1hLKB6GROESgi9KMGwAvzt2XDFLhsltsxjHevXAeaqJQdiPE4BeJCcIbjYCJA60910zNdhVnyX38KqA1fvkyrtqclFU9jljopVrQrbVbWUr1E2HhlclCQRWx8FEGzWXdbWzamEGXFO5PHpjsIS4SoPDOBVrOHFo8xzE1tgCZyMtCfVQXKeHEaCm6v4bOQPdSecOojChL",
                                  customer_id="5dcc3900-eb68-42f5-8593-f6ae4d1a34e1",
                                  customer_name="RbGgSXO57u6cTOWbPpHzT8SBHVxA4uTsQXNQLVTsa7Enw9cnxOrtkyrYkFM2fsUIFcBc3xUhfvCQABU9yhdPlghv2VJu1lljCVVYSCGNIDxlSztThgX67n2PgbzVLVHAuqNRKSFbkQ",
                                  transaction_id="11b1dc20-7477-4b5b-ba45-5cf8642c05e9",
                                  private_money_id="4c8990b4-61e3-42d3-b02d-a87644255373",
                                  is_modified=False,
                                  transaction_types=["topup"],
                                  next_page_cursor_id="cbe27a6c-6995-4996-8759-7007989abf04",
                                  prev_page_cursor_id="1daa7de5-15ee-41a0-9076-4d39eaddc862",
                                  per_page=603,
                                  transfer_types=["topup", "transfer"],
                                  description="sQ10G0TlaGn12vl36ewyKaB6SHyKZZn5jR7G8GZiBnTaUgy7N3mTLemMZeIt74bhbcXSO6mPwoW10WefOcGtzUdCSHPXTvrjAoBOkNuRh5LysIScuFPNL3GzqnMP5NZDifqWbMDgjD68XvQQECUSjutOosOC5LZHJPKApv7OfARAe3RnFd9nT02p1eaStaJkR7kpHzH",
                                  start="2016-11-08T13:11:50.000000+09:00",
                                  to="2022-04-02T01:16:54.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_0(self):
        response = client.send(pp.CreateOrganization(
                                  "1LETy",
                                  "ZPKAQBgMPUGbEnOIPDq2CLAbjX1Djn2XWSwjThwDAcCZY6YtawxId266BZVwZVmHyD1UpI6d83jiZ9uTzP4YjXFZyT5vOgrOJYvJ3LNaiOIeknn7RYaYRsrRINAXrIL7Vokdd5FDSOlHXvPdm6smgX4oL5ObnN7xsSw29hgwVKZ3q7f2G5Csbw765Up6rDPAvgZ3Lft7QdtUV0xBtYCY2peqF3OIROYkI2OmNuQfBQja",
                                  ["0e3d9e11-0003-4ee2-8399-f215bd941cf5", "537efd5a-3cc1-4437-a016-4f49c457ec11", "b4acfe2e-625d-4bb2-abb7-fe505e1360d0", "0324324b-1a2e-4317-81d7-afbda5d2e56e", "d7832ebf-9c96-4f2b-a58e-e346f3c74013"],
                                  "0PAVPIqlw5@xHvb.com",
                                  "neEVFJO1vU@ShUN.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_1(self):
        response = client.send(pp.CreateOrganization(
                                  "1LETy",
                                  "ZPKAQBgMPUGbEnOIPDq2CLAbjX1Djn2XWSwjThwDAcCZY6YtawxId266BZVwZVmHyD1UpI6d83jiZ9uTzP4YjXFZyT5vOgrOJYvJ3LNaiOIeknn7RYaYRsrRINAXrIL7Vokdd5FDSOlHXvPdm6smgX4oL5ObnN7xsSw29hgwVKZ3q7f2G5Csbw765Up6rDPAvgZ3Lft7QdtUV0xBtYCY2peqF3OIROYkI2OmNuQfBQja",
                                  ["0e3d9e11-0003-4ee2-8399-f215bd941cf5", "537efd5a-3cc1-4437-a016-4f49c457ec11", "b4acfe2e-625d-4bb2-abb7-fe505e1360d0", "0324324b-1a2e-4317-81d7-afbda5d2e56e", "d7832ebf-9c96-4f2b-a58e-e346f3c74013"],
                                  "0PAVPIqlw5@xHvb.com",
                                  "neEVFJO1vU@ShUN.com",
                                  contact_name="iyLhmVZrKtrf8fOXhtgmBfxN2mKWhxAVox0bSxOCeaMv9sV8PCVe8gGULXYHHQVItPbBIgVhkWUs64kjPOvg7oS"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_2(self):
        response = client.send(pp.CreateOrganization(
                                  "1LETy",
                                  "ZPKAQBgMPUGbEnOIPDq2CLAbjX1Djn2XWSwjThwDAcCZY6YtawxId266BZVwZVmHyD1UpI6d83jiZ9uTzP4YjXFZyT5vOgrOJYvJ3LNaiOIeknn7RYaYRsrRINAXrIL7Vokdd5FDSOlHXvPdm6smgX4oL5ObnN7xsSw29hgwVKZ3q7f2G5Csbw765Up6rDPAvgZ3Lft7QdtUV0xBtYCY2peqF3OIROYkI2OmNuQfBQja",
                                  ["0e3d9e11-0003-4ee2-8399-f215bd941cf5", "537efd5a-3cc1-4437-a016-4f49c457ec11", "b4acfe2e-625d-4bb2-abb7-fe505e1360d0", "0324324b-1a2e-4317-81d7-afbda5d2e56e", "d7832ebf-9c96-4f2b-a58e-e346f3c74013"],
                                  "0PAVPIqlw5@xHvb.com",
                                  "neEVFJO1vU@ShUN.com",
                                  bank_account_holder_name="7",
                                  contact_name="fBaWrA04virOZrFH9lNvZWQOhHbcPsVzudSsho4D4Vucvtqjo5TxhMxHQM1DHEyhnbl8ZtFdCq3PjvYo6pCNI1mfIpJ9f4NksvlPiC4Vu3XtdH9FsNEZ86HjJPe4Lp6lJfyvAGgrUXXkhfXnecR"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_3(self):
        response = client.send(pp.CreateOrganization(
                                  "1LETy",
                                  "ZPKAQBgMPUGbEnOIPDq2CLAbjX1Djn2XWSwjThwDAcCZY6YtawxId266BZVwZVmHyD1UpI6d83jiZ9uTzP4YjXFZyT5vOgrOJYvJ3LNaiOIeknn7RYaYRsrRINAXrIL7Vokdd5FDSOlHXvPdm6smgX4oL5ObnN7xsSw29hgwVKZ3q7f2G5Csbw765Up6rDPAvgZ3Lft7QdtUV0xBtYCY2peqF3OIROYkI2OmNuQfBQja",
                                  ["0e3d9e11-0003-4ee2-8399-f215bd941cf5", "537efd5a-3cc1-4437-a016-4f49c457ec11", "b4acfe2e-625d-4bb2-abb7-fe505e1360d0", "0324324b-1a2e-4317-81d7-afbda5d2e56e", "d7832ebf-9c96-4f2b-a58e-e346f3c74013"],
                                  "0PAVPIqlw5@xHvb.com",
                                  "neEVFJO1vU@ShUN.com",
                                  bank_account="369991",
                                  bank_account_holder_name=" ",
                                  contact_name="xGnpm1kxDBXzRf1f9JiZjCJBrJjt5kCWz5zMWjynyv6K"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_4(self):
        response = client.send(pp.CreateOrganization(
                                  "1LETy",
                                  "ZPKAQBgMPUGbEnOIPDq2CLAbjX1Djn2XWSwjThwDAcCZY6YtawxId266BZVwZVmHyD1UpI6d83jiZ9uTzP4YjXFZyT5vOgrOJYvJ3LNaiOIeknn7RYaYRsrRINAXrIL7Vokdd5FDSOlHXvPdm6smgX4oL5ObnN7xsSw29hgwVKZ3q7f2G5Csbw765Up6rDPAvgZ3Lft7QdtUV0xBtYCY2peqF3OIROYkI2OmNuQfBQja",
                                  ["0e3d9e11-0003-4ee2-8399-f215bd941cf5", "537efd5a-3cc1-4437-a016-4f49c457ec11", "b4acfe2e-625d-4bb2-abb7-fe505e1360d0", "0324324b-1a2e-4317-81d7-afbda5d2e56e", "d7832ebf-9c96-4f2b-a58e-e346f3c74013"],
                                  "0PAVPIqlw5@xHvb.com",
                                  "neEVFJO1vU@ShUN.com",
                                  bank_account_type="current",
                                  bank_account="",
                                  bank_account_holder_name="ｸ",
                                  contact_name="ACMY5nowhDUZD5IZKMp0STmYDwTtHP0EcP6hogkn6nAjgTjLkVtsanieCAlqrCK8PwmGod9YcEsgY2DC2Vj8cKXwgERagqK"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_5(self):
        response = client.send(pp.CreateOrganization(
                                  "1LETy",
                                  "ZPKAQBgMPUGbEnOIPDq2CLAbjX1Djn2XWSwjThwDAcCZY6YtawxId266BZVwZVmHyD1UpI6d83jiZ9uTzP4YjXFZyT5vOgrOJYvJ3LNaiOIeknn7RYaYRsrRINAXrIL7Vokdd5FDSOlHXvPdm6smgX4oL5ObnN7xsSw29hgwVKZ3q7f2G5Csbw765Up6rDPAvgZ3Lft7QdtUV0xBtYCY2peqF3OIROYkI2OmNuQfBQja",
                                  ["0e3d9e11-0003-4ee2-8399-f215bd941cf5", "537efd5a-3cc1-4437-a016-4f49c457ec11", "b4acfe2e-625d-4bb2-abb7-fe505e1360d0", "0324324b-1a2e-4317-81d7-afbda5d2e56e", "d7832ebf-9c96-4f2b-a58e-e346f3c74013"],
                                  "0PAVPIqlw5@xHvb.com",
                                  "neEVFJO1vU@ShUN.com",
                                  bank_branch_code="735",
                                  bank_account_type="other",
                                  bank_account="98",
                                  bank_account_holder_name="(",
                                  contact_name="nCdyvxKvSOqTvlYodFyg21jiUhByaB66BNcapTyLZWxad9qMqfjUCaVImVTzD7ogGgbbuuhXvkkv63jx716j9qYeQTBsHYxIvY8A2kLLFzDvGgwT6RWA89QL9Vp03GIkTp5cuONNVFc9v9gdz5hWfe1"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_6(self):
        response = client.send(pp.CreateOrganization(
                                  "1LETy",
                                  "ZPKAQBgMPUGbEnOIPDq2CLAbjX1Djn2XWSwjThwDAcCZY6YtawxId266BZVwZVmHyD1UpI6d83jiZ9uTzP4YjXFZyT5vOgrOJYvJ3LNaiOIeknn7RYaYRsrRINAXrIL7Vokdd5FDSOlHXvPdm6smgX4oL5ObnN7xsSw29hgwVKZ3q7f2G5Csbw765Up6rDPAvgZ3Lft7QdtUV0xBtYCY2peqF3OIROYkI2OmNuQfBQja",
                                  ["0e3d9e11-0003-4ee2-8399-f215bd941cf5", "537efd5a-3cc1-4437-a016-4f49c457ec11", "b4acfe2e-625d-4bb2-abb7-fe505e1360d0", "0324324b-1a2e-4317-81d7-afbda5d2e56e", "d7832ebf-9c96-4f2b-a58e-e346f3c74013"],
                                  "0PAVPIqlw5@xHvb.com",
                                  "neEVFJO1vU@ShUN.com",
                                  bank_branch_name="2XdVSiGrZna",
                                  bank_branch_code="",
                                  bank_account_type="other",
                                  bank_account="047167",
                                  bank_account_holder_name="Z",
                                  contact_name="vsUjS1TQRpGXwusKVKoDVo20K4pvhym0ixofoZrqcO9xmrGI7Yq8b7zKf4Zjq1K3jlOjYQfsbEScihoRIGPs251h35D6RqOUv7GYFIehbCx0by4HajPsFnZyPkDxfEbj7EZcJNWpppH7JtG7uLWNnv9bkjUCUVfq92VQxP0FMeHm2Gc8mWOktzQrw5GjJ8uGQSasHDUHsEK1qalH"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_7(self):
        response = client.send(pp.CreateOrganization(
                                  "1LETy",
                                  "ZPKAQBgMPUGbEnOIPDq2CLAbjX1Djn2XWSwjThwDAcCZY6YtawxId266BZVwZVmHyD1UpI6d83jiZ9uTzP4YjXFZyT5vOgrOJYvJ3LNaiOIeknn7RYaYRsrRINAXrIL7Vokdd5FDSOlHXvPdm6smgX4oL5ObnN7xsSw29hgwVKZ3q7f2G5Csbw765Up6rDPAvgZ3Lft7QdtUV0xBtYCY2peqF3OIROYkI2OmNuQfBQja",
                                  ["0e3d9e11-0003-4ee2-8399-f215bd941cf5", "537efd5a-3cc1-4437-a016-4f49c457ec11", "b4acfe2e-625d-4bb2-abb7-fe505e1360d0", "0324324b-1a2e-4317-81d7-afbda5d2e56e", "d7832ebf-9c96-4f2b-a58e-e346f3c74013"],
                                  "0PAVPIqlw5@xHvb.com",
                                  "neEVFJO1vU@ShUN.com",
                                  bank_code="",
                                  bank_branch_name="wNsBFFvhBAfKd9pYjNXINvRo8XrSFeFKEUniweS0acjh4qrH7klovo9x1qmkFFjd",
                                  bank_branch_code="189",
                                  bank_account_type="other",
                                  bank_account="",
                                  bank_account_holder_name="V",
                                  contact_name="dCsP"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_8(self):
        response = client.send(pp.CreateOrganization(
                                  "1LETy",
                                  "ZPKAQBgMPUGbEnOIPDq2CLAbjX1Djn2XWSwjThwDAcCZY6YtawxId266BZVwZVmHyD1UpI6d83jiZ9uTzP4YjXFZyT5vOgrOJYvJ3LNaiOIeknn7RYaYRsrRINAXrIL7Vokdd5FDSOlHXvPdm6smgX4oL5ObnN7xsSw29hgwVKZ3q7f2G5Csbw765Up6rDPAvgZ3Lft7QdtUV0xBtYCY2peqF3OIROYkI2OmNuQfBQja",
                                  ["0e3d9e11-0003-4ee2-8399-f215bd941cf5", "537efd5a-3cc1-4437-a016-4f49c457ec11", "b4acfe2e-625d-4bb2-abb7-fe505e1360d0", "0324324b-1a2e-4317-81d7-afbda5d2e56e", "d7832ebf-9c96-4f2b-a58e-e346f3c74013"],
                                  "0PAVPIqlw5@xHvb.com",
                                  "neEVFJO1vU@ShUN.com",
                                  bank_name="1zaX0YEC",
                                  bank_code="0533",
                                  bank_branch_name="S9uGcWpU50I9EOF1CbY7DQ",
                                  bank_branch_code="670",
                                  bank_account_type="other",
                                  bank_account="9439628",
                                  bank_account_holder_name=" ",
                                  contact_name="6OljXWNCah5Q3Axy3FHS7HHlL9hetKrZtdVOY5mSWLpoOzWuTFDp0xZJMmmZyM3omHaaYolohp4jua"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_0(self):
        response = client.send(pp.ListShops(
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_1(self):
        response = client.send(pp.ListShops(
                                  per_page=2911
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_2(self):
        response = client.send(pp.ListShops(
                                  page=3096,
                                  per_page=7801
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_3(self):
        response = client.send(pp.ListShops(
                                  external_id="Rzzc4S4bskUY0GUghtLrKdmw4Mj2vrs21Q3Q",
                                  page=7668,
                                  per_page=1177
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_4(self):
        response = client.send(pp.ListShops(
                                  email="cjDt5dNl9I@acbc.com",
                                  external_id="U5Qd92Qhefxi61LsaPXprVMDsZV4dkyP5lnQ",
                                  page=5477,
                                  per_page=6460
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_5(self):
        response = client.send(pp.ListShops(
                                  tel="0777572-2256",
                                  email="sLa4vnCWV1@QVss.com",
                                  external_id="1Im12",
                                  page=7841,
                                  per_page=4055
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_6(self):
        response = client.send(pp.ListShops(
                                  address="LZ8F0u3SxrrH1vjl84VkWU20DVNhF1QRXrkYNIOtHHG8yHnSu7dDAUDz3Ba7wXTCzgYCbLTAWi1ohaetMA7WNeaonbTVSEX134CEzJmLXodVipQoaS9jpxZmBe1IVqn6l0xvjbPmp4eCBlLWO5LUEEnWeZcSGLtIalNYra2M0CM",
                                  tel="06-1527855",
                                  email="MWb2crhAOj@Ag46.com",
                                  external_id="xwepf8NCoyrEsYCM3co0m5f7",
                                  page=4443,
                                  per_page=5863
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_7(self):
        response = client.send(pp.ListShops(
                                  postal_code="0788400",
                                  address="Yp6krkF1YbRmwvxymb30gk854pQwTzmFQFV2uDFFIi8EFMWMycoOxYLCK5275yaFTfZztXuQw4RaWFmQq3HxE1cttSeGuAJyXtCyfPpoPjMTr8crob004vlXwUsthEoZOk8UXfYg8fdpzyB6W0dkeo5uEqZaCFDcbEj9ISDmaB2afkehiCZS1KVArQK",
                                  tel="097-214-9647",
                                  email="ArWQhOtANq@AqTE.com",
                                  external_id="SOlpuGW5FhrbDgJ77XFXl4NKb3zycQebat",
                                  page=2091,
                                  per_page=4535
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_8(self):
        response = client.send(pp.ListShops(
                                  name="OYZVBO6i7OrH9y83QqXgWF2opiVdC1V5KC13EYjcxvJwZkwVKG4nhx51AwtpZIv6uv80k2eZHBR50sHyhGa26QKgCzW91ijqwGz4iwxLvGQu8AItYv5ALjIimTwKA5k60bA481CWCvSZBvCgqCd3bRt5kX2boQl",
                                  postal_code="996-3686",
                                  address="mm92pmKFDO4dzrTnN2hnl6jClpe10uHCcbxZraKIE5JV72jwXeLc5ziCQvgnEPrwn8MGASAuLD3WLJqm2LErGcclueraXSCDvzDuhvkKIoa3xl900hkmeYLn1AjsWrIn7wWX9",
                                  tel="027201-922",
                                  email="9BG44UnK5k@ugEb.com",
                                  external_id="8t3i1",
                                  page=5670,
                                  per_page=4615
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_9(self):
        response = client.send(pp.ListShops(
                                  private_money_id="8b384a7f-3cae-4ad5-87bb-8e84edd7dbee",
                                  name="40madwkN30KxIK4R69fUEBg5VG6fY3BMw3LzyuQr74JtjTjvnySfqw4U7H9TvwAB8eScBfn1Rj6bF7qwsumEcO5tiAsHMCj6rQ8z",
                                  postal_code="0316822",
                                  address="Ct8CHPFNDEoS5JXEhny5IMhsG4v0CQldqzxJ6XAxr",
                                  tel="07-8989809",
                                  email="ZkaSGkcJKe@radq.com",
                                  external_id="xAY",
                                  page=161,
                                  per_page=9451
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_10(self):
        response = client.send(pp.ListShops(
                                  organization_code="--",
                                  private_money_id="7bbcd51c-855b-4c63-8a1e-1c47ebc0d2b8",
                                  name="6z8KVqUt2uzqsseXYFYKRp",
                                  postal_code="5750498",
                                  address="7EPOVCpM4N6VpPYojnLWN99oUAp27dRdHXT0bu9kBbfQDVxrOePjXnEEoR26VQKj59HY9GxwaIDAEfbXDBB3FNIL8Usakbi9ZrjBPmCyriSuUZrqYwq",
                                  tel="06-6680881",
                                  email="Q2iQavwvhD@r8TN.com",
                                  external_id="B4vIcRTpSaCV5",
                                  page=2541,
                                  per_page=8445
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_0(self):
        response = client.send(pp.CreateShop(
                                  "txsN8hQh23jWL68GyttBaIaA6bT2oimSP8aDw1fwYQo1a8Jvio1NlXmWokT3fCZ0aqdulZZGglvs1mmHvcGJdXuMvjofsG8E4KIFxs3y0EBuTM1S0iPJraQIMtAPJ1JN9CtWW30Uo4UAg9arJ4XCMrwN15cIxDvF6fUC0OQCualYkGbJ73b3nYCrV9uDJehyXJGfZSkx4G3NTiGEBvJP8jVkcC8"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_1(self):
        response = client.send(pp.CreateShop(
                                  "txsN8hQh23jWL68GyttBaIaA6bT2oimSP8aDw1fwYQo1a8Jvio1NlXmWokT3fCZ0aqdulZZGglvs1mmHvcGJdXuMvjofsG8E4KIFxs3y0EBuTM1S0iPJraQIMtAPJ1JN9CtWW30Uo4UAg9arJ4XCMrwN15cIxDvF6fUC0OQCualYkGbJ73b3nYCrV9uDJehyXJGfZSkx4G3NTiGEBvJP8jVkcC8",
                                  organization_code="p-56-v-V-d2v6TRcOGYOZVY-7-f7FI"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_2(self):
        response = client.send(pp.CreateShop(
                                  "txsN8hQh23jWL68GyttBaIaA6bT2oimSP8aDw1fwYQo1a8Jvio1NlXmWokT3fCZ0aqdulZZGglvs1mmHvcGJdXuMvjofsG8E4KIFxs3y0EBuTM1S0iPJraQIMtAPJ1JN9CtWW30Uo4UAg9arJ4XCMrwN15cIxDvF6fUC0OQCualYkGbJ73b3nYCrV9uDJehyXJGfZSkx4G3NTiGEBvJP8jVkcC8",
                                  shop_external_id="9utYjWSxV0PYaS2m3w11YOc",
                                  organization_code="8-U59-5--"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_3(self):
        response = client.send(pp.CreateShop(
                                  "txsN8hQh23jWL68GyttBaIaA6bT2oimSP8aDw1fwYQo1a8Jvio1NlXmWokT3fCZ0aqdulZZGglvs1mmHvcGJdXuMvjofsG8E4KIFxs3y0EBuTM1S0iPJraQIMtAPJ1JN9CtWW30Uo4UAg9arJ4XCMrwN15cIxDvF6fUC0OQCualYkGbJ73b3nYCrV9uDJehyXJGfZSkx4G3NTiGEBvJP8jVkcC8",
                                  shop_email="7yg59bUqlz@l8RT.com",
                                  shop_external_id="pDWU8ApGd",
                                  organization_code="jha-bSdj"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_4(self):
        response = client.send(pp.CreateShop(
                                  "txsN8hQh23jWL68GyttBaIaA6bT2oimSP8aDw1fwYQo1a8Jvio1NlXmWokT3fCZ0aqdulZZGglvs1mmHvcGJdXuMvjofsG8E4KIFxs3y0EBuTM1S0iPJraQIMtAPJ1JN9CtWW30Uo4UAg9arJ4XCMrwN15cIxDvF6fUC0OQCualYkGbJ73b3nYCrV9uDJehyXJGfZSkx4G3NTiGEBvJP8jVkcC8",
                                  shop_tel="0678722650",
                                  shop_email="dJBaCIrObU@Z5ZC.com",
                                  shop_external_id="2jyrMS4IVkYp7d5uCmZcCGs",
                                  organization_code="-N1ln-E48-Fv5-"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_5(self):
        response = client.send(pp.CreateShop(
                                  "txsN8hQh23jWL68GyttBaIaA6bT2oimSP8aDw1fwYQo1a8Jvio1NlXmWokT3fCZ0aqdulZZGglvs1mmHvcGJdXuMvjofsG8E4KIFxs3y0EBuTM1S0iPJraQIMtAPJ1JN9CtWW30Uo4UAg9arJ4XCMrwN15cIxDvF6fUC0OQCualYkGbJ73b3nYCrV9uDJehyXJGfZSkx4G3NTiGEBvJP8jVkcC8",
                                  shop_address="JzkH6S98QQghHEuISiLlQ9W3XgJB2NaMYnzVdH4lBEl49jCEcrfCIMQObL3OoO8rAUeIJB",
                                  shop_tel="0452533964",
                                  shop_email="aXhLa6DeYg@ow42.com",
                                  shop_external_id="LUfdk8XuchSqSb",
                                  organization_code="h-02Ut-0-37k-tAm-76w"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_6(self):
        response = client.send(pp.CreateShop(
                                  "txsN8hQh23jWL68GyttBaIaA6bT2oimSP8aDw1fwYQo1a8Jvio1NlXmWokT3fCZ0aqdulZZGglvs1mmHvcGJdXuMvjofsG8E4KIFxs3y0EBuTM1S0iPJraQIMtAPJ1JN9CtWW30Uo4UAg9arJ4XCMrwN15cIxDvF6fUC0OQCualYkGbJ73b3nYCrV9uDJehyXJGfZSkx4G3NTiGEBvJP8jVkcC8",
                                  shop_postal_code="110-4245",
                                  shop_address="ItB6ycarokvOGbxOtjjILQMz1SYbigi3uqGy9JaET7yaI77xfyzjZfk3Eg446tN2eZ",
                                  shop_tel="068248-6277",
                                  shop_email="9qEb2szCXB@kkHR.com",
                                  shop_external_id="CtXprtOEGF7FA7qtYAU5",
                                  organization_code="5-ZJ-DoDe0f-I--q-9-5----"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_0(self):
        response = client.send(pp.CreateShopV2(
                                  "96ZecqU3VE5SiDh8XYp2Sb6qswUL8UZ6V9wGI85BEYoVTObCbAWlB9ZTLlBVIhK6pPNqnVaACzTnU4fw9nHGh382d4IcuvP4sfykROqGA2kGIKWn7WmxLFKf1vULaBahAeJdLNgTdHrnXru0CK861yZBwzeoylnePV0HOJ5Mg4Lqjra9od5pOMZG0Q1epC2P9o6ZPNLGB22OwLCnaLili3chmVxHdB9QfCur"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_1(self):
        response = client.send(pp.CreateShopV2(
                                  "96ZecqU3VE5SiDh8XYp2Sb6qswUL8UZ6V9wGI85BEYoVTObCbAWlB9ZTLlBVIhK6pPNqnVaACzTnU4fw9nHGh382d4IcuvP4sfykROqGA2kGIKWn7WmxLFKf1vULaBahAeJdLNgTdHrnXru0CK861yZBwzeoylnePV0HOJ5Mg4Lqjra9od5pOMZG0Q1epC2P9o6ZPNLGB22OwLCnaLili3chmVxHdB9QfCur",
                                  can_topup_private_money_ids=["d9181998-ebae-4faf-bede-cc6d2b261e3c", "f29dafab-c59e-4793-8f29-7885f6049c8c", "f18d03dc-c3be-4949-8f9f-1f7069364ee9", "fdb50494-1824-4454-a9ce-029b1127a14a"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_2(self):
        response = client.send(pp.CreateShopV2(
                                  "96ZecqU3VE5SiDh8XYp2Sb6qswUL8UZ6V9wGI85BEYoVTObCbAWlB9ZTLlBVIhK6pPNqnVaACzTnU4fw9nHGh382d4IcuvP4sfykROqGA2kGIKWn7WmxLFKf1vULaBahAeJdLNgTdHrnXru0CK861yZBwzeoylnePV0HOJ5Mg4Lqjra9od5pOMZG0Q1epC2P9o6ZPNLGB22OwLCnaLili3chmVxHdB9QfCur",
                                  private_money_ids=["e2c2cc3f-96e8-4b24-9346-e2a13c4d9bca", "a726dd0b-3dda-460f-846f-8d1e6239b2b3", "3ed88a6f-1627-42ab-8ba3-e071cdbdb109", "af4722a6-4edb-4839-bfea-7353e0c7b499", "62cefa55-27eb-47e3-b9a8-ad1ec173f91c"],
                                  can_topup_private_money_ids=[]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_3(self):
        response = client.send(pp.CreateShopV2(
                                  "96ZecqU3VE5SiDh8XYp2Sb6qswUL8UZ6V9wGI85BEYoVTObCbAWlB9ZTLlBVIhK6pPNqnVaACzTnU4fw9nHGh382d4IcuvP4sfykROqGA2kGIKWn7WmxLFKf1vULaBahAeJdLNgTdHrnXru0CK861yZBwzeoylnePV0HOJ5Mg4Lqjra9od5pOMZG0Q1epC2P9o6ZPNLGB22OwLCnaLili3chmVxHdB9QfCur",
                                  organization_code="1ey-5m0KE-1-d-q3PGhF-z",
                                  private_money_ids=["8277ee0d-fe69-4d34-a8da-2f6ad0800228", "1b95993b-a0b4-4c78-a47c-d6d02c3f61d4", "8eaec5c6-8c54-46c1-800e-e9dc19f8c530", "b45fb6b2-26ad-4955-8a04-42dfed760914", "0f63f45a-d70d-464b-a597-9ffbcc796422", "558a79be-af16-40be-bb63-5097d29e14c5", "051c7826-63ce-4f5f-a779-efcbb9e44021", "f55b21f0-a2b2-4a0f-896f-57a1c125a037", "e2000954-417d-4cda-820b-81f1f1e31385"],
                                  can_topup_private_money_ids=["999c44db-d5c9-47f1-ac83-cd23252cfa4c", "1c2b1385-9722-4ab4-9ef2-ebf0f1b9de0a", "ca793fb2-98c0-4445-8672-350ac2806481"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_4(self):
        response = client.send(pp.CreateShopV2(
                                  "96ZecqU3VE5SiDh8XYp2Sb6qswUL8UZ6V9wGI85BEYoVTObCbAWlB9ZTLlBVIhK6pPNqnVaACzTnU4fw9nHGh382d4IcuvP4sfykROqGA2kGIKWn7WmxLFKf1vULaBahAeJdLNgTdHrnXru0CK861yZBwzeoylnePV0HOJ5Mg4Lqjra9od5pOMZG0Q1epC2P9o6ZPNLGB22OwLCnaLili3chmVxHdB9QfCur",
                                  external_id="fcK15L",
                                  organization_code="98B----0C-Du-Z-M-d1-",
                                  private_money_ids=["14fd052f-115f-4ff8-a030-a9c546e531e7", "1f8fb2db-5332-4edb-b4d9-2f9e58e3486c"],
                                  can_topup_private_money_ids=["9c1df855-e422-4216-ab71-1b5db6b87f6d", "0371b2d1-56a5-48dc-899b-66762535e236"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_5(self):
        response = client.send(pp.CreateShopV2(
                                  "96ZecqU3VE5SiDh8XYp2Sb6qswUL8UZ6V9wGI85BEYoVTObCbAWlB9ZTLlBVIhK6pPNqnVaACzTnU4fw9nHGh382d4IcuvP4sfykROqGA2kGIKWn7WmxLFKf1vULaBahAeJdLNgTdHrnXru0CK861yZBwzeoylnePV0HOJ5Mg4Lqjra9od5pOMZG0Q1epC2P9o6ZPNLGB22OwLCnaLili3chmVxHdB9QfCur",
                                  email="0CMZa5pywm@hrY8.com",
                                  external_id="J0",
                                  organization_code="ROSVf--f8V6uh-----oo-71v",
                                  private_money_ids=["fe5b20cc-76e9-484f-97c2-384e59392876", "71108082-bf08-40e6-a1ae-9a50fa366e55", "ab10c4b2-12b0-4dea-900c-cebca34d70f1", "522c8fad-0a48-4e95-83a2-4cf1b2f3f744"],
                                  can_topup_private_money_ids=["e6256666-61ae-4875-ad14-e4bc61f54e8d", "efbceaa0-1aaf-49ea-8223-18c871aa2ff2", "18f2fab0-7321-48fd-b3aa-d90e59d7615c", "8d88f7b8-fb37-46ef-ac2d-84eabaa6e4a2", "eedab2a4-0382-4e40-bb56-a89e72091eea", "f1f39151-21ec-456c-af1a-024a6f4bcb8d", "71132c8d-1181-46a1-8204-4a0cb5dea6a9"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_6(self):
        response = client.send(pp.CreateShopV2(
                                  "96ZecqU3VE5SiDh8XYp2Sb6qswUL8UZ6V9wGI85BEYoVTObCbAWlB9ZTLlBVIhK6pPNqnVaACzTnU4fw9nHGh382d4IcuvP4sfykROqGA2kGIKWn7WmxLFKf1vULaBahAeJdLNgTdHrnXru0CK861yZBwzeoylnePV0HOJ5Mg4Lqjra9od5pOMZG0Q1epC2P9o6ZPNLGB22OwLCnaLili3chmVxHdB9QfCur",
                                  tel="09680-125",
                                  email="vj6KZvk9I1@4B0w.com",
                                  external_id="Jjv5PZV8BzD6xxeVZJr6fOg9zsFZTTh",
                                  organization_code="E65g-oq3",
                                  private_money_ids=["c564b6d2-53f0-4867-beb8-e0ab87b2eaef", "c8e5153e-fab6-4ffe-b7b5-9e2d37f59c0b"],
                                  can_topup_private_money_ids=["08f6d8b5-5355-45d0-a58d-9efa1bab4e17", "b3ea9de3-e7e7-4e9b-9a2e-478504bdea45", "ce015e0b-c7c4-4d05-ba34-b1d0adcaf985", "c021618a-1369-4885-a8d5-e1f47442cbce", "6c47bfee-3770-40dc-b798-492583952f96", "e06dc6fe-52a1-4334-bc57-21e9716a335c", "f11d8fe9-f84f-4777-bce4-ab03a4cf6e38", "56d54687-b105-4e99-8510-ca6965405e7b", "03cf5603-cdf9-4c8a-84ac-f0aac35748d9"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_7(self):
        response = client.send(pp.CreateShopV2(
                                  "96ZecqU3VE5SiDh8XYp2Sb6qswUL8UZ6V9wGI85BEYoVTObCbAWlB9ZTLlBVIhK6pPNqnVaACzTnU4fw9nHGh382d4IcuvP4sfykROqGA2kGIKWn7WmxLFKf1vULaBahAeJdLNgTdHrnXru0CK861yZBwzeoylnePV0HOJ5Mg4Lqjra9od5pOMZG0Q1epC2P9o6ZPNLGB22OwLCnaLili3chmVxHdB9QfCur",
                                  address="Z0zhmmU4qjfXM0iaeCNkqwEBU16Jq12CxO1vOYhEe55St2TiyraOemZRjiAchwL6b1jB1Cg1nBSU78Sxgo6Taagdxx1mLakIn0CpIISvuAWSZZfn8krGsRTJuHW0p1Ch4TRpHb3xaMjpGa8gaJHdl18J3d41BsVgtiwJjEQgl2khqccOMjuNbV7",
                                  tel="0665-73085245",
                                  email="DuKxo1Vi0y@j9LZ.com",
                                  external_id="0SyJWAaPdTI8GQRoTVVL",
                                  organization_code="-Hl--Y-x-",
                                  private_money_ids=["ca99cead-e794-432f-b255-a62ce1fe2366", "0b3a459a-26a2-40b2-8bf4-1212cb0f6a9c", "8af2e78b-4ebb-4d11-8446-d160c5889968", "b321057e-8c82-4024-8f2f-b5ca7e722aaa", "c9c559b8-d20e-4048-87b7-84b9ab694894", "7e3f9b2d-e4ad-4c2c-b616-0c50a099e310", "cdb77066-cda2-4a8d-93c0-bfb69d4cebb1"],
                                  can_topup_private_money_ids=["1345d4dc-8f38-420b-9277-7ecfcc5a4bd9", "60c7287d-bf62-4804-8267-673cb8d2c8ea", "1294f47c-da68-4b22-aa6e-df2b01a70e5e", "689fb969-0f20-4fac-a500-1c789c78f5ca"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_8(self):
        response = client.send(pp.CreateShopV2(
                                  "96ZecqU3VE5SiDh8XYp2Sb6qswUL8UZ6V9wGI85BEYoVTObCbAWlB9ZTLlBVIhK6pPNqnVaACzTnU4fw9nHGh382d4IcuvP4sfykROqGA2kGIKWn7WmxLFKf1vULaBahAeJdLNgTdHrnXru0CK861yZBwzeoylnePV0HOJ5Mg4Lqjra9od5pOMZG0Q1epC2P9o6ZPNLGB22OwLCnaLili3chmVxHdB9QfCur",
                                  postal_code="202-8400",
                                  address="HCrQ2sJdGjdCNpP7vZgP6rij5EfD6DtnR73iSkAgC1lY6yupHUdfLL0DHjlwSaRnmrgoUZ8HPuG9MGiaGFzsfWWWy9Im8Ux",
                                  tel="00-2655-826",
                                  email="LEYZVZOefO@3wRM.com",
                                  external_id="sdsI7UYvxBYHMaYiviU38jq",
                                  organization_code="g-1K-mz-89-lch-1mHfb-Z-rLn8T6--4",
                                  private_money_ids=["3109ea51-7edc-41cf-93ee-80c223f044af", "8bb000a1-1fce-451c-bb5f-46a60ebcbe78", "4e2a2e2a-b08b-4964-9003-679f22c4b63b", "ecb51cf5-cfaa-4f7e-b29c-224fc442c477"],
                                  can_topup_private_money_ids=["17bc1437-dc67-44af-abea-2251c0436433", "5e8b6677-d5af-44f0-9c20-1fe5e481cf66", "d9e228ab-8ab7-46ab-84b2-559e6d54142f", "d07c4d8c-619c-4149-a921-6b6c1964d134", "c49decc5-6835-4fa5-9a88-42d7bb77c4f3", "e137b692-0e22-4b53-a565-e1e3a7a276f0", "87d74d99-cfdc-4f49-9b8e-ac71f881c3f2"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_shop_0(self):
        response = client.send(pp.GetShop(
                                  "c7d33c82-4db4-47b3-b0de-f09941ac0ce3"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_0(self):
        response = client.send(pp.UpdateShop(
                                  "1bbb746a-5c11-4c71-b1cc-895e07238985"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_1(self):
        response = client.send(pp.UpdateShop(
                                  "1bbb746a-5c11-4c71-b1cc-895e07238985",
                                  can_topup_private_money_ids=["0210d22c-8577-4f5f-a463-7a9a9ea7a5bb", "f7b84893-35d6-4f4d-9562-a925a2d4a6a8", "9f953b8d-48b7-45ba-989e-251388c19545", "20efc542-437a-4147-8e75-d78f0213da79", "171bb0ba-8ace-4877-8fac-26330e578c1c", "1b0a608d-2b31-4b2e-9423-46684c33d14b", "834674d8-da82-48a3-a1c9-903a91ebc3a7", "ae0cc4f9-182e-49a0-a27f-8d880c2fc994"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_2(self):
        response = client.send(pp.UpdateShop(
                                  "1bbb746a-5c11-4c71-b1cc-895e07238985",
                                  private_money_ids=["3ac1c52a-2056-4597-96e8-bca3475b9fe6"],
                                  can_topup_private_money_ids=[]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_3(self):
        response = client.send(pp.UpdateShop(
                                  "1bbb746a-5c11-4c71-b1cc-895e07238985",
                                  external_id="d3BmnZxBBpR9nxMbDW2W",
                                  private_money_ids=["466c0391-85b9-49a5-aefe-bec9f17a6c41", "0a9003f5-717b-4776-8ab0-cab717da3083", "2754c912-b7d4-4f39-bd23-9c3c35fcc64b", "ff2e4aa7-26c8-45d4-aafd-2aa6e7071d92", "6f6ac7bd-3718-4516-875e-594b58e1659a", "dfc48ed8-a598-4a99-8911-5d39d2a6535d"],
                                  can_topup_private_money_ids=["0ae9bcaf-542b-4fe3-972e-0022ffbf553c", "5dc42ffd-1427-4fb3-a230-756efae02d3b", "06011fd6-5a9a-4948-a426-0f644c452a6f"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_4(self):
        response = client.send(pp.UpdateShop(
                                  "1bbb746a-5c11-4c71-b1cc-895e07238985",
                                  email="9MOLvGZ61a@dHIt.com",
                                  external_id="OUDj8FvTz5QBGaQdIsgWXQM5x",
                                  private_money_ids=["b60e9931-c279-46d8-8a2f-7a555a11aee8", "82ef2870-1e5d-4302-9032-33141bca9d9c", "8094fda9-ce97-45e3-9e94-a0ea8f480585"],
                                  can_topup_private_money_ids=["01499ad4-92fc-4fe9-9aa0-6e556514c0ee", "5d5f9d35-24bf-47f2-bbbe-14fa7145d111", "24eade2d-041e-4031-b0d6-e8168d5d65dd", "7887d188-342f-44f1-8b42-360ef580a4e7", "f9da63d9-850b-4c81-a0e6-5bfee560b9e5", "b8b9e23c-a6a4-4050-9e7a-0f5e3af75cbb", "9a752369-02f9-46a0-a0aa-4507823ca2f6"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_5(self):
        response = client.send(pp.UpdateShop(
                                  "1bbb746a-5c11-4c71-b1cc-895e07238985",
                                  tel="08-457-6396",
                                  email="3wthBO4Fjl@bNSG.com",
                                  external_id="xbjuEMAeQ",
                                  private_money_ids=["0ba4caef-c75e-4ce0-ab83-df8ba07d8aae", "59827ee1-2a04-4e20-9c55-a73abe13db4f"],
                                  can_topup_private_money_ids=["b844396b-5a2c-4145-8a26-9f80a48d61de", "cf3de598-6aa7-4c4d-afed-2847dd56a9c5"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_6(self):
        response = client.send(pp.UpdateShop(
                                  "1bbb746a-5c11-4c71-b1cc-895e07238985",
                                  address="3qtgKMvjDsKXEFhYl0BRpqUDYmqwBJzhV6dtnsmaJHCLyhHLjUCzekHgQwDCfsWS6JXTLuG14K9HQGpPICoaRhYRcaR59QCffGIaaiPRXQUB9KSDwnfHx9gXjCberbb7S8DARwQI05I6eJLYrFtVTc8XF6Iz7He5QYfhFsP0lBKY5Zym6qbNd5Gezpxyuuv2alBrKW",
                                  tel="04008708731",
                                  email="VHCWblj8QD@bDxz.com",
                                  external_id="olTpcO7N2cnroE2",
                                  private_money_ids=["e6126752-7bf0-44eb-8949-ff9894dfbbc9", "6c39f20a-07a3-4f76-9dad-ed9263274fe8", "93deb7b8-1aa3-4da4-a045-bfbf3386b98a", "53eb93f2-c521-496a-9d63-646c44ad88b3", "cfad8563-86fa-4b31-ae4e-aa5ed8a0f1ca", "4408da8d-2516-4663-885f-b65ee7f8ecf7", "8d41ae0b-acc8-466c-8e2c-5cd8ee9e689d", "9edc0770-2513-4f8d-97ea-dcc5a7b08728", "18083187-4ed5-4386-9178-340da1006446", "27998550-7798-431a-b95a-b49f34912262"],
                                  can_topup_private_money_ids=["6d3278ce-e389-438a-b8fe-281a643b057d", "6d86dd52-0219-466e-9637-23bd5304ae88", "b262c417-fa9c-4d26-a451-dd938291a11c"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_7(self):
        response = client.send(pp.UpdateShop(
                                  "1bbb746a-5c11-4c71-b1cc-895e07238985",
                                  postal_code="991-6759",
                                  address="2KNkDfzWRiioT9QYFPklAn30gj1CmaOUBeCZvfeO7Sgh2QcnuYHCBxXNgm1qjvh6lwQ5YfQRfoj2wOYmg9391o91QzyCQzu6PMATfONJfxW9vGUYm5paU0VcU72VDfrMfAvz54ATPoiAdZgk",
                                  tel="055594-2253",
                                  email="007xOusoKd@SFtN.com",
                                  external_id="kw4qjPQJ7jTB834R",
                                  private_money_ids=["8e19438a-8a79-4242-9aeb-7e77fc0c2373", "71eaa4ff-ff49-4d7d-836a-f6da4e577988", "ff4c8589-5792-4a1b-9f31-15f0bbd072b1", "6c0025fc-990c-44e2-add4-e41bf35479cd", "4f999de1-c144-4b3b-a972-22ce23116fb4", "c26cbc47-bd32-4125-a014-7e1390d527a9", "22d2c146-1e18-4013-969a-54e3aba56417", "80e9cb52-3dc1-4c49-8c54-13d0981cd917"],
                                  can_topup_private_money_ids=["f6851f51-1394-40cc-bba3-5505bf3e0e78", "25b56e66-2efa-4485-b7a6-830c9f77fa0d", "48922c88-e2a4-4baf-9159-fd0a722e55fa", "05871c71-811b-4069-a019-7258bf6c21f6", "4c9fdc04-4431-40a7-a364-50dc3c27cdc2"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_8(self):
        response = client.send(pp.UpdateShop(
                                  "1bbb746a-5c11-4c71-b1cc-895e07238985",
                                  name="YjUZmnwyS1mAzTO6PEOOvujUYEjG1bsd93HwfuPWrouBgDO",
                                  postal_code="1471981",
                                  address="cuEYpTU2CQDBEdrTGpzQaoH7roprIUCAGYbFfz98qEYs3fTBqIMEk6UFEGcRCIsN4Zfz8ZjlCqkGEh1KM2WnPd3zzJU6PO3sdcI8PDT08v74BI2VPe8qds4I2MEA4gJjHtGd0BbRBDVeSYn8uvrsJwmXqAKgViXf2eJim1RdN4XCU5aG5xcoPdJ6AA1qyCCpsvposWm2l41CxysbDiZ7jcWk9v3rFUsJH",
                                  tel="089039-7525",
                                  email="HWJNhtXiYy@5phV.com",
                                  external_id="xCRdiZLpJEvBgW4klcH2n",
                                  private_money_ids=["e5bdbf79-6230-4bbd-8e3c-33107e87dad5", "59d21014-28fb-486d-a172-52033e4a7844", "605c6d4f-befe-4ef1-a6c0-998dba80741d", "c1b69323-66c2-40ac-86af-4c59e32f364e", "5f2d6eee-751f-474d-ad24-37cc9f8a058f", "15cb1d94-5b09-4761-b023-6ba202431539", "7682a948-55a0-4c9e-8cd3-fbe8b9556d3f"],
                                  can_topup_private_money_ids=["3b9dc5f7-0e15-4a9d-8b06-3126f3bd9df5", "95b9ef20-1ec2-47da-9c3f-62cebf498d1b", "98f92f48-6af7-4048-8cf5-47460e5d62fe", "316160b2-5273-4efd-916f-0d2b17607d72", "65d9b182-2ad2-4592-b0d0-0773a45ae85f", "7efe4b5a-3028-4517-b480-e0fe23bff0c5", "ce1c79b7-ec36-44ad-81f7-65b81b9476cf", "3f10b77c-2427-4100-8058-99827749ad6a", "50eee773-bc75-41e4-9291-987004a9b043"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_moneys_0(self):
        response = client.send(pp.GetPrivateMoneys(
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_moneys_1(self):
        response = client.send(pp.GetPrivateMoneys(
                                  per_page=4872
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_moneys_2(self):
        response = client.send(pp.GetPrivateMoneys(
                                  page=7705,
                                  per_page=7080
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_moneys_3(self):
        response = client.send(pp.GetPrivateMoneys(
                                  organization_code="ON-Y5tjP69-c--Qd",
                                  page=1425,
                                  per_page=9445
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_organization_summaries_0(self):
        response = client.send(pp.GetPrivateMoneyOrganizationSummaries(
                                  "f9c5594b-0190-4951-9e2c-77c897a5751a"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_organization_summaries_1(self):
        response = client.send(pp.GetPrivateMoneyOrganizationSummaries(
                                  "f9c5594b-0190-4951-9e2c-77c897a5751a",
                                  page=2382
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_organization_summaries_2(self):
        response = client.send(pp.GetPrivateMoneyOrganizationSummaries(
                                  "f9c5594b-0190-4951-9e2c-77c897a5751a",
                                  per_page=8427,
                                  page=3710
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_organization_summaries_3(self):
        response = client.send(pp.GetPrivateMoneyOrganizationSummaries(
                                  "f9c5594b-0190-4951-9e2c-77c897a5751a",
                                  start="2024-01-01T14:07:31.000000+09:00",
                                  to="2022-06-21T06:43:28.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_organization_summaries_4(self):
        response = client.send(pp.GetPrivateMoneyOrganizationSummaries(
                                  "f9c5594b-0190-4951-9e2c-77c897a5751a",
                                  start="2023-08-22T08:11:41.000000+09:00",
                                  to="2018-06-29T14:30:11.000000+09:00",
                                  page=2509
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_organization_summaries_5(self):
        response = client.send(pp.GetPrivateMoneyOrganizationSummaries(
                                  "f9c5594b-0190-4951-9e2c-77c897a5751a",
                                  start="2017-12-10T07:35:27.000000+09:00",
                                  to="2020-06-12T13:48:48.000000+09:00",
                                  per_page=4690,
                                  page=6132
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_summary_0(self):
        response = client.send(pp.GetPrivateMoneySummary(
                                  "1b466ba8-55d0-40a0-8b9b-3c4e820dad5f"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_summary_1(self):
        response = client.send(pp.GetPrivateMoneySummary(
                                  "1b466ba8-55d0-40a0-8b9b-3c4e820dad5f",
                                  to="2023-11-28T11:22:53.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_summary_2(self):
        response = client.send(pp.GetPrivateMoneySummary(
                                  "1b466ba8-55d0-40a0-8b9b-3c4e820dad5f",
                                  start="2020-05-24T18:23:28.000000+09:00",
                                  to="2016-07-26T01:51:13.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_0(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "05b16a54-5888-47c7-a866-6d99ba6a6c01"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_1(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "05b16a54-5888-47c7-a866-6d99ba6a6c01",
                                  per_page=3635
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_2(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "05b16a54-5888-47c7-a866-6d99ba6a6c01",
                                  page=8814,
                                  per_page=671
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_3(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "05b16a54-5888-47c7-a866-6d99ba6a6c01",
                                  to="2019-07-23T01:08:01.000000+09:00",
                                  page=1061,
                                  per_page=6541
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_4(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "05b16a54-5888-47c7-a866-6d99ba6a6c01",
                                  start="2016-12-31T10:53:02.000000+09:00",
                                  to="2023-05-08T15:39:29.000000+09:00",
                                  page=7196,
                                  per_page=7788
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_5(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "05b16a54-5888-47c7-a866-6d99ba6a6c01",
                                  is_modified=True,
                                  start="2025-08-08T19:15:15.000000+09:00",
                                  to="2016-06-23T11:03:31.000000+09:00",
                                  page=6121,
                                  per_page=1352
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_6(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "05b16a54-5888-47c7-a866-6d99ba6a6c01",
                                  type="payment",
                                  is_modified=True,
                                  start="2022-10-03T04:47:28.000000+09:00",
                                  to="2020-06-28T15:24:41.000000+09:00",
                                  page=4552,
                                  per_page=8478
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_7(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "05b16a54-5888-47c7-a866-6d99ba6a6c01",
                                  receiver_customer_id="4bfeb1cd-a2fa-4fa5-93d0-2c0dd8c04ce0",
                                  type="transfer",
                                  is_modified=True,
                                  start="2017-04-01T05:42:00.000000+09:00",
                                  to="2025-04-17T22:34:09.000000+09:00",
                                  page=8585,
                                  per_page=5913
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_8(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "05b16a54-5888-47c7-a866-6d99ba6a6c01",
                                  sender_customer_id="60db07d8-5eb4-40c7-ba2a-a5211ac0bd0e",
                                  receiver_customer_id="d8128818-e537-46c0-bdd4-3e371623cacf",
                                  type="transfer",
                                  is_modified=False,
                                  start="2016-11-22T14:49:47.000000+09:00",
                                  to="2023-09-25T01:21:44.000000+09:00",
                                  page=7699,
                                  per_page=7048
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_bulk_transaction_0(self):
        response = client.send(pp.GetBulkTransaction(
                                  "8300a4b9-cfd7-4739-abb1-07e548bc1afd"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bulk_transaction_jobs_0(self):
        response = client.send(pp.ListBulkTransactionJobs(
                                  "1e4cffcb-fa3a-4e0b-889d-159adda948b7"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bulk_transaction_jobs_1(self):
        response = client.send(pp.ListBulkTransactionJobs(
                                  "1e4cffcb-fa3a-4e0b-889d-159adda948b7",
                                  per_page=2419
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bulk_transaction_jobs_2(self):
        response = client.send(pp.ListBulkTransactionJobs(
                                  "1e4cffcb-fa3a-4e0b-889d-159adda948b7",
                                  page=9378,
                                  per_page=2745
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_cashtray_0(self):
        response = client.send(pp.CreateCashtray(
                                  "c3fa6687-a405-4fee-b010-b4881db5bacd",
                                  "4065a9ff-76b5-44e3-aa10-1100c05a6d95",
                                  4823.0
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_cashtray_1(self):
        response = client.send(pp.CreateCashtray(
                                  "c3fa6687-a405-4fee-b010-b4881db5bacd",
                                  "4065a9ff-76b5-44e3-aa10-1100c05a6d95",
                                  4823.0,
                                  expires_in=1775
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_cashtray_2(self):
        response = client.send(pp.CreateCashtray(
                                  "c3fa6687-a405-4fee-b010-b4881db5bacd",
                                  "4065a9ff-76b5-44e3-aa10-1100c05a6d95",
                                  4823.0,
                                  description="mvcVzayJGxdqzoO9uXS4XBDN0o0Mu7ieKvzIZjqj6ciQDbUq",
                                  expires_in=3605
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_cashtray_0(self):
        response = client.send(pp.GetCashtray(
                                  "92df5a8a-34d4-431c-8cf1-a69cd05e3f5d"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_cancel_cashtray_0(self):
        response = client.send(pp.CancelCashtray(
                                  "ca73d7e6-6ca2-42b5-9b16-cf9eb65c9a49"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_cashtray_0(self):
        response = client.send(pp.UpdateCashtray(
                                  "eb79417e-11ba-41b0-97ba-a66dfab9dd91"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_cashtray_1(self):
        response = client.send(pp.UpdateCashtray(
                                  "eb79417e-11ba-41b0-97ba-a66dfab9dd91",
                                  expires_in=7250
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_cashtray_2(self):
        response = client.send(pp.UpdateCashtray(
                                  "eb79417e-11ba-41b0-97ba-a66dfab9dd91",
                                  description="V3ZqnN3F5j5hei5eenuWOLqxpAqKhr1PiatJCFbxFePHe8fLp7pWtBDbGEkzsRtHz3ymmInXbIX7AIIYKuFyd9WkOS8uJqFVIWZBtq3jnfd5KTcWHD2AadOYe9kazoxyRuU9Z",
                                  expires_in=6943
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_cashtray_3(self):
        response = client.send(pp.UpdateCashtray(
                                  "eb79417e-11ba-41b0-97ba-a66dfab9dd91",
                                  amount=6426.0,
                                  description="8Q2HvADi2W3bSFZd8xGhm9VbcZgOZ4yYRMkHKY2yx9gLKmBFLvqK55BnlHTaFsTxQXtMZL6XWgDmeak1eoliBFeYUr35I7ta0sw71srL0z9GEG3PXvnl3BKAcPvmXPfih5KNNjURd2N8Uca7AszKQRtnK9OFQAZ",
                                  expires_in=548
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_0(self):
        response = client.send(pp.CreateCampaign(
                                  "k8lWFzl04cFD8UrQW71JWWTZgcCuDt4bOl52Y9Vo2q3PiHBjRUpdSYSIHe7WRd8QgrTh5gg3jBLh2J3dK297uJriMdLcWHclyy16UsYQYNNbAndnytowLyNOYLTs",
                                  "a3dd2a8c-a0c8-4a92-9f88-255c868fa801",
                                  "2019-03-03T02:07:28.000000+09:00",
                                  "2023-07-26T09:59:50.000000+09:00",
                                  4686,
                                  "payment"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_1(self):
        response = client.send(pp.CreateCampaign(
                                  "k8lWFzl04cFD8UrQW71JWWTZgcCuDt4bOl52Y9Vo2q3PiHBjRUpdSYSIHe7WRd8QgrTh5gg3jBLh2J3dK297uJriMdLcWHclyy16UsYQYNNbAndnytowLyNOYLTs",
                                  "a3dd2a8c-a0c8-4a92-9f88-255c868fa801",
                                  "2019-03-03T02:07:28.000000+09:00",
                                  "2023-07-26T09:59:50.000000+09:00",
                                  4686,
                                  "payment",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_2(self):
        response = client.send(pp.CreateCampaign(
                                  "k8lWFzl04cFD8UrQW71JWWTZgcCuDt4bOl52Y9Vo2q3PiHBjRUpdSYSIHe7WRd8QgrTh5gg3jBLh2J3dK297uJriMdLcWHclyy16UsYQYNNbAndnytowLyNOYLTs",
                                  "a3dd2a8c-a0c8-4a92-9f88-255c868fa801",
                                  "2019-03-03T02:07:28.000000+09:00",
                                  "2023-07-26T09:59:50.000000+09:00",
                                  4686,
                                  "payment",
                                  dest_private_money_id="7dc078ac-b404-48ed-9777-fb30237911c5",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_3(self):
        response = client.send(pp.CreateCampaign(
                                  "k8lWFzl04cFD8UrQW71JWWTZgcCuDt4bOl52Y9Vo2q3PiHBjRUpdSYSIHe7WRd8QgrTh5gg3jBLh2J3dK297uJriMdLcWHclyy16UsYQYNNbAndnytowLyNOYLTs",
                                  "a3dd2a8c-a0c8-4a92-9f88-255c868fa801",
                                  "2019-03-03T02:07:28.000000+09:00",
                                  "2023-07-26T09:59:50.000000+09:00",
                                  4686,
                                  "payment",
                                  max_total_point_amount=8487,
                                  dest_private_money_id="6d324518-06fc-4623-aa6e-34e4b0a25291",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_4(self):
        response = client.send(pp.CreateCampaign(
                                  "k8lWFzl04cFD8UrQW71JWWTZgcCuDt4bOl52Y9Vo2q3PiHBjRUpdSYSIHe7WRd8QgrTh5gg3jBLh2J3dK297uJriMdLcWHclyy16UsYQYNNbAndnytowLyNOYLTs",
                                  "a3dd2a8c-a0c8-4a92-9f88-255c868fa801",
                                  "2019-03-03T02:07:28.000000+09:00",
                                  "2023-07-26T09:59:50.000000+09:00",
                                  4686,
                                  "payment",
                                  max_point_amount=3783,
                                  max_total_point_amount=756,
                                  dest_private_money_id="f424cefe-6014-483b-8788-4bf615716118",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_5(self):
        response = client.send(pp.CreateCampaign(
                                  "k8lWFzl04cFD8UrQW71JWWTZgcCuDt4bOl52Y9Vo2q3PiHBjRUpdSYSIHe7WRd8QgrTh5gg3jBLh2J3dK297uJriMdLcWHclyy16UsYQYNNbAndnytowLyNOYLTs",
                                  "a3dd2a8c-a0c8-4a92-9f88-255c868fa801",
                                  "2019-03-03T02:07:28.000000+09:00",
                                  "2023-07-26T09:59:50.000000+09:00",
                                  4686,
                                  "payment",
                                  exist_in_each_product_groups=False,
                                  max_point_amount=6880,
                                  max_total_point_amount=8168,
                                  dest_private_money_id="08ffb985-f360-4626-92d0-f7f57c263d84",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_6(self):
        response = client.send(pp.CreateCampaign(
                                  "k8lWFzl04cFD8UrQW71JWWTZgcCuDt4bOl52Y9Vo2q3PiHBjRUpdSYSIHe7WRd8QgrTh5gg3jBLh2J3dK297uJriMdLcWHclyy16UsYQYNNbAndnytowLyNOYLTs",
                                  "a3dd2a8c-a0c8-4a92-9f88-255c868fa801",
                                  "2019-03-03T02:07:28.000000+09:00",
                                  "2023-07-26T09:59:50.000000+09:00",
                                  4686,
                                  "payment",
                                  minimum_number_for_combination_purchase=6296,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=8551,
                                  max_total_point_amount=3991,
                                  dest_private_money_id="4d498f9b-cea5-452c-87d2-4a20d721f5e8",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_7(self):
        response = client.send(pp.CreateCampaign(
                                  "k8lWFzl04cFD8UrQW71JWWTZgcCuDt4bOl52Y9Vo2q3PiHBjRUpdSYSIHe7WRd8QgrTh5gg3jBLh2J3dK297uJriMdLcWHclyy16UsYQYNNbAndnytowLyNOYLTs",
                                  "a3dd2a8c-a0c8-4a92-9f88-255c868fa801",
                                  "2019-03-03T02:07:28.000000+09:00",
                                  "2023-07-26T09:59:50.000000+09:00",
                                  4686,
                                  "payment",
                                  applicable_shop_ids=["403a483d-212a-46d3-89ac-f82f59c6cede", "603c630b-0950-44bb-ab42-b73f6db31b0b", "a6654460-debb-4f19-8c0d-5f7f08dadd2d", "d2f5f88f-ff99-488c-860f-1bd6ddfd067e", "de38f153-87ef-45f4-a69f-dc67aedbbc0f", "85bb9caf-bea0-42fe-b96c-17e42ea048c0", "68f309ae-73ae-4a02-96d6-1f8e17f2756d", "baef9f61-e0d0-4078-bb26-ac8893c91881", "da85f1f8-376b-4f12-94f1-229f764a8ea8", "ec0c115b-e6a7-4cba-8fed-80c6310b45f2"],
                                  minimum_number_for_combination_purchase=8647,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=3302,
                                  max_total_point_amount=1602,
                                  dest_private_money_id="951d8947-e95c-41d7-bcb6-7aac1875fb74",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_8(self):
        response = client.send(pp.CreateCampaign(
                                  "k8lWFzl04cFD8UrQW71JWWTZgcCuDt4bOl52Y9Vo2q3PiHBjRUpdSYSIHe7WRd8QgrTh5gg3jBLh2J3dK297uJriMdLcWHclyy16UsYQYNNbAndnytowLyNOYLTs",
                                  "a3dd2a8c-a0c8-4a92-9f88-255c868fa801",
                                  "2019-03-03T02:07:28.000000+09:00",
                                  "2023-07-26T09:59:50.000000+09:00",
                                  4686,
                                  "payment",
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["cc61f682-a9e0-48a3-975a-67db75627fb8", "b498a89e-a82a-419d-9bbe-367b20cd8615", "16326fe3-daa9-4be3-82c8-94483a677cd3", "31093e1e-c091-4b3b-a4f3-1be3042d6a70", "c54ad9de-dfcf-4dab-b28c-487c908056ee", "fa083838-6fa8-47b3-b264-818182d98d36", "0a0b2764-a10b-4ff1-b520-93465d5cb77f", "8acbf391-5fb6-4065-9fe9-919c30a2009e", "fcf374da-1003-41b3-84c4-02648b13c386", "d1c47bb6-b157-4b22-a99e-77d3ca78b59c"],
                                  minimum_number_for_combination_purchase=7802,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=1455,
                                  max_total_point_amount=7194,
                                  dest_private_money_id="ca39fe6c-e650-43cc-9819-19f89a618058",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_9(self):
        response = client.send(pp.CreateCampaign(
                                  "k8lWFzl04cFD8UrQW71JWWTZgcCuDt4bOl52Y9Vo2q3PiHBjRUpdSYSIHe7WRd8QgrTh5gg3jBLh2J3dK297uJriMdLcWHclyy16UsYQYNNbAndnytowLyNOYLTs",
                                  "a3dd2a8c-a0c8-4a92-9f88-255c868fa801",
                                  "2019-03-03T02:07:28.000000+09:00",
                                  "2023-07-26T09:59:50.000000+09:00",
                                  4686,
                                  "payment",
                                  applicable_days_of_week=[5, 3, 6],
                                  applicable_time_ranges=[],
                                  applicable_shop_ids=["054dde71-7a0a-4ec1-a34c-0ed03298acf7"],
                                  minimum_number_for_combination_purchase=7240,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=8545,
                                  max_total_point_amount=9335,
                                  dest_private_money_id="d70c4f1e-4cfd-4d48-a509-b2898d5e93db",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_10(self):
        response = client.send(pp.CreateCampaign(
                                  "k8lWFzl04cFD8UrQW71JWWTZgcCuDt4bOl52Y9Vo2q3PiHBjRUpdSYSIHe7WRd8QgrTh5gg3jBLh2J3dK297uJriMdLcWHclyy16UsYQYNNbAndnytowLyNOYLTs",
                                  "a3dd2a8c-a0c8-4a92-9f88-255c868fa801",
                                  "2019-03-03T02:07:28.000000+09:00",
                                  "2023-07-26T09:59:50.000000+09:00",
                                  4686,
                                  "payment",
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }],
                                  applicable_days_of_week=[0, 1, 1, 3, 6, 6, 4, 1],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["a8781f35-1e68-4d25-ab4b-611015e7d889", "5363b2e9-4ea0-4db9-955d-e0baf2952c23", "230c104f-2027-4a9f-b2a0-4e3cef87922f", "9c9ec550-28fe-4582-9db9-eee05967a1ff", "630ea097-43ea-4185-833c-162ea132fae9", "08fdd487-485a-4936-b521-9333131563a2", "6529bd78-0fb2-4157-8286-0790adb6293d", "db965b7a-525a-4217-8a90-bd2ed61a9c7e", "1d259b24-d2e0-4285-9ab5-c4e13c037835", "81eab067-4236-4503-9371-c61b4be8a2d5"],
                                  minimum_number_for_combination_purchase=3607,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=8287,
                                  max_total_point_amount=7856,
                                  dest_private_money_id="fef6156c-d43c-412a-9e3f-0d9d49012795",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_11(self):
        response = client.send(pp.CreateCampaign(
                                  "k8lWFzl04cFD8UrQW71JWWTZgcCuDt4bOl52Y9Vo2q3PiHBjRUpdSYSIHe7WRd8QgrTh5gg3jBLh2J3dK297uJriMdLcWHclyy16UsYQYNNbAndnytowLyNOYLTs",
                                  "a3dd2a8c-a0c8-4a92-9f88-255c868fa801",
                                  "2019-03-03T02:07:28.000000+09:00",
                                  "2023-07-26T09:59:50.000000+09:00",
                                  4686,
                                  "payment",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }],
                                  applicable_days_of_week=[1, 2, 3, 1],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["d2907b19-eedc-4de4-a747-c956525b9da2", "e0d42772-3fd1-4b32-a1bd-ad2cfabd1734", "a4e6b906-85ef-4006-b483-921e7657c06e", "ca811ecb-0843-457a-a53a-34d93f170947", "d006b0fa-3ec0-4efa-9154-0a8dab4cdb57", "ec742ac5-c09b-4b33-ac05-c6fd5b5bbfd9", "ef395aa1-78a2-474f-a739-95f24ed92860"],
                                  minimum_number_for_combination_purchase=2681,
                                  exist_in_each_product_groups=True,
                                  max_point_amount=4469,
                                  max_total_point_amount=3481,
                                  dest_private_money_id="7412bee8-dd9b-4479-903e-70e6045e87d8",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_12(self):
        response = client.send(pp.CreateCampaign(
                                  "k8lWFzl04cFD8UrQW71JWWTZgcCuDt4bOl52Y9Vo2q3PiHBjRUpdSYSIHe7WRd8QgrTh5gg3jBLh2J3dK297uJriMdLcWHclyy16UsYQYNNbAndnytowLyNOYLTs",
                                  "a3dd2a8c-a0c8-4a92-9f88-255c868fa801",
                                  "2019-03-03T02:07:28.000000+09:00",
                                  "2023-07-26T09:59:50.000000+09:00",
                                  4686,
                                  "payment",
                                  subject="all",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }],
                                  applicable_days_of_week=[2],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["4412b72f-e87b-4a94-bbf3-26299824d007", "973ae698-f750-4821-9fe4-e5b1f21eb564", "034470d6-bfb4-4dfc-a0ed-caaf04bdc62a"],
                                  minimum_number_for_combination_purchase=5470,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=7126,
                                  max_total_point_amount=9863,
                                  dest_private_money_id="4f3c775c-92e5-4817-b6c7-5befd7dccefd",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_13(self):
        response = client.send(pp.CreateCampaign(
                                  "k8lWFzl04cFD8UrQW71JWWTZgcCuDt4bOl52Y9Vo2q3PiHBjRUpdSYSIHe7WRd8QgrTh5gg3jBLh2J3dK297uJriMdLcWHclyy16UsYQYNNbAndnytowLyNOYLTs",
                                  "a3dd2a8c-a0c8-4a92-9f88-255c868fa801",
                                  "2019-03-03T02:07:28.000000+09:00",
                                  "2023-07-26T09:59:50.000000+09:00",
                                  4686,
                                  "payment",
                                  is_exclusive=False,
                                  subject="money",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }],
                                  applicable_days_of_week=[6, 0, 5, 5],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["9479d6d5-33f5-4dbb-af5c-892ddee283af", "1ab52c18-9d5c-49dd-839a-2a8dd54b0818", "e410730e-8a4a-43d6-9dcb-3825d37908b5", "57bba400-25a3-43dd-8cc1-593deaf4ee47", "6d2da28c-9053-4165-acde-c1e90d379586", "02d7d411-1cd7-4857-a8c0-8a252dd067c5"],
                                  minimum_number_for_combination_purchase=9268,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=6200,
                                  max_total_point_amount=9283,
                                  dest_private_money_id="b2c24a4e-7ce5-4362-aeb7-fb322545d972",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_14(self):
        response = client.send(pp.CreateCampaign(
                                  "k8lWFzl04cFD8UrQW71JWWTZgcCuDt4bOl52Y9Vo2q3PiHBjRUpdSYSIHe7WRd8QgrTh5gg3jBLh2J3dK297uJriMdLcWHclyy16UsYQYNNbAndnytowLyNOYLTs",
                                  "a3dd2a8c-a0c8-4a92-9f88-255c868fa801",
                                  "2019-03-03T02:07:28.000000+09:00",
                                  "2023-07-26T09:59:50.000000+09:00",
                                  4686,
                                  "payment",
                                  point_expires_in_days=481,
                                  is_exclusive=False,
                                  subject="money",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }],
                                  applicable_days_of_week=[0, 3, 5, 3, 6, 0, 5, 4],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["14ca9a8b-050b-4f3a-818c-0bf87d1d95a6", "53fe7815-2ef5-478f-92ba-5468132e8f14", "6016d087-3eb6-4a1a-9ebf-89b6ead1a6b1", "85796cd5-edb8-4816-be8a-16321a3d54e2", "3cb38187-3230-443c-bcf9-0f2705aacd2f", "151fb790-362a-41e5-9986-1aef9c532a1f", "cdbaff35-7d06-42fa-a64f-70c19e8cbf27", "3c3d08ab-7967-4a3b-a453-a5cc921c7e2a", "07365ed6-1640-4b0b-8ee2-4f3180027931", "c65a8ce8-005a-4eca-ae57-fe2ca3c34e45"],
                                  minimum_number_for_combination_purchase=7866,
                                  exist_in_each_product_groups=True,
                                  max_point_amount=538,
                                  max_total_point_amount=9877,
                                  dest_private_money_id="6484e7e8-7a8a-421c-bbce-fe1fac01cce4",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_15(self):
        response = client.send(pp.CreateCampaign(
                                  "k8lWFzl04cFD8UrQW71JWWTZgcCuDt4bOl52Y9Vo2q3PiHBjRUpdSYSIHe7WRd8QgrTh5gg3jBLh2J3dK297uJriMdLcWHclyy16UsYQYNNbAndnytowLyNOYLTs",
                                  "a3dd2a8c-a0c8-4a92-9f88-255c868fa801",
                                  "2019-03-03T02:07:28.000000+09:00",
                                  "2023-07-26T09:59:50.000000+09:00",
                                  4686,
                                  "payment",
                                  point_expires_at="2021-01-01T13:57:44.000000+09:00",
                                  point_expires_in_days=4438,
                                  is_exclusive=True,
                                  subject="all",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }],
                                  applicable_days_of_week=[1, 1, 3, 1],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["53183c74-811a-4a3c-b07d-220b7bc3e150"],
                                  minimum_number_for_combination_purchase=1165,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=480,
                                  max_total_point_amount=7822,
                                  dest_private_money_id="7dbac46f-f891-433c-ae57-b29c53b02649",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_16(self):
        response = client.send(pp.CreateCampaign(
                                  "k8lWFzl04cFD8UrQW71JWWTZgcCuDt4bOl52Y9Vo2q3PiHBjRUpdSYSIHe7WRd8QgrTh5gg3jBLh2J3dK297uJriMdLcWHclyy16UsYQYNNbAndnytowLyNOYLTs",
                                  "a3dd2a8c-a0c8-4a92-9f88-255c868fa801",
                                  "2019-03-03T02:07:28.000000+09:00",
                                  "2023-07-26T09:59:50.000000+09:00",
                                  4686,
                                  "payment",
                                  status="enabled",
                                  point_expires_at="2021-06-04T07:55:30.000000+09:00",
                                  point_expires_in_days=9766,
                                  is_exclusive=False,
                                  subject="money",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }],
                                  applicable_days_of_week=[],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["d080fcd8-6969-4243-8744-97470d89273e", "49326dd2-b6d5-453c-93d1-894caf0c4381", "c901f531-9656-47a3-a958-471f5ea43d9f", "92f08b3b-59a0-4375-b30f-2a3512d5ce78", "7b846cee-c737-4dcd-a2df-e78325b02bda"],
                                  minimum_number_for_combination_purchase=150,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=9794,
                                  max_total_point_amount=3768,
                                  dest_private_money_id="3a17ca94-5f5b-4747-b976-1110b8bfcfc3",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_17(self):
        response = client.send(pp.CreateCampaign(
                                  "k8lWFzl04cFD8UrQW71JWWTZgcCuDt4bOl52Y9Vo2q3PiHBjRUpdSYSIHe7WRd8QgrTh5gg3jBLh2J3dK297uJriMdLcWHclyy16UsYQYNNbAndnytowLyNOYLTs",
                                  "a3dd2a8c-a0c8-4a92-9f88-255c868fa801",
                                  "2019-03-03T02:07:28.000000+09:00",
                                  "2023-07-26T09:59:50.000000+09:00",
                                  4686,
                                  "payment",
                                  description="5m86vU4CTunlo9FHcvhpXn1f9WUvYvDDo3G7amxcKXWGa0ExI5eaGTZJemJSk",
                                  status="disabled",
                                  point_expires_at="2018-10-28T09:16:24.000000+09:00",
                                  point_expires_in_days=3549,
                                  is_exclusive=True,
                                  subject="money",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }],
                                  applicable_days_of_week=[1, 4, 3, 1, 4, 3, 5, 5, 5],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=[],
                                  minimum_number_for_combination_purchase=6703,
                                  exist_in_each_product_groups=True,
                                  max_point_amount=9351,
                                  max_total_point_amount=4539,
                                  dest_private_money_id="a90eb049-f336-4374-9275-ac65bd66cd29",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_18(self):
        response = client.send(pp.CreateCampaign(
                                  "k8lWFzl04cFD8UrQW71JWWTZgcCuDt4bOl52Y9Vo2q3PiHBjRUpdSYSIHe7WRd8QgrTh5gg3jBLh2J3dK297uJriMdLcWHclyy16UsYQYNNbAndnytowLyNOYLTs",
                                  "a3dd2a8c-a0c8-4a92-9f88-255c868fa801",
                                  "2019-03-03T02:07:28.000000+09:00",
                                  "2023-07-26T09:59:50.000000+09:00",
                                  4686,
                                  "payment",
                                  bear_point_shop_id="f7105b4b-71fa-454b-a441-0314a61aeeae",
                                  description="G45Yd1ntlQmTFdCRQoNs8we7kw42AF3DTjcROuetQ8zFdMo0VY4tUGROiwu8g5jegd2tDc5SvOZdXc2AVLuF8gaKQ0OEhkP9BLs49M6H6epGVtu0HPhsCKuI2bJUyIRN5hatVHvQNYn4X1Qj8JOhaftsXxsjd7rD3p3viKfIPkJsUNb1al7E8GagW",
                                  status="disabled",
                                  point_expires_at="2018-05-03T19:52:12.000000+09:00",
                                  point_expires_in_days=5288,
                                  is_exclusive=False,
                                  subject="all",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }],
                                  applicable_days_of_week=[],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["f5822a34-75cf-4bc2-a5c2-bd97ef8c32e4", "0143d27f-e96d-4e13-90fe-3ec16f86ba4b", "90a5fee9-0577-47af-8b2a-0e98a1080f0d", "8758ea6b-dd19-4294-97d6-1a4dacdc2ae5", "d3dd4ec7-d38a-4ff7-af94-0b5e7335c463", "a6e05010-250f-4bdc-aeb0-e49970bdb5f4", "1a82271f-e565-4d6c-80d6-b698b9698e7d", "7b829275-f20b-4932-b495-742f3c16038a"],
                                  minimum_number_for_combination_purchase=5967,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=6027,
                                  max_total_point_amount=9202,
                                  dest_private_money_id="29877b46-9825-42b3-8f5e-00e958920599",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_campaigns_0(self):
        response = client.send(pp.ListCampaigns(
                                  "86b887e9-ffcf-4a75-aaa1-c9d2cdf8b927"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_campaigns_1(self):
        response = client.send(pp.ListCampaigns(
                                  "86b887e9-ffcf-4a75-aaa1-c9d2cdf8b927",
                                  per_page=2193
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_campaigns_2(self):
        response = client.send(pp.ListCampaigns(
                                  "86b887e9-ffcf-4a75-aaa1-c9d2cdf8b927",
                                  page=6395,
                                  per_page=5370
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_campaigns_3(self):
        response = client.send(pp.ListCampaigns(
                                  "86b887e9-ffcf-4a75-aaa1-c9d2cdf8b927",
                                  is_ongoing=True,
                                  page=7970,
                                  per_page=4015
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_campaign_0(self):
        response = client.send(pp.GetCampaign(
                                  "c7da7402-0838-4b4d-be12-ed63035b186a"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_0(self):
        response = client.send(pp.UpdateCampaign(
                                  "80db920c-14b6-4bd6-a117-8ca291a457ff"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_1(self):
        response = client.send(pp.UpdateCampaign(
                                  "80db920c-14b6-4bd6-a117-8ca291a457ff",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_2(self):
        response = client.send(pp.UpdateCampaign(
                                  "80db920c-14b6-4bd6-a117-8ca291a457ff",
                                  max_total_point_amount=6985,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_3(self):
        response = client.send(pp.UpdateCampaign(
                                  "80db920c-14b6-4bd6-a117-8ca291a457ff",
                                  max_point_amount=483,
                                  max_total_point_amount=5324,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_4(self):
        response = client.send(pp.UpdateCampaign(
                                  "80db920c-14b6-4bd6-a117-8ca291a457ff",
                                  exist_in_each_product_groups=True,
                                  max_point_amount=3283,
                                  max_total_point_amount=203,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_5(self):
        response = client.send(pp.UpdateCampaign(
                                  "80db920c-14b6-4bd6-a117-8ca291a457ff",
                                  minimum_number_for_combination_purchase=8693,
                                  exist_in_each_product_groups=True,
                                  max_point_amount=6573,
                                  max_total_point_amount=6922,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_6(self):
        response = client.send(pp.UpdateCampaign(
                                  "80db920c-14b6-4bd6-a117-8ca291a457ff",
                                  applicable_shop_ids=[],
                                  minimum_number_for_combination_purchase=5529,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=2652,
                                  max_total_point_amount=4799,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_7(self):
        response = client.send(pp.UpdateCampaign(
                                  "80db920c-14b6-4bd6-a117-8ca291a457ff",
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["1c80cfcb-f8b7-4405-bdb6-50d6d4d3d48f", "3a88a31f-c87f-4cfe-b54d-7784abeac0cd", "419673af-3cd3-4c04-9d1c-97e85356e2aa", "189a11af-5032-4bc8-a1b6-13ebafbd1bb6", "ec808e82-f0b5-4789-94eb-cf67bf22437b", "9fe8d2d1-f093-451c-892c-4341a3150ac8"],
                                  minimum_number_for_combination_purchase=5080,
                                  exist_in_each_product_groups=True,
                                  max_point_amount=7117,
                                  max_total_point_amount=6957,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_8(self):
        response = client.send(pp.UpdateCampaign(
                                  "80db920c-14b6-4bd6-a117-8ca291a457ff",
                                  applicable_days_of_week=[6, 6, 3, 5, 4, 4, 1, 6],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["adc67640-ed95-4bc5-8c92-a9d6a1de17c6", "7b596a2a-1549-4dec-87a2-0dbc7db3109f", "2b78ff8a-e53b-4d69-8c5d-a41fdf3cbd08", "1fa80e1e-d3c7-472c-95eb-fafadb55251a", "50f25c44-9177-41f2-93f4-8a80a12c1944"],
                                  minimum_number_for_combination_purchase=8825,
                                  exist_in_each_product_groups=True,
                                  max_point_amount=9265,
                                  max_total_point_amount=5977,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_9(self):
        response = client.send(pp.UpdateCampaign(
                                  "80db920c-14b6-4bd6-a117-8ca291a457ff",
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }],
                                  applicable_days_of_week=[0, 4, 3],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["070feac5-6ce5-4c46-8d94-2b9b5c31cdb0", "dc748dc7-7236-4cfb-ac63-cb9b1662393a", "f4a1e78a-dea1-4537-8ec1-3dc0aed6627c", "10c0732c-6eca-486c-a680-e165a4293178", "94eb190b-2b3a-4146-a13b-3d8008861f6f"],
                                  minimum_number_for_combination_purchase=4472,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=665,
                                  max_total_point_amount=2582,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_10(self):
        response = client.send(pp.UpdateCampaign(
                                  "80db920c-14b6-4bd6-a117-8ca291a457ff",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }],
                                  applicable_days_of_week=[4, 2, 1, 4, 0, 1, 3, 5, 2],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["b89b426d-a28f-430d-ad62-abc51bf41957", "147a04f9-7b3e-4946-aa48-710e9e403ba2", "981a9933-26bf-40a9-a3ba-cd9a9341727f", "db10d525-2566-46b4-b824-b947dcc46f95", "ee15b4e5-a94e-4056-b957-2e310e1e8064", "7d83b6c9-1dda-4cba-ad17-910e67ef3f98"],
                                  minimum_number_for_combination_purchase=9780,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=1700,
                                  max_total_point_amount=5708,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_11(self):
        response = client.send(pp.UpdateCampaign(
                                  "80db920c-14b6-4bd6-a117-8ca291a457ff",
                                  subject="money",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }],
                                  applicable_days_of_week=[3, 1, 6, 1, 2, 3, 1, 6, 2, 0],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["8ab58f24-d998-4507-9d5e-f4b0ce7af464", "6904ba0f-5a38-4006-9892-66e836bbfa44", "c6d65117-8e03-42c3-a943-7fa9fd7fea47", "5dc961e2-8916-4096-bf7f-13c50c87d00e", "feed0fc1-5698-4711-adfe-da8d2b2bf05b", "11a63b38-f044-428c-84ed-18fb4fd3becd", "9b300da5-fdf6-42b6-8a05-bd9e37c32f05", "880c894f-1855-420a-9304-18c087d892b8", "485e3e78-24d0-4f5b-9223-0de08837f06e", "c1272035-1e4a-4ce0-93df-09483cd67bd6"],
                                  minimum_number_for_combination_purchase=8967,
                                  exist_in_each_product_groups=True,
                                  max_point_amount=7529,
                                  max_total_point_amount=7225,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_12(self):
        response = client.send(pp.UpdateCampaign(
                                  "80db920c-14b6-4bd6-a117-8ca291a457ff",
                                  is_exclusive=False,
                                  subject="all",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[],
                                  applicable_days_of_week=[4, 2, 6],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["a831071f-df3c-4f2b-b4df-b0b3151f8647", "c76ba9a8-1d34-4e0f-9839-5718996d4a68", "282a2390-f87b-4c28-a975-16c73e7e82fa", "ad268cfd-0339-49cd-94e6-1a5cc2301792", "ded62e9e-e3b8-402e-a2f2-0e287a87e529", "5d109cf4-8fc8-4768-9d95-2b81059f088a", "ee7c7f5d-bda4-48f1-9db6-2e197c2b622c", "7a60f5de-bd99-4d3b-b68c-b7544ae18121"],
                                  minimum_number_for_combination_purchase=4924,
                                  exist_in_each_product_groups=True,
                                  max_point_amount=2627,
                                  max_total_point_amount=6475,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_13(self):
        response = client.send(pp.UpdateCampaign(
                                  "80db920c-14b6-4bd6-a117-8ca291a457ff",
                                  point_expires_in_days=6368,
                                  is_exclusive=True,
                                  subject="money",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }],
                                  applicable_days_of_week=[2, 3, 1, 0, 6],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["ba85e3dc-a2f8-4fb2-8f20-27bbe9d8381d", "4bfedff2-8599-49ac-a3d6-66af40877bcd", "6ac00018-4574-4828-8d51-2f700aa67acc", "6b50d850-fd85-4f07-83e5-5a2ee60eded0", "b9731fa4-16b9-4064-bacc-4ef8f2002096", "b3952eb5-d0f4-45ad-bcad-9332e57f556c", "776a97dc-03e7-4fd7-8e3d-042e66fe28a8", "1189a76f-23ca-4ed1-996f-7bcf4c73b215", "58223f53-902d-476d-85c1-7f6353efd375", "7489cb9d-67cc-48c0-a996-bbaf46e92b56"],
                                  minimum_number_for_combination_purchase=4129,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=6898,
                                  max_total_point_amount=5909,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_14(self):
        response = client.send(pp.UpdateCampaign(
                                  "80db920c-14b6-4bd6-a117-8ca291a457ff",
                                  point_expires_at="2023-05-22T05:15:36.000000+09:00",
                                  point_expires_in_days=3881,
                                  is_exclusive=False,
                                  subject="all",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }],
                                  applicable_days_of_week=[4, 5, 5, 4, 6, 2],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["88681cdf-6e09-4707-8132-0c17b66b406f", "565b6044-d0b1-4eeb-a25c-3a32007ed679"],
                                  minimum_number_for_combination_purchase=1053,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=1466,
                                  max_total_point_amount=7987,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_15(self):
        response = client.send(pp.UpdateCampaign(
                                  "80db920c-14b6-4bd6-a117-8ca291a457ff",
                                  status="disabled",
                                  point_expires_at="2023-06-17T16:10:08.000000+09:00",
                                  point_expires_in_days=5145,
                                  is_exclusive=True,
                                  subject="money",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }],
                                  applicable_days_of_week=[3, 3, 0, 2, 1, 2, 6, 0],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["38f27d79-9a4c-4cbe-822a-8923a92e4c05", "0e5359b2-078e-41eb-bd8f-a6fce8406c6c", "ce4ca98b-ccdf-4e22-ac13-269a573e08fb", "9de2b62f-93c4-440a-8a40-42b12f355172", "4927d58c-c133-447b-8cbc-976a9079b05f", "458e0f26-f33e-4387-8393-c29a167b564c", "7e92cecf-4832-4782-b058-3f8747bd5619", "9af50069-7161-4390-8cdc-9e07d278e62b"],
                                  minimum_number_for_combination_purchase=7549,
                                  exist_in_each_product_groups=True,
                                  max_point_amount=9515,
                                  max_total_point_amount=3722,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_16(self):
        response = client.send(pp.UpdateCampaign(
                                  "80db920c-14b6-4bd6-a117-8ca291a457ff",
                                  description="c9g0DX8Wq75NNOSKErJuxzhPvCMr0kZtscw8OT2IAWVb28SeWG8Bm8n",
                                  status="enabled",
                                  point_expires_at="2020-03-08T15:19:02.000000+09:00",
                                  point_expires_in_days=2385,
                                  is_exclusive=True,
                                  subject="all",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }],
                                  applicable_days_of_week=[3, 0, 5, 4, 0],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["4785ea62-9c03-448a-9645-2e291505271a", "fd35045e-a535-405c-8fd8-2c3731993630", "f6b4f51b-db19-4027-b5d6-e180844c3a6d", "85a73b8f-4a5b-4135-9baf-1d8410889816", "d850eb24-c32c-47fd-be4a-89203d1b5d06"],
                                  minimum_number_for_combination_purchase=7530,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=9498,
                                  max_total_point_amount=7497,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_17(self):
        response = client.send(pp.UpdateCampaign(
                                  "80db920c-14b6-4bd6-a117-8ca291a457ff",
                                  event="external-transaction",
                                  description="UPeHPDN",
                                  status="disabled",
                                  point_expires_at="2025-05-29T21:46:37.000000+09:00",
                                  point_expires_in_days=5045,
                                  is_exclusive=False,
                                  subject="money",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }],
                                  applicable_days_of_week=[4, 5, 3, 3],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["96ae2705-4f51-4145-94c6-106b3e3c9164", "5b409ab4-4bc2-4cb7-a019-0036035cb3f1", "1112f31d-cf60-43a8-bfd6-d8ecfa0aadb0", "1e070b62-06f6-4d73-89ce-df755d6e7387", "eadb72c6-fac8-4d30-bc38-cc405d22b424", "583f13e3-a1c8-4810-a569-5cb3e9a64b49", "ff8a4c72-0218-41fb-9a21-0600ef39329b"],
                                  minimum_number_for_combination_purchase=2038,
                                  exist_in_each_product_groups=True,
                                  max_point_amount=8326,
                                  max_total_point_amount=9340,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_18(self):
        response = client.send(pp.UpdateCampaign(
                                  "80db920c-14b6-4bd6-a117-8ca291a457ff",
                                  priority=7432,
                                  event="external-transaction",
                                  description="bJYOhkdNc7P4FTTn7dkmZ79WHBWuUwmPiQWsAKL3kSTc0LPbfp9enQ4UqYgv1CZM",
                                  status="enabled",
                                  point_expires_at="2022-11-12T11:56:38.000000+09:00",
                                  point_expires_in_days=1434,
                                  is_exclusive=False,
                                  subject="all",
                                  amount_based_point_rules=[],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }],
                                  applicable_days_of_week=[3, 4, 1, 4, 1],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["f00e0fc5-77c2-4e7c-ab7d-82633519f628", "7e83e342-eed7-41f7-a10f-5d847f2458b9", "1aca8293-9fa3-4d78-ab79-aa79626514dd", "e77f0932-34e2-42c3-bb8c-eba5f81f4a9c", "ff0f2ba6-c0c0-4c81-a9cc-dea8e9091b1d", "6ce84cb7-05a0-4210-9c85-d7b44490b8bc", "7e6ba3d1-d6b4-4b16-a083-b2fdda128675", "2328eab2-b3cf-4d98-be4d-be8a420f024d", "415b3c06-d04d-4730-93fc-54f8c7ac5f44", "63dd457f-d6a9-4edd-8584-1224584c2a32"],
                                  minimum_number_for_combination_purchase=7333,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=3170,
                                  max_total_point_amount=9517,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_19(self):
        response = client.send(pp.UpdateCampaign(
                                  "80db920c-14b6-4bd6-a117-8ca291a457ff",
                                  ends_at="2025-01-18T13:32:03.000000+09:00",
                                  priority=855,
                                  event="external-transaction",
                                  description="9LUbHMcMKbw9zDIEFEyvAvmcoCxU",
                                  status="enabled",
                                  point_expires_at="2025-06-30T22:44:26.000000+09:00",
                                  point_expires_in_days=8640,
                                  is_exclusive=False,
                                  subject="money",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }],
                                  applicable_days_of_week=[5, 3, 1, 1, 3, 3],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["c42e79c6-6bbb-4b65-b549-a915beb5df9a", "b93fa81a-2f42-4404-9528-ec7eef12246d", "fb3771ec-03b3-4968-849e-fd2eef5e87b3", "cbaebc36-7626-4b31-a78a-7988ab728475", "31664059-5548-4383-9d89-a601b32ac56a", "b328b3cf-2349-46ed-af90-46a56ab65fa2", "51b6e800-2f86-40da-95ab-1d90ad35ffbc", "13c634e8-e160-4223-8f53-fa8697722e4f", "20994828-6374-4638-9514-3940aa4bfdce"],
                                  minimum_number_for_combination_purchase=6522,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=8035,
                                  max_total_point_amount=2578,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_20(self):
        response = client.send(pp.UpdateCampaign(
                                  "80db920c-14b6-4bd6-a117-8ca291a457ff",
                                  starts_at="2024-02-06T16:58:32.000000+09:00",
                                  ends_at="2018-05-10T19:51:29.000000+09:00",
                                  priority=6463,
                                  event="payment",
                                  description="Gme5CA27ltkwLNnQtyV2QJ",
                                  status="disabled",
                                  point_expires_at="2018-05-24T09:32:58.000000+09:00",
                                  point_expires_in_days=1600,
                                  is_exclusive=False,
                                  subject="all",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[],
                                  applicable_days_of_week=[5, 6, 5, 6, 5, 4, 5],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["7be5fbfc-5121-4f11-9f8d-d92a2d365ba4", "f00a5657-9973-48c9-80a5-3e285cbc2b18", "5d876dd2-3a78-4a4c-89ab-c0a8747110a2"],
                                  minimum_number_for_combination_purchase=8720,
                                  exist_in_each_product_groups=True,
                                  max_point_amount=4840,
                                  max_total_point_amount=9396,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_21(self):
        response = client.send(pp.UpdateCampaign(
                                  "80db920c-14b6-4bd6-a117-8ca291a457ff",
                                  name="3wnSfVCO7XYJmoO0uhcJraMmDaSEahfn300LCaHLSroJkepEoifMTQ44ocvwtomMfjQ73GX2yquqoxmpJQvrLat0xlnzVZch13fLL8IaybXOFsTe5kGdJyjn39kuUAVwNBecCVcfQFB6zhe4zCjHFhQi2UCzxxgdtQx1Yj4cppg0SxOu0ayiRvxTn",
                                  starts_at="2018-07-10T01:18:26.000000+09:00",
                                  ends_at="2023-09-30T01:33:44.000000+09:00",
                                  priority=3482,
                                  event="payment",
                                  description="nHVMhD4r87dViYbNhwHBT9cSJc7HHGuapEaMsGd77SVXYGZA1EEVZp38NbYd6BPccNKfybJvzwpWAlSZO0eB2VJdZjjB0xRzUNUpofUOthUvaBWHSD95mCwqz0uQMfHDC0caZdfhivWlaI8SRhD29ZtnzslLBpLYCsl",
                                  status="enabled",
                                  point_expires_at="2021-10-12T07:37:22.000000+09:00",
                                  point_expires_in_days=4790,
                                  is_exclusive=True,
                                  subject="all",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": True,
          "required_count": 2
        }],
                                  applicable_days_of_week=[5, 5, 0],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["7872ece2-626e-48b9-a80c-0baeaffeb415", "8da393e4-bf8d-4758-9f39-cd4fe0b9a8c3"],
                                  minimum_number_for_combination_purchase=4711,
                                  exist_in_each_product_groups=True,
                                  max_point_amount=6018,
                                  max_total_point_amount=6105,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_request_user_stats_0(self):
        response = client.send(pp.RequestUserStats(
                                  "2016-10-05T10:55:22.000000+09:00",
                                  "2022-01-14T09:41:39.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

if __name__ == '__main__':
    unittest.main()
