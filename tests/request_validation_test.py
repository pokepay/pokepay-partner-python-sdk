# coding: utf-8
# DO NOT EDIT: File is generated by code generator.

import unittest
import pokepay_partner_python_sdk as pp

client = pp.Client('~/.pokepay/config.ini')


class PokepayTest(unittest.TestCase):

    def test_get_ping_0(self):
        response = client.send(pp.GetPing(
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_send_echo_0(self):
        response = client.send(pp.SendEcho(
                                  "acDgdY"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_user_0(self):
        response = client.send(pp.GetUser(
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_user_accounts_0(self):
        response = client.send(pp.ListUserAccounts(
                                  "f7badafa-54a1-4511-b337-e4aa1c1fe652"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_user_accounts_1(self):
        response = client.send(pp.ListUserAccounts(
                                  "f7badafa-54a1-4511-b337-e4aa1c1fe652",
                                  per_page=5145
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_user_accounts_2(self):
        response = client.send(pp.ListUserAccounts(
                                  "f7badafa-54a1-4511-b337-e4aa1c1fe652",
                                  page=7996,
                                  per_page=3122
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_user_account_0(self):
        response = client.send(pp.CreateUserAccount(
                                  "1cca797a-a4ae-4807-a9ad-4bab80f00988",
                                  "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_user_account_1(self):
        response = client.send(pp.CreateUserAccount(
                                  "1cca797a-a4ae-4807-a9ad-4bab80f00988",
                                  "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d",
                                  external_id="FBMnn24Y00BddIYIaGsnHTfyj3vGhpYs6lE3PVx"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_user_account_2(self):
        response = client.send(pp.CreateUserAccount(
                                  "1cca797a-a4ae-4807-a9ad-4bab80f00988",
                                  "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d",
                                  name="hCRcEAVa4JmfjoJZ9ajsO39BqxPDSP5BpfA0dYcuMmHpa4aDHWm32hBFhI0DxRhz83lKq4Wp1hKlNvpHM0s7Dd9Uu6qWqC0qUtLag9adxARTcCtKjz1M2kusM3cVDMOGMtpxWNvKR6Gcp6PWCiNymBaUIu6lQIyVNDYRttS46oTXBYnbHbMuAdnXANiixumuncg7egxc7L05i8jkZ1Waa",
                                  external_id="h6AAgB9jXehhbgs"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_account_0(self):
        response = client.send(pp.GetAccount(
                                  "ce348e12-e7ee-4579-a9c8-94dd3d6c2f3d"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_account_0(self):
        response = client.send(pp.UpdateAccount(
                                  "553fd4da-7231-4218-aeb3-2d714f66622b"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_account_1(self):
        response = client.send(pp.UpdateAccount(
                                  "553fd4da-7231-4218-aeb3-2d714f66622b",
                                  can_transfer_topup=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_account_2(self):
        response = client.send(pp.UpdateAccount(
                                  "553fd4da-7231-4218-aeb3-2d714f66622b",
                                  status="pre-closed",
                                  can_transfer_topup=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_account_3(self):
        response = client.send(pp.UpdateAccount(
                                  "553fd4da-7231-4218-aeb3-2d714f66622b",
                                  is_suspended=False,
                                  status="active",
                                  can_transfer_topup=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_delete_account_0(self):
        response = client.send(pp.DeleteAccount(
                                  "78993f7e-a95e-4e84-8ce0-7a7b0adcc451"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_delete_account_1(self):
        response = client.send(pp.DeleteAccount(
                                  "78993f7e-a95e-4e84-8ce0-7a7b0adcc451",
                                  cashback=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_balances_0(self):
        response = client.send(pp.ListAccountBalances(
                                  "124a3fe8-1e88-4803-9195-15bbd1722f1a"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_balances_1(self):
        response = client.send(pp.ListAccountBalances(
                                  "124a3fe8-1e88-4803-9195-15bbd1722f1a",
                                  direction="desc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_balances_2(self):
        response = client.send(pp.ListAccountBalances(
                                  "124a3fe8-1e88-4803-9195-15bbd1722f1a",
                                  expires_at_to="2021-05-19T16:07:19.000000+09:00",
                                  direction="desc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_balances_3(self):
        response = client.send(pp.ListAccountBalances(
                                  "124a3fe8-1e88-4803-9195-15bbd1722f1a",
                                  expires_at_from="2018-05-08T14:00:21.000000+09:00",
                                  expires_at_to="2019-08-29T14:43:17.000000+09:00",
                                  direction="desc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_balances_4(self):
        response = client.send(pp.ListAccountBalances(
                                  "124a3fe8-1e88-4803-9195-15bbd1722f1a",
                                  per_page=9044,
                                  expires_at_from="2015-11-13T07:54:24.000000+09:00",
                                  expires_at_to="2023-12-17T09:40:00.000000+09:00",
                                  direction="desc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_balances_5(self):
        response = client.send(pp.ListAccountBalances(
                                  "124a3fe8-1e88-4803-9195-15bbd1722f1a",
                                  page=5673,
                                  per_page=5586,
                                  expires_at_from="2022-06-09T18:09:43.000000+09:00",
                                  expires_at_to="2017-11-03T08:44:37.000000+09:00",
                                  direction="desc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_expired_balances_0(self):
        response = client.send(pp.ListAccountExpiredBalances(
                                  "1395c3b0-3227-4847-b485-d25fcda949fd"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_expired_balances_1(self):
        response = client.send(pp.ListAccountExpiredBalances(
                                  "1395c3b0-3227-4847-b485-d25fcda949fd",
                                  direction="asc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_expired_balances_2(self):
        response = client.send(pp.ListAccountExpiredBalances(
                                  "1395c3b0-3227-4847-b485-d25fcda949fd",
                                  expires_at_to="2016-12-05T14:11:55.000000+09:00",
                                  direction="asc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_expired_balances_3(self):
        response = client.send(pp.ListAccountExpiredBalances(
                                  "1395c3b0-3227-4847-b485-d25fcda949fd",
                                  expires_at_from="2024-05-08T18:48:53.000000+09:00",
                                  expires_at_to="2025-01-11T13:02:08.000000+09:00",
                                  direction="desc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_expired_balances_4(self):
        response = client.send(pp.ListAccountExpiredBalances(
                                  "1395c3b0-3227-4847-b485-d25fcda949fd",
                                  per_page=6193,
                                  expires_at_from="2019-01-16T17:00:54.000000+09:00",
                                  expires_at_to="2022-10-20T15:33:42.000000+09:00",
                                  direction="desc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_expired_balances_5(self):
        response = client.send(pp.ListAccountExpiredBalances(
                                  "1395c3b0-3227-4847-b485-d25fcda949fd",
                                  page=3229,
                                  per_page=3545,
                                  expires_at_from="2019-04-01T22:27:42.000000+09:00",
                                  expires_at_to="2018-06-03T18:12:31.000000+09:00",
                                  direction="desc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_customer_account_0(self):
        response = client.send(pp.UpdateCustomerAccount(
                                  "f39e0dc7-ebbf-4161-a34e-e312bce444b9"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_customer_account_1(self):
        response = client.send(pp.UpdateCustomerAccount(
                                  "f39e0dc7-ebbf-4161-a34e-e312bce444b9",
                                  external_id="eZjSIQORsTn19Lt83IRfp6apsZzw"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_customer_account_2(self):
        response = client.send(pp.UpdateCustomerAccount(
                                  "f39e0dc7-ebbf-4161-a34e-e312bce444b9",
                                  account_name="Ugb2qqrLtRpMZnFJMuPuuYDxHZdnikAchiJbVP3ZTnJxIJTqpbj9hQa29LtqbzIUCtrgI5GH6",
                                  external_id="i2f3OojTDEk0fitYgK"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_customer_account_3(self):
        response = client.send(pp.UpdateCustomerAccount(
                                  "f39e0dc7-ebbf-4161-a34e-e312bce444b9",
                                  status="suspended",
                                  account_name="zfXu0N7ZPQ6Ey6Tu3B",
                                  external_id="U56A0DovC2AWlgsj8AO1bqHH9NHpqZwH1tkpyND"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_0(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "5a434e63-82f5-4d3b-9357-6d0bf3dd402a"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_1(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "5a434e63-82f5-4d3b-9357-6d0bf3dd402a",
                                  email="xfr4xKRRC5@UPfd.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_2(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "5a434e63-82f5-4d3b-9357-6d0bf3dd402a",
                                  tel="09-1302581",
                                  email="hDpkltxfpG@BgKz.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_3(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "5a434e63-82f5-4d3b-9357-6d0bf3dd402a",
                                  external_id="LBWMCY",
                                  tel="0680922280",
                                  email="nT3R8fCd81@15Vz.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_4(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "5a434e63-82f5-4d3b-9357-6d0bf3dd402a",
                                  status="pre-closed",
                                  external_id="SNwUPij0JCeKaErwIngTct5VctC8ahSG576",
                                  tel="029-20-627",
                                  email="hNuqsd2aOE@u5ug.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_5(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "5a434e63-82f5-4d3b-9357-6d0bf3dd402a",
                                  is_suspended=False,
                                  status="suspended",
                                  external_id="0fcKmGRUw7sMhCFW8ODbHkZSUPXBsmObvnHUjDTSSciw",
                                  tel="0302-887",
                                  email="IImkvl5vCA@Hh7Q.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_6(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "5a434e63-82f5-4d3b-9357-6d0bf3dd402a",
                                  created_at_to="2017-11-11T00:03:31.000000+09:00",
                                  is_suspended=False,
                                  status="active",
                                  external_id="YIcm0Sp2RluFOAxJTKKlkJp5ENq52OLTcJlns",
                                  tel="0775-9145-4752",
                                  email="n7Z1wrrgdx@WfKk.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_7(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "5a434e63-82f5-4d3b-9357-6d0bf3dd402a",
                                  created_at_from="2021-08-28T21:00:04.000000+09:00",
                                  created_at_to="2015-11-25T18:11:51.000000+09:00",
                                  is_suspended=True,
                                  status="pre-closed",
                                  external_id="pOR",
                                  tel="00807-2523",
                                  email="d4nadmeyKn@qGyq.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_8(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "5a434e63-82f5-4d3b-9357-6d0bf3dd402a",
                                  per_page=4016,
                                  created_at_from="2018-03-12T00:01:50.000000+09:00",
                                  created_at_to="2021-12-03T04:41:26.000000+09:00",
                                  is_suspended=False,
                                  status="active",
                                  external_id="36l34SSSOxW72gqSjd8Q",
                                  tel="04040475",
                                  email="merReZGbvG@gvAZ.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_9(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "5a434e63-82f5-4d3b-9357-6d0bf3dd402a",
                                  page=1123,
                                  per_page=890,
                                  created_at_from="2021-11-19T16:34:34.000000+09:00",
                                  created_at_to="2020-01-07T05:35:58.000000+09:00",
                                  is_suspended=False,
                                  status="pre-closed",
                                  external_id="Lea6an4P1AnQALadFsAzgfKjbtuXgZDedI",
                                  tel="08-40087872",
                                  email="iwZBj5AvHd@O2At.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_customer_account_0(self):
        response = client.send(pp.CreateCustomerAccount(
                                  "c2634781-e592-4c94-87e6-1be01b1d99a9"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_customer_account_1(self):
        response = client.send(pp.CreateCustomerAccount(
                                  "c2634781-e592-4c94-87e6-1be01b1d99a9",
                                  external_id="LabY2vDzXzQx3sP8V6IT9VFC5bo0KXfPASw8"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_customer_account_2(self):
        response = client.send(pp.CreateCustomerAccount(
                                  "c2634781-e592-4c94-87e6-1be01b1d99a9",
                                  account_name="PQ0hMJ4nPgNJOUuVI3xkUSOX0vTgyFK1FOp7pl9MWii2exAarzlUllrgsQZQAnUYeKIbZQuPYAKNLvTyMcIYlLoYSz5jRHNPv9LO3MtPyt1",
                                  external_id="nktL8AYkBvD7caRgncONv"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_customer_account_3(self):
        response = client.send(pp.CreateCustomerAccount(
                                  "c2634781-e592-4c94-87e6-1be01b1d99a9",
                                  user_name="8Kje2pUTWzADNDe87oiAkJDB6ZsUUsk6umIdkjysmBoCy1",
                                  account_name="d1e5PrxfXmPZX1VlVfqebv0ckwSJ4e9e0pY47yGoAwg28Msl4sq96mAewFZHEg2RF0uEHwK5Jbwu9JRSn5a7ymUxn4mfvD7ycun86BZW4IWD5GZy4J15w0ovSrq2HjQnZoVWhOdLDSpe9mEjTApY38vZyrfHaX2ePxiTIXhf26BicGgC0Q3onqPmyIzFPAF7SEHME8DlS2m5Kv5IbgTWsj",
                                  external_id="inGr0IGEeLzU5m"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_shop_accounts_0(self):
        response = client.send(pp.GetShopAccounts(
                                  "122f7c99-ba73-409e-bcaf-ca2e6fa9d12e"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_shop_accounts_1(self):
        response = client.send(pp.GetShopAccounts(
                                  "122f7c99-ba73-409e-bcaf-ca2e6fa9d12e",
                                  is_suspended=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_shop_accounts_2(self):
        response = client.send(pp.GetShopAccounts(
                                  "122f7c99-ba73-409e-bcaf-ca2e6fa9d12e",
                                  created_at_to="2022-08-14T03:51:44.000000+09:00",
                                  is_suspended=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_shop_accounts_3(self):
        response = client.send(pp.GetShopAccounts(
                                  "122f7c99-ba73-409e-bcaf-ca2e6fa9d12e",
                                  created_at_from="2019-11-10T12:31:26.000000+09:00",
                                  created_at_to="2019-03-02T06:47:02.000000+09:00",
                                  is_suspended=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_shop_accounts_4(self):
        response = client.send(pp.GetShopAccounts(
                                  "122f7c99-ba73-409e-bcaf-ca2e6fa9d12e",
                                  per_page=5016,
                                  created_at_from="2021-02-21T01:26:31.000000+09:00",
                                  created_at_to="2021-11-11T09:43:58.000000+09:00",
                                  is_suspended=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_shop_accounts_5(self):
        response = client.send(pp.GetShopAccounts(
                                  "122f7c99-ba73-409e-bcaf-ca2e6fa9d12e",
                                  page=878,
                                  per_page=4128,
                                  created_at_from="2016-03-21T11:12:51.000000+09:00",
                                  created_at_to="2023-10-10T08:53:50.000000+09:00",
                                  is_suspended=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_0(self):
        response = client.send(pp.ListBills(
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_1(self):
        response = client.send(pp.ListBills(
                                  is_disabled=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_2(self):
        response = client.send(pp.ListBills(
                                  upper_limit_amount=7359,
                                  is_disabled=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_3(self):
        response = client.send(pp.ListBills(
                                  lower_limit_amount=4602,
                                  upper_limit_amount=4086,
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_4(self):
        response = client.send(pp.ListBills(
                                  shop_id="2e5af513-ed9a-4083-b833-b54d02d47b19",
                                  lower_limit_amount=8071,
                                  upper_limit_amount=9515,
                                  is_disabled=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_5(self):
        response = client.send(pp.ListBills(
                                  shop_name="oePO7gkONNAjBCYm4KWEpCDEdkn0OKxjITuRCVadPy2BbYSAUfNgtCT3aJmzxxuQUVBryDZD3LHlYNS3c0MUvvhZyFdpqg4zFLwpBAFUZ73GCZjYfwcSTcjOL0y0KRT0zFenF09DVyQoaELlrJk6MRPKi62IzWH9",
                                  shop_id="0c7a21e5-557f-4a6d-955b-517b3dd30ee8",
                                  lower_limit_amount=209,
                                  upper_limit_amount=816,
                                  is_disabled=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_6(self):
        response = client.send(pp.ListBills(
                                  created_to="2016-09-22T06:07:05.000000+09:00",
                                  shop_name="qvNNBrhyRg9xxzNXJhnMZrEqyRqPCGzbSmOoYCMUQNjvF4AYLzd022rwQVNfYYCfZZWpAcyBWwWi1DgvTt4hTTZowFPycMflfcbIeOIKes05558vbabHcGuqU0Zpo5LBba7yo5q8iSiTBSZQPeDSY9S36TscHpgaN0j8ZeP1HDPDTHzzRIdWxHjKy82N74miDUcO",
                                  shop_id="948773a6-ae75-4949-97d6-b2718a61833c",
                                  lower_limit_amount=3549,
                                  upper_limit_amount=2078,
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_7(self):
        response = client.send(pp.ListBills(
                                  created_from="2017-04-21T06:11:13.000000+09:00",
                                  created_to="2022-12-18T16:25:01.000000+09:00",
                                  shop_name="93kljq1Q8TjukgNdosrcsbqXkWqVhxkWkSbCcQV2KWKaXCJgJ38wW32AKvILX828FihWZQyqSbK0FMXzQI3K0upT8cYYAuEa7VHyo1Pr6ZXG8JSWzel5X6ggilnbIikjMsDtvgyHs8kXaVldBOvstCOu5vNtx3bBib1BS1I",
                                  shop_id="6272f9c9-0408-48a5-9d98-2915c1561fc7",
                                  lower_limit_amount=5847,
                                  upper_limit_amount=708,
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_8(self):
        response = client.send(pp.ListBills(
                                  description="mpTYqNNFPcbcfJ8JMK49acleVRspcldtQ5tmURvImdniels4ZrQj5",
                                  created_from="2022-08-09T13:54:34.000000+09:00",
                                  created_to="2017-05-06T05:18:03.000000+09:00",
                                  shop_name="fJFTwwcn9WP3m8VyuReCXx5WTYs7Yv5KDLwBcz7zjgazophuiC1VR8XiXW8JGdOuAk94khcXRAwlFr4tlYuwMI02c6YHU8uGe8qGNvTmA6H2tH06f3cpkGDNNhHR4jcwCrCw",
                                  shop_id="ae4a9f70-fa3e-4f8f-96ec-d3709e06d89b",
                                  lower_limit_amount=8058,
                                  upper_limit_amount=2251,
                                  is_disabled=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_9(self):
        response = client.send(pp.ListBills(
                                  organization_code="404Hb--O42M",
                                  description="uvrmGGKjRYVWTh4n3trK0bvzHyQJ1u0mKrSXl5b4zkBhHXIiOwN14umNbs9HzTMzg2AFGgoFwChMKyFjnp6NWuVTvukHEJJxjvwAaSkrlPscgFZA7kgmnQGh0g7xEy0gjIfqsy3qqeO2uL3gmJXocI00jDfhi",
                                  created_from="2023-06-15T17:06:17.000000+09:00",
                                  created_to="2023-05-29T14:48:38.000000+09:00",
                                  shop_name="YKzlD45lOs5FqPThDPFGAn6g717B9KAWVHYRkMJaQT0YWfQtgxVhq9RVZQG6j5A2pjVon4uuDqic8AnsoXtmv8LerXQe8LjF8Q6qvpD5ZbBwXFvQ1skGDixXFJczCMVyjlRecAjobCopZKVFLb9UiV0XEmtc9iB2syyuELfawMoOZtkTktpas3rTKhS7CSUreJUtTC5W6xtdNcZmGzg6LOAwdB03Wi69g5bppku3R9lJ",
                                  shop_id="a4e25bd6-be64-40c4-a1be-1ed5eaa685a2",
                                  lower_limit_amount=9117,
                                  upper_limit_amount=8053,
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_10(self):
        response = client.send(pp.ListBills(
                                  private_money_id="716cc767-18cb-4049-b7f5-b82c3175b4f8",
                                  organization_code="-ysR--VE0l4w7-6-Wyr-iTkm9kUT0GB",
                                  description="Z8O9N2SLzG35Urh2rbZx2aArvrKFEW0caD1nqOzKQjZCyx1E",
                                  created_from="2021-09-15T09:27:20.000000+09:00",
                                  created_to="2019-06-27T17:44:43.000000+09:00",
                                  shop_name="AmGgvgI7YgVKC9RfQiSpTWZrd0hVSBtTuiSKN3fmfJoVUvvyWz4acD4YN59s59xIWGujcTxFFrrXyLyMOsteVH8YLvoUoraY",
                                  shop_id="28ed2a08-e8f9-4ed6-9ffe-24291ea30b55",
                                  lower_limit_amount=6511,
                                  upper_limit_amount=4296,
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_11(self):
        response = client.send(pp.ListBills(
                                  bill_id="Sd144X",
                                  private_money_id="e78721b7-4691-46da-8571-73a2a1c7c8b8",
                                  organization_code="31-Uf7-6-z-zknx92q-1x",
                                  description="sz1ogogHitDMic7XGDhIwoiIw8buBfBCDG7j4DoWkp",
                                  created_from="2024-05-07T23:27:04.000000+09:00",
                                  created_to="2025-03-31T00:14:26.000000+09:00",
                                  shop_name="bqBi9TROGFtlR9rLj2Y1ER9gKdUSrcKHlFd3Ur1MCMIUROIYftW7QMsIbzCAj1GsSvfXjxUW5P",
                                  shop_id="42dc7102-d24d-40e4-96c4-a4f5a3dbec42",
                                  lower_limit_amount=2291,
                                  upper_limit_amount=3021,
                                  is_disabled=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_12(self):
        response = client.send(pp.ListBills(
                                  per_page=7335,
                                  bill_id="4",
                                  private_money_id="676cfe50-fbd4-45e6-9ddd-57bbebbd2038",
                                  organization_code="-1J46-L17Hqg--PKp90",
                                  description="eqlmfnAfu7erS3gFr3FTdQ8rwckpkfwdxwxZ95sfTG55oAI4VCG4sTwcYeFwcP7ZmLygXYRtjxN2aIco6xNkWo0aYr1y1KHCmQGL0IM3EaCDd87kJG01a7",
                                  created_from="2019-03-10T19:56:29.000000+09:00",
                                  created_to="2024-05-06T13:46:18.000000+09:00",
                                  shop_name="GOWj7LV4",
                                  shop_id="4755ab3c-64f6-4635-bdaa-a7a57e89da79",
                                  lower_limit_amount=6767,
                                  upper_limit_amount=9588,
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_13(self):
        response = client.send(pp.ListBills(
                                  page=9150,
                                  per_page=5993,
                                  bill_id="j2v",
                                  private_money_id="2a50f1eb-066a-4d69-ab5c-a493546c70a6",
                                  organization_code="81m-q--4s8Omc8L08V3--9",
                                  description="4Wo0L4evFZLjpsodOQD43fZ5T5bk20dIuBp2e25agSXyEGickpeze5Yn7vyzhltNB5edjt157B8n6abEccTMUOFUG9Fme9wlEEj2gZC8ckmFOzWRdKb11QTIHM0x5oJQ4O2Nwel4rHJTDGFvqXggC9Tcy7ogKmUw0VnsFyzfyt6Bg95FB1a7IFTBkW9tPubyeqITUoc5",
                                  created_from="2023-07-02T11:25:11.000000+09:00",
                                  created_to="2015-11-08T17:04:41.000000+09:00",
                                  shop_name="HWI6lY3NxA2Qq6LVyn2dOGJj5BoyL1MgjctfisLuYo4aorOwFrhmbs26EDkzDLnAr7NHvMDZLOk3Kn6N9IKA2DQ0UDl0RkGXqQRpkGArTGUPugetKJLdESdgB4DMlPhuAgx6J23S5a4KJH2dJnXO",
                                  shop_id="6abb6696-1d0c-4d3e-a5c1-3ca99e0575ac",
                                  lower_limit_amount=8697,
                                  upper_limit_amount=5048,
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_bill_0(self):
        response = client.send(pp.CreateBill(
                                  "99dcacd9-5096-4d5d-a76d-7d532be62f04",
                                  "86feaa53-d0d7-461e-aee4-902ed59606a4"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_bill_1(self):
        response = client.send(pp.CreateBill(
                                  "99dcacd9-5096-4d5d-a76d-7d532be62f04",
                                  "86feaa53-d0d7-461e-aee4-902ed59606a4",
                                  description="nFdHza9f0TF30iljDxgSpyfoekUtYXnQ6dyRqDXbojqilSXXfgL13rI"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_bill_2(self):
        response = client.send(pp.CreateBill(
                                  "99dcacd9-5096-4d5d-a76d-7d532be62f04",
                                  "86feaa53-d0d7-461e-aee4-902ed59606a4",
                                  amount=1850.0,
                                  description="1kMYSkzLYWcqyBEPqq6jXo"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_bill_0(self):
        response = client.send(pp.UpdateBill(
                                  "011b504d-9950-476f-89b5-74640faf5c82"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_bill_1(self):
        response = client.send(pp.UpdateBill(
                                  "011b504d-9950-476f-89b5-74640faf5c82",
                                  is_disabled=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_bill_2(self):
        response = client.send(pp.UpdateBill(
                                  "011b504d-9950-476f-89b5-74640faf5c82",
                                  description="tAEAC8MN1MIRbysguh0xXqdkQK8VGfHRzulBqoPAVuBC2EUluqb81O3ZagKE8LcCa8bz2nHShe5EoHVudmx1iMacSt3whWHQ5cbR62Eyf",
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_bill_3(self):
        response = client.send(pp.UpdateBill(
                                  "011b504d-9950-476f-89b5-74640faf5c82",
                                  amount=2605.0,
                                  description="yRxoXmZ8au8D4esSHy55WYfHfvN0QEBe9OUmuQoNyAxdhT65YfaNVM2xjqlPxxy8RqwFWTQ1hvVt9bN2zIxNZx4eE9mHPjq6XCvYjxbcuNA5AOQHru6gAXocPu4UpOUbFxl1xg8SX1voG8Gydqo4fQ7D47J36mgyKf2pL",
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_0(self):
        response = client.send(pp.CreateCheck(
                                  "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
                                  money_amount=6406.0
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_1(self):
        response = client.send(pp.CreateCheck(
                                  "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
                                  money_amount=7560.0,
                                  description="6TYPgxIzfeirgwWnuJKugM3OQh2JHBnxbiEM0oFGnnvKX9mW4mLe"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_2(self):
        response = client.send(pp.CreateCheck(
                                  "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
                                  money_amount=8205.0,
                                  is_onetime=True,
                                  description="HweV"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_3(self):
        response = client.send(pp.CreateCheck(
                                  "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
                                  money_amount=2950.0,
                                  usage_limit=4601,
                                  is_onetime=False,
                                  description="DqMFurm2HyY5rxBRsFTyEvnewbYd4rNZJsCq7m7arw2NKYH12xHXaAOFqIwxrvxkxwVYBDQiRCyVTR3czNdwQ9LziqjK5MdQ1lZMyARXVB9A32ESqVUKE1GN9JqLEvyRdA5j20ws4Z1pnjZ8xWKeN3WKGyHXCKD"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_4(self):
        response = client.send(pp.CreateCheck(
                                  "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
                                  money_amount=9233.0,
                                  expires_at="2024-08-13T01:01:15.000000+09:00",
                                  usage_limit=8368,
                                  is_onetime=False,
                                  description="9olxtCG8sS34enFyHhIbteE1tQOMttUhD0OiwEvovxL7L6kZ3KaNub1zwaCdHgj8ik3dmsSURUNaSg6OcHEmOeQFO3Ox8qDzS"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_5(self):
        response = client.send(pp.CreateCheck(
                                  "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
                                  money_amount=721.0,
                                  point_expires_at="2023-06-18T12:50:23.000000+09:00",
                                  expires_at="2022-06-13T19:26:25.000000+09:00",
                                  usage_limit=7698,
                                  is_onetime=True,
                                  description="NC6SfrLsEgbwDrafzykU4qQWw"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_6(self):
        response = client.send(pp.CreateCheck(
                                  "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
                                  money_amount=7086.0,
                                  point_expires_in_days=9379,
                                  point_expires_at="2018-12-03T12:37:48.000000+09:00",
                                  expires_at="2024-08-24T00:57:08.000000+09:00",
                                  usage_limit=1768,
                                  is_onetime=True,
                                  description="7JkqQ2DDr8e6Qf8fK7SBxethCuCr4dBSWzD3agMTAvZtCmtviHLHOBHoLHZ5Hyso5u9Osjia9h3ovwp1QqOYhJfTJv94bnDyHKg7jf7TRBDusrb62imeaN035TYhQYVT6897JBIT98Ea3vOiHnJbC3RzxMsG"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_7(self):
        response = client.send(pp.CreateCheck(
                                  "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
                                  money_amount=5780.0,
                                  bear_point_account="c1af4784-46d4-4052-9fd1-04a3fa8985d6",
                                  point_expires_in_days=6945,
                                  point_expires_at="2023-07-25T12:28:26.000000+09:00",
                                  expires_at="2016-06-03T17:04:55.000000+09:00",
                                  usage_limit=7755,
                                  is_onetime=True,
                                  description="fr7wcTIqfZGa8VmM7LxaafZsEiZ4h1kUtLESZUqCMHUv6WI9WlLqAjFFVtovIA3w7if4YoZJ6xmZ8N4p4uCNZaugRp11iMcrfILoN8ZP7287JaoYb8spv1FcaYx8c7c37K2BoQEomxqdvzxKVxdoit0nsRd"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_8(self):
        response = client.send(pp.CreateCheck(
                                  "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
                                  money_amount=7999.0,
                                  point_amount=6753.0
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_9(self):
        response = client.send(pp.CreateCheck(
                                  "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
                                  money_amount=8837.0,
                                  point_amount=7734.0,
                                  description="9IRy95uKnYj6aDVb3qDkr4z"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_10(self):
        response = client.send(pp.CreateCheck(
                                  "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
                                  money_amount=2007.0,
                                  point_amount=5825.0,
                                  is_onetime=False,
                                  description="7t4NS9wkdOXwioDpfXuzoNbRpuKefj9znX2XonFzQcO5QEOmdgUm73I2kFchNQksZB6ByT3lVRQ7O823WFeXCsADfveWv5SetJLuZcB6tdcwibyPvTHbjOWbqqVGNOP2f7Fmc6XSXXM3Y5XPxnjFhfkfYgvABxRhj"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_11(self):
        response = client.send(pp.CreateCheck(
                                  "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
                                  money_amount=9899.0,
                                  point_amount=9349.0,
                                  usage_limit=8408,
                                  is_onetime=False,
                                  description="6F6onhtgkbe1I3fnSrAjiMpnuQgQNZWqLAFAWqZBqyjs43AAjNChMERBnJER6lOBQBwAgsTow2Z3Uka1wds9TY9Bp5VDJiBPB1XeTNJcIKtWyeNc1zzlxW2hgOK8NI225RAsUHuuLFS"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_12(self):
        response = client.send(pp.CreateCheck(
                                  "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
                                  money_amount=9908.0,
                                  point_amount=8704.0,
                                  expires_at="2019-04-26T10:28:52.000000+09:00",
                                  usage_limit=8888,
                                  is_onetime=True,
                                  description="hKD"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_13(self):
        response = client.send(pp.CreateCheck(
                                  "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
                                  money_amount=2375.0,
                                  point_amount=1634.0,
                                  point_expires_at="2019-01-28T23:19:44.000000+09:00",
                                  expires_at="2017-04-01T10:05:47.000000+09:00",
                                  usage_limit=8306,
                                  is_onetime=True,
                                  description="6zxkmTZedVWeLbSdWlORFkWxf1fgII7vrhxHZrOEIH6HNdDlfIrfFFwUdXhpSi4j72IcAxs47XeIzYlwiQaQGyn4Age91Y1cWNDBnv9RrzZK5kL8kuH9QZjAoA9Wjz3xWF4fJVtnG3Avmta"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_14(self):
        response = client.send(pp.CreateCheck(
                                  "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
                                  money_amount=59.0,
                                  point_amount=6448.0,
                                  point_expires_in_days=3901,
                                  point_expires_at="2019-05-31T03:19:07.000000+09:00",
                                  expires_at="2023-03-07T18:36:03.000000+09:00",
                                  usage_limit=3273,
                                  is_onetime=True,
                                  description="gud6F1UgGMHbk2IRflsvwuZxk0nQmXMvg0Fc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_15(self):
        response = client.send(pp.CreateCheck(
                                  "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
                                  money_amount=5589.0,
                                  point_amount=4338.0,
                                  bear_point_account="a334af1a-2e28-4ac2-9f0d-d5c86ad58a8e",
                                  point_expires_in_days=1744,
                                  point_expires_at="2024-08-25T06:38:19.000000+09:00",
                                  expires_at="2023-11-25T04:31:05.000000+09:00",
                                  usage_limit=9411,
                                  is_onetime=False,
                                  description="s46hfsRF0YKxTClCMK7WZ9OzNLNkjfoAuPSksHUuefNAm0yTlB8Y7jnhE6v0ICVfZpB32LWZFMYYNQ77hNnDgeQkP6BrHNLW2TjgwJkClYsxYjLV6mNckmXWb6cDTOBEvT1fZYocBrtgwRLixenA1GWqf2JPqamqpbbuSj1PURjYRasH9AR"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_16(self):
        response = client.send(pp.CreateCheck(
                                  "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
                                  point_amount=653.0
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_17(self):
        response = client.send(pp.CreateCheck(
                                  "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
                                  point_amount=5893.0,
                                  description="ntTDK9f1O2csoG3F55uy56fVMl4ovKtbbNMLWzz4xf72tklHyikvXSu1xVqKMzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHsxk71k"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_18(self):
        response = client.send(pp.CreateCheck(
                                  "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
                                  point_amount=9193.0,
                                  is_onetime=True,
                                  description="HcZ37iojnk7j2j33qMA4N2evwLBNS7QyCEhtgNDuAnxydB9u3o7ZMeTosoRh4S0mExQI1uCwHXvSS9xqXNJM"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_19(self):
        response = client.send(pp.CreateCheck(
                                  "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
                                  point_amount=6236.0,
                                  usage_limit=1020,
                                  is_onetime=False,
                                  description="qv2rRxx8SeYgA5RTAZIE0d3whSKLF4xWXCgQOdSsQVPrApoltrzZbMjGbqCaDUv1CsWTy6z2FdXbfXavW2HwaVVWGcOvRgfjTir1eeHpnGAvFN5uVHKI7mM3plgJR5fwzKIFQcpGZZVlRU03Fa2F6"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_20(self):
        response = client.send(pp.CreateCheck(
                                  "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
                                  point_amount=6692.0,
                                  expires_at="2024-02-12T12:16:30.000000+09:00",
                                  usage_limit=7484,
                                  is_onetime=False,
                                  description="pGrOCijX4VQZjHwhb9lV9sTjbq8Wo22UU1er3T1gBtfr20CiDsCwyLdW5AzEeQbE5VhNxjrtNh84WLuHKWoYQpDLtJyiWbDVy6Ss7attO0KDvZ2PuoFKU33PYYZTEIyRndmm72c2"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_21(self):
        response = client.send(pp.CreateCheck(
                                  "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
                                  point_amount=9270.0,
                                  point_expires_at="2018-07-24T11:01:23.000000+09:00",
                                  expires_at="2017-09-13T10:22:26.000000+09:00",
                                  usage_limit=4324,
                                  is_onetime=True,
                                  description="6B3OB7swghUIdkqUOY2HAI87h7tC8vMnTzjNmFWDzLZEPN7HQXwymFrbXYvN3cal4RO9jT63dRDxKNVoewLoaJggIMA5wXB3CTdPu3I6Gb57N6Bfk723xgVJhWc2FLmu9RV4wTQ1"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_22(self):
        response = client.send(pp.CreateCheck(
                                  "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
                                  point_amount=8165.0,
                                  point_expires_in_days=3911,
                                  point_expires_at="2017-07-19T23:16:18.000000+09:00",
                                  expires_at="2023-11-29T12:55:51.000000+09:00",
                                  usage_limit=109,
                                  is_onetime=False,
                                  description="6KgKFTgUMIqeaKPydQtxKkP"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_23(self):
        response = client.send(pp.CreateCheck(
                                  "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
                                  point_amount=320.0,
                                  bear_point_account="4533aa8a-86c5-4415-bea8-1969ccba28df",
                                  point_expires_in_days=3002,
                                  point_expires_at="2021-06-16T18:57:59.000000+09:00",
                                  expires_at="2025-02-10T15:11:10.000000+09:00",
                                  usage_limit=1661,
                                  is_onetime=False,
                                  description="2D07ZJtROtnJyz65lsPnpU0js5rsIZ4cWpER3UtPkG2eq1I6SZr9Xo8DUROCVDxPSk72x92MmliF75MFhbZKuKGU7dTPisUgKnCVzFujd5tp1lylHobnm6HycWppeOG5c4bSq"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_cpm_token_0(self):
        response = client.send(pp.GetCpmToken(
                                  "VBGp3Ank6BTTvgxHzzgdLI"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_0(self):
        response = client.send(pp.ListTransactions(
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_1(self):
        response = client.send(pp.ListTransactions(
                                  description="gPMdYrCUsTg7mFBD5JyTl3OSbQF6o9LFFmkiVCdqahnf"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_2(self):
        response = client.send(pp.ListTransactions(
                                  types=[],
                                  description="R9DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasCH56gnyuHFpFsNPJmzuH1GHYOOmiUvKwyiQYSSoPK3N5ZGrmU0unMptspEioBBqGcJLaXcepDTPRHElLNQrvWUnk17KWAioiFIGH7s"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_3(self):
        response = client.send(pp.ListTransactions(
                                  is_modified=True,
                                  types=["topup", "payment"],
                                  description="5S2r82nr4"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_4(self):
        response = client.send(pp.ListTransactions(
                                  private_money_id="889e4085-0dae-4c43-a83e-3e2dcfa49e8d",
                                  is_modified=True,
                                  types=["payment", "exchange_inflow", "expire", "cashback"],
                                  description="C6IOlQ3ZCa8lZmMT5mAFAIeN7EOzXnRCcbLOsMiN4tjoxBAROpiRc0j39oPNk"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_5(self):
        response = client.send(pp.ListTransactions(
                                  organization_code="fTKPUe1w6KO-cq3kHfugs-gv0j-5-",
                                  private_money_id="9c616828-afa0-48b1-9e9f-37c8022ec883",
                                  is_modified=True,
                                  types=["payment"],
                                  description="wM52367FRSK6ZN3dPGJYhssMJ1c81K9V4uwaN6FqKGuMQEbIhSKLSxcJDAAH0jwIPbMhYlMMXruKsOetb8P3w3wpAlq46MRFhBa1KSFCImukjAtQPb0UOTifX7KrzTtAdse"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_6(self):
        response = client.send(pp.ListTransactions(
                                  transaction_id="51TT",
                                  organization_code="-iLW-Q-",
                                  private_money_id="2214ddc3-4de3-41c8-accd-75e1f5fddc40",
                                  is_modified=True,
                                  types=[],
                                  description="OIiZjdOoQxmayWcgZvBQUAudiHvhALf0xr0YedjAtAhk4Q5ZEYWHc6DIDKem3xaXPio5o0q9x0iUyrfJOMPlYYA9d24g2qlkQeuW1v6Ot04JjRtKJ3Y50yRgOZb7LyYKRMPV8lVcOO1w2GShMQxP1XNaA4tMwkt9CEIs7P52Qn8Ps6rGg4gxhQEPHlDMgzo7RyqyjD"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_7(self):
        response = client.send(pp.ListTransactions(
                                  terminal_id="ff130851-0143-4076-8919-72817621a07b",
                                  transaction_id="LohtP7Y",
                                  organization_code="K--lYK5fg-EsaGa-K21r-d--",
                                  private_money_id="2aa3cb3e-3402-46a1-a5d4-d2acf092321a",
                                  is_modified=True,
                                  types=["exchange_inflow", "topup", "expire", "exchange_outflow", "cashback", "payment"],
                                  description="EZ1qV4Ufa8eDKBhpNX1jWPk8Z43B0y0B9mfs2NjGqIbT9OwqnkaPpwID0e"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_8(self):
        response = client.send(pp.ListTransactions(
                                  customer_name="LyZpFNZ79b",
                                  terminal_id="ef4dd3df-08f5-413c-b380-c9dbf36f898b",
                                  transaction_id="5",
                                  organization_code="----Q3I6AC--de064H-xR-ip39p",
                                  private_money_id="a8f139c5-42da-42af-8d7f-e5250fb628c6",
                                  is_modified=False,
                                  types=["topup", "expire"],
                                  description="16I7iXigWOnUAkBWGfv1h3SdKWf7Mk6qxlTgasH1"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_9(self):
        response = client.send(pp.ListTransactions(
                                  customer_id="52845131-cd8d-44da-95fc-9793404d60e1",
                                  customer_name="Wwt0KCw4FDQO05qLTqGDbzQDuaFv4VsaDUMga8HPHLfj8VAxLQCn6DppPY7uZKs5wMf3MBYDCuFCMBOgtd28MFakoJp4sttlPyu0hLTf3LV1FvqM27O2bqybT3XFSWXNEvBDebROkI568yn3vAdg2WzE6cQfJbdKVhYmdIeaGtyZiVBFtaHsVEu5jHLt1IIKsQ450xUM6O5hfI4vi32RsgmtpDzruBR2bpCJbWCsF",
                                  terminal_id="eb701a31-5958-444f-86cd-02f7c81c4c1e",
                                  transaction_id="bCbRi8M",
                                  organization_code="4T-9Hu-9WU487tN-3",
                                  private_money_id="a3e101fb-a33d-40fe-b494-31d6ffea551c",
                                  is_modified=False,
                                  types=["expire", "cashback", "payment"],
                                  description="2tI5N4bIOpNtWwRJ7taFGOOZNR9womkOYYXss1h0acoAUmABE9DWtANH45sfx8Sg9q1O62IQSAJ63xgskw6yfFQPcXHRn98CcSXK5Zlq5PBZ9vRV0xbdBDEvd"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_10(self):
        response = client.send(pp.ListTransactions(
                                  shop_id="da583a28-d396-41fa-89c8-e914fc2c9aae",
                                  customer_id="3167022e-94d3-45bb-b581-a4cbe2becbab",
                                  customer_name="84n4B4JwtxMbsrynFzleqVzZvPQrwaZ5xfzumz05DAlrcpNez8TuusjLCXuqGq9aXt2RyxOmHZB8Yd9TYL0bkCAVqSRIdac4BtBwC2bbOKrqEvtHSmLf6gZqSXb2Lr55RtyiRtGJ1HUxolj1KPz6vAaVd6Sg4zOt2LPb0nLBvCfu5QWsdUnRrH9KHVuXFGKt4lw9lRVMCA",
                                  terminal_id="aff597e8-7349-4c16-b8f7-1d08a8caabe5",
                                  transaction_id="f4mhVFw56",
                                  organization_code="X-ht--D-8v77zAmT71--GS-Sh23-x-",
                                  private_money_id="2e41e3ce-0b8e-45dc-975e-5a9f80c6650e",
                                  is_modified=False,
                                  types=["payment", "expire", "exchange_outflow", "exchange_inflow", "cashback", "topup"],
                                  description="mOaSDg31Umvi1k0xZepHVlU5UCBk1mC260SZIPf7lUxpBEwOCUnBV1wl8i3xQfqNGTjhBSpAIG2GVjRLCF7S26ypTzMExe5LQXN3tfMMeaiTEdRlgPRLO6iu4xB9p9"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_11(self):
        response = client.send(pp.ListTransactions(
                                  per_page=9833,
                                  shop_id="893ca648-9656-4126-85ea-7bf53a455b12",
                                  customer_id="b4242a8f-eb46-468b-b305-a61104f9a6eb",
                                  customer_name="UixLpvflY8MFYZJvlfPZ9XRs2DjUex8FZcru468uiy2IBQsKNbECUonyUv3nTPZ701h3V5Qywi2pn04JUSx2",
                                  terminal_id="d1f39f2a-b092-4002-a45f-bc20449d9481",
                                  transaction_id="eVHz2wOx",
                                  organization_code="2mo7-c--6k-6HA3IhSPF--Ue-xT-4af",
                                  private_money_id="89d58316-8711-4ff4-9ad8-f03910cfe9b7",
                                  is_modified=False,
                                  types=["payment", "topup", "exchange_outflow", "expire"],
                                  description="SO8H2DCl6imPJgn2XjYsZUpQvLebh65Hdtxmvs4SwxRthVVayjO1th3s3e6fayZ2E32vm3RMvvWttu1PJb3d04IfskzbRh2KXDkJqy1UyPaGHVkyMSdmemZcovbEUc9TiM3DTSa7pJlo8JS"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_12(self):
        response = client.send(pp.ListTransactions(
                                  page=5431,
                                  per_page=7439,
                                  shop_id="41381a92-6ba6-4e14-abed-0c0585582ec9",
                                  customer_id="8e3cadd6-2be6-4bc3-84ec-a97fc9a648df",
                                  customer_name="8O6XTpGUPEJOaNnRanlNyuKHWuXq7zEzVgAAIhzrVmMQ7zQf4j1Xlnx61iQEXBdwXQXBx9CjvSgZke3VuPIIBeUSxLQqoj9SXP9EgDJcoagTJNb42JvVKNsj3zA7Dw0uibv",
                                  terminal_id="2e906136-e590-46be-8f30-c81a4f25116e",
                                  transaction_id="aLFwVLI",
                                  organization_code="-d4---1DT-q-j3E-2-2vc3u-SL",
                                  private_money_id="fb6afb43-dcc1-4434-a535-d87cfb9da6b8",
                                  is_modified=False,
                                  types=["payment", "exchange_outflow", "expire"],
                                  description="0xNjD1g6ausYOsWjmgSVes0LvRpIOKLgAa2m76DTKceEBbKe1QbzWrTYvHigdBYvKVDd"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_13(self):
        response = client.send(pp.ListTransactions(
                                  to="2020-11-17T13:21:59.000000+09:00",
                                  page=1829,
                                  per_page=1879,
                                  shop_id="9a784064-d673-47ae-88c4-6c21bce9089c",
                                  customer_id="42a65923-5789-4806-99b1-ce48e372a261",
                                  customer_name="rFGRZ0Q28L",
                                  terminal_id="ed1c8790-2e79-4ef7-9a8d-b3d6c7e79e47",
                                  transaction_id="z2sIRx",
                                  organization_code="B0za8tu8TiZH341O",
                                  private_money_id="65771283-7b8b-4f8d-a2e0-bcd0b6d3fb16",
                                  is_modified=False,
                                  types=["exchange_outflow", "expire"],
                                  description="irLmp7HiQajpl09d6QIiaL5c40GPi4ivBi3eJhDgAiQ5"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_14(self):
        response = client.send(pp.ListTransactions(
                                  from="2019-01-09T04:25:26.000000+09:00",
                                  to="2025-07-22T16:47:29.000000+09:00",
                                  page=7288,
                                  per_page=959,
                                  shop_id="3334017d-b35f-4586-a3c5-137d95302a29",
                                  customer_id="da76d485-3f0d-4766-9094-9a11464fb66d",
                                  customer_name="yakwCi2K41MKrJ8u3JtJHw13BJLqURa9CDG8z1r52NxmvSo3IMgKOG9RqgqLtsxscDVj4qDxwlIsjYdDsgNzWfMVYN8tFORiCKaN1GSBkTmsnETZgON7wI25XD4LDGgtc1eHQx1a38fcy9G2ru7CIugZBUKc64A",
                                  terminal_id="777f1cb8-c588-4fa3-8b86-315ef58efeae",
                                  transaction_id="FHDE0",
                                  organization_code="FmL9wT--116J-i9-wg-z-3",
                                  private_money_id="c3f6c7db-749b-4fbc-a543-b1dc3b764f28",
                                  is_modified=False,
                                  types=["cashback", "exchange_inflow", "exchange_outflow", "expire"],
                                  description="19XaUt7HUg2vBtQ3icUlEOMImvGy37aG3VpRlqKVbLVJ59qzi8HFxZtC5ypm8TU2Y6m10oazOnSDRVBADkHpYoJtK8deELoxPb8vCqW8ZrqfNGAkbzmAIScfq8J"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transaction_0(self):
        response = client.send(pp.CreateTransaction(
                                  "4c465e88-d17e-4002-a4e2-477788aff273",
                                  "1c28c6a2-9817-43a9-956a-238e90da7f9f",
                                  "962b71c0-75c6-401f-a872-db3acf509f2d"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transaction_1(self):
        response = client.send(pp.CreateTransaction(
                                  "4c465e88-d17e-4002-a4e2-477788aff273",
                                  "1c28c6a2-9817-43a9-956a-238e90da7f9f",
                                  "962b71c0-75c6-401f-a872-db3acf509f2d",
                                  description="NwoEyag2SfuJiolnAr0O5BazmKqHUlvI3TLRDU2wR06BrqE4xR4G"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transaction_2(self):
        response = client.send(pp.CreateTransaction(
                                  "4c465e88-d17e-4002-a4e2-477788aff273",
                                  "1c28c6a2-9817-43a9-956a-238e90da7f9f",
                                  "962b71c0-75c6-401f-a872-db3acf509f2d",
                                  point_expires_at="2023-08-29T17:28:41.000000+09:00",
                                  description="B6QEvmEtQTqfIDfhF08aWAgYKgMRg4eijui0x4AzukqXii06wz9NdLnaFp0"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transaction_3(self):
        response = client.send(pp.CreateTransaction(
                                  "4c465e88-d17e-4002-a4e2-477788aff273",
                                  "1c28c6a2-9817-43a9-956a-238e90da7f9f",
                                  "962b71c0-75c6-401f-a872-db3acf509f2d",
                                  point_amount=3812,
                                  point_expires_at="2021-03-01T15:33:42.000000+09:00",
                                  description="ZXWwwPUfmYGEVrOM4dkj0diMGxwkBMFBNKhTrrGkGVnz7dW1L5JRcqWGZoB7J2SLBuVTFPFKYeglUQAESlFenRvUgW2C0Pk55puUaBmR66mDvQf3SzEAz6sFhOXUyleHUBygYLLJFfbbjn"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transaction_4(self):
        response = client.send(pp.CreateTransaction(
                                  "4c465e88-d17e-4002-a4e2-477788aff273",
                                  "1c28c6a2-9817-43a9-956a-238e90da7f9f",
                                  "962b71c0-75c6-401f-a872-db3acf509f2d",
                                  money_amount=2767,
                                  point_amount=7938,
                                  point_expires_at="2019-12-07T07:28:16.000000+09:00",
                                  description="1Ii4QyBabDj1sJ7k6dP6L13ja9VovumOjMgFfs83kBzSot4H9G2QRAYPymeRfFOHsPVjb9UCbPcYx5YXiYOW0oa5SUOR88F7Ubd6EIlmfbIWBjq"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_0(self):
        response = client.send(pp.ListTransactionsV2(
                                  "3b7ec431-ccbe-4203-ac3c-d168bb673b22"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_1(self):
        response = client.send(pp.ListTransactionsV2(
                                  "3b7ec431-ccbe-4203-ac3c-d168bb673b22",
                                  per_page=766
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_2(self):
        response = client.send(pp.ListTransactionsV2(
                                  "3b7ec431-ccbe-4203-ac3c-d168bb673b22",
                                  prev_page_cursor_id="f23dfb3c-d41c-41b3-9ee1-ee815b6ab0cd",
                                  per_page=52
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_3(self):
        response = client.send(pp.ListTransactionsV2(
                                  "3b7ec431-ccbe-4203-ac3c-d168bb673b22",
                                  next_page_cursor_id="ba561d3f-444d-41c6-ac0b-5153fdaa47ee",
                                  prev_page_cursor_id="1417e536-7921-4c5a-a239-539d82972cfe",
                                  per_page=48
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_4(self):
        response = client.send(pp.ListTransactionsV2(
                                  "3b7ec431-ccbe-4203-ac3c-d168bb673b22",
                                  to="2019-08-06T13:05:49.000000+09:00",
                                  next_page_cursor_id="1f35db70-8630-4b3a-a40b-705924be95c1",
                                  prev_page_cursor_id="2d3588c9-2d77-46cb-907f-0a1ed3f4776e",
                                  per_page=750
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_5(self):
        response = client.send(pp.ListTransactionsV2(
                                  "3b7ec431-ccbe-4203-ac3c-d168bb673b22",
                                  from="2018-11-07T10:47:46.000000+09:00",
                                  to="2017-10-31T01:07:34.000000+09:00",
                                  next_page_cursor_id="372e71c8-ca69-400e-af8c-541e6d4b754b",
                                  prev_page_cursor_id="b23030ba-eb37-4eb7-b5a0-86c6c0c4db55",
                                  per_page=491
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_6(self):
        response = client.send(pp.ListTransactionsV2(
                                  "3b7ec431-ccbe-4203-ac3c-d168bb673b22",
                                  types=["exchange_outflow", "topup", "exchange_inflow"],
                                  from="2020-05-24T17:36:21.000000+09:00",
                                  to="2016-12-31T01:05:13.000000+09:00",
                                  next_page_cursor_id="8fbf65c6-e8ad-4e55-8cc0-81486cdcb5c3",
                                  prev_page_cursor_id="d3d03f11-76b5-4997-be78-6e2326c6801a",
                                  per_page=384
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_7(self):
        response = client.send(pp.ListTransactionsV2(
                                  "3b7ec431-ccbe-4203-ac3c-d168bb673b22",
                                  is_modified=True,
                                  types=["cashback"],
                                  from="2020-07-27T22:15:44.000000+09:00",
                                  to="2018-04-20T03:35:35.000000+09:00",
                                  next_page_cursor_id="2ee0ef4b-347a-40bb-8545-5e46d1ce1e72",
                                  prev_page_cursor_id="8b340176-3230-4a84-86f0-96b569f2b4d6",
                                  per_page=68
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_8(self):
        response = client.send(pp.ListTransactionsV2(
                                  "3b7ec431-ccbe-4203-ac3c-d168bb673b22",
                                  transaction_id="2XFSxI",
                                  is_modified=False,
                                  types=[],
                                  from="2018-10-22T21:26:40.000000+09:00",
                                  to="2020-05-23T08:19:55.000000+09:00",
                                  next_page_cursor_id="294d4197-8c63-4d36-b6db-313371b196bc",
                                  prev_page_cursor_id="36ef5f0e-8275-4b9c-b95a-021040631461",
                                  per_page=551
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_9(self):
        response = client.send(pp.ListTransactionsV2(
                                  "3b7ec431-ccbe-4203-ac3c-d168bb673b22",
                                  description="EMZ2Ju8UbXHSU9E0Qlg3gebvAwjzG8UYapgA4DXNtjsg9PgQkXqYPn4dGIxCAVXu8wPFdMI0g8RX9GwTm1EaeDH0runisLVA8D7RtvLwRN8QmXijHIyMGxrgTxrmP2c2b7AqdqrRaU4tsNqOUthYSxSa5qYfKcdpEzIZoGgQ8JT7nM2XSRS8qzeJVaYua2WPHw1U",
                                  transaction_id="jf1qu",
                                  is_modified=True,
                                  types=["payment", "exchange_outflow"],
                                  from="2023-04-19T18:37:40.000000+09:00",
                                  to="2021-12-24T19:59:15.000000+09:00",
                                  next_page_cursor_id="574cb36e-e328-4aa0-874b-7db30643aa33",
                                  prev_page_cursor_id="90d0d627-fe16-412a-a6db-2459e0bf26b2",
                                  per_page=138
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_10(self):
        response = client.send(pp.ListTransactionsV2(
                                  "3b7ec431-ccbe-4203-ac3c-d168bb673b22",
                                  customer_name="PKkmh",
                                  description="gdj",
                                  transaction_id="1RbwEd",
                                  is_modified=True,
                                  types=["payment", "cashback", "exchange_outflow", "topup"],
                                  from="2016-12-18T19:10:28.000000+09:00",
                                  to="2017-03-01T22:29:46.000000+09:00",
                                  next_page_cursor_id="faa5b900-9944-428f-9a2a-b745b058a667",
                                  prev_page_cursor_id="de760078-73fb-4ab5-8577-64070047582e",
                                  per_page=198
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_11(self):
        response = client.send(pp.ListTransactionsV2(
                                  "3b7ec431-ccbe-4203-ac3c-d168bb673b22",
                                  customer_id="207a091b-4c99-45dc-aa92-fdd4633ab088",
                                  customer_name="OvQdZofRUOUAciXVcpzKCMcrOD6Emk2wkp2iXzqZDQWG9JIPYO9QhKjYAAaWngq9PQfQxKRvEszf3mWAEHwNafuFelOU7xCAyi0eUz4xXH5OLhVoB1lIuiOfxpiSD0ualUMr1aiXbRr0Yt6Ont0eqhymEV4KDx3FmD9kbbli1vOnH69EFivIjA",
                                  description="6JEHCCuKlnfNVTWFTkh4YZxFDhr8QjYlB42",
                                  transaction_id="AhylpmFO",
                                  is_modified=True,
                                  types=["exchange_inflow", "payment"],
                                  from="2019-12-01T08:09:28.000000+09:00",
                                  to="2016-04-16T09:54:49.000000+09:00",
                                  next_page_cursor_id="18247ec2-021f-45da-a472-d81e19d13e67",
                                  prev_page_cursor_id="4861db91-7698-4d9d-a8b9-d21c6724cbb8",
                                  per_page=148
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_12(self):
        response = client.send(pp.ListTransactionsV2(
                                  "3b7ec431-ccbe-4203-ac3c-d168bb673b22",
                                  terminal_id="5722f1a9-4ffd-4bd2-a33e-5973cb3e846c",
                                  customer_id="3d5dd7c4-31bb-4724-845f-efc227a88a14",
                                  customer_name="oJSIFUrTRne91u8KmONYXCce6NgXmM6SU8mT9N7YdoyhvIOK96oQgvpt3OE4bGWfPwqWxwC3DU0ZYNIFrYHkTuOzrywGRNkAeSHinr7X7r9y8K62vZdczx",
                                  description="zKDF7OzztIRdIBCYTSHrtKwDRbFJx9qY9kB8kVDqJ",
                                  transaction_id="Mjy6rf",
                                  is_modified=True,
                                  types=["cashback", "payment", "topup", "exchange_inflow", "exchange_outflow"],
                                  from="2017-01-21T09:05:02.000000+09:00",
                                  to="2022-01-17T10:42:01.000000+09:00",
                                  next_page_cursor_id="8e1f4384-77d5-4ec8-a4a7-cf27063f9dfd",
                                  prev_page_cursor_id="964ee947-fcbd-4659-b963-3336009a1d16",
                                  per_page=354
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_13(self):
        response = client.send(pp.ListTransactionsV2(
                                  "3b7ec431-ccbe-4203-ac3c-d168bb673b22",
                                  shop_id="843efa88-d4f6-493c-b284-bc825b68fc69",
                                  terminal_id="6f87cf5b-6c13-41ee-af05-c451c2e974ed",
                                  customer_id="a2044eef-963b-440b-b37a-73fafcdce77a",
                                  customer_name="7gjncZRjG49ZyE9dB8fCGfTM2Oyolj4kfEe2uvMtiKxUivt9MIJ97msI3tBe6ti0SO07EXHC5hQ61pWDcVyEH0QvPCR5IiYZhX71qxxCDFjWtGssb86D9XZfo8j2fPJCGzVYdohDRxcepsSsdecspEcH6zAIM8ju98Xf3eDqYA5vYg7TRPpd99WNI7yrXSKnnTIb76zTEtm8AaIiuGx9L9HalOMU5vigXX7Icn5jXA5",
                                  description="xJPbbGkUILhTXtRtmknLVk7hQOvzRC9zFhAU2LnJOGL09rrRBaBOdWWGJsxArgIuumMVdl31leH5Dl7ZUH",
                                  transaction_id="zS51rJLdw",
                                  is_modified=True,
                                  types=["exchange_outflow", "payment", "exchange_inflow"],
                                  from="2024-03-05T15:58:13.000000+09:00",
                                  to="2018-03-17T03:28:47.000000+09:00",
                                  next_page_cursor_id="e539eb72-6c30-4c37-b8fc-d9f9fbe44c57",
                                  prev_page_cursor_id="7b7c3c5f-2a95-4ff2-b07a-888a59dfc9fd",
                                  per_page=844
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_14(self):
        response = client.send(pp.ListTransactionsV2(
                                  "3b7ec431-ccbe-4203-ac3c-d168bb673b22",
                                  organization_code="q-CM-uQ--pFfQ---hP",
                                  shop_id="e9a689cc-cf03-47e5-9c89-eff4913535f5",
                                  terminal_id="07884c70-4ae9-45cc-87a2-a14aa537b547",
                                  customer_id="ffbce94b-b298-4c80-9f24-0041baddc988",
                                  customer_name="08kULtDXm7mGq20CccqYOFtqhMLy1fS",
                                  description="rOZfnZ2mwTeB7HbtOFrcDL7mosyloW0gLyNig5qU771SYwG9bLFfHIbs98VpOgmc8pS7WZiumuB2TNJcJGvSmksA1MuW1A79SIV4QucaCTIuwp4PaSBE0QhobjzNQVW3hP0Ve0rN3Em7q1SjNjatjjDZX7RIKgDX3",
                                  transaction_id="9oA",
                                  is_modified=False,
                                  types=["cashback", "payment", "topup"],
                                  from="2023-01-09T07:14:02.000000+09:00",
                                  to="2023-04-23T06:24:20.000000+09:00",
                                  next_page_cursor_id="d07de8a5-468e-4a6b-b069-38f3c04a0430",
                                  prev_page_cursor_id="32e841f1-0879-47b5-8d66-d0c9007e208f",
                                  per_page=137
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_0(self):
        response = client.send(pp.CreateTopupTransaction(
                                  "8e3a5553-8579-4c24-9eef-d74c712447dd",
                                  "d55893f1-9c88-4394-85d1-1bab6d1e9afe",
                                  "ef85eede-82cb-4468-9582-2ccddf764208"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_1(self):
        response = client.send(pp.CreateTopupTransaction(
                                  "8e3a5553-8579-4c24-9eef-d74c712447dd",
                                  "d55893f1-9c88-4394-85d1-1bab6d1e9afe",
                                  "ef85eede-82cb-4468-9582-2ccddf764208",
                                  request_id="6924d76e-d35e-4341-9347-ad42f73d2590"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_2(self):
        response = client.send(pp.CreateTopupTransaction(
                                  "8e3a5553-8579-4c24-9eef-d74c712447dd",
                                  "d55893f1-9c88-4394-85d1-1bab6d1e9afe",
                                  "ef85eede-82cb-4468-9582-2ccddf764208",
                                  metadata="{\"key\":\"value\"}",
                                  request_id="78112281-97f2-444c-8284-68336975e905"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_3(self):
        response = client.send(pp.CreateTopupTransaction(
                                  "8e3a5553-8579-4c24-9eef-d74c712447dd",
                                  "d55893f1-9c88-4394-85d1-1bab6d1e9afe",
                                  "ef85eede-82cb-4468-9582-2ccddf764208",
                                  description="eptreugpuZPDhn3kvKQdinTisU7JGahMN0pspm5VBpWaMfH3OlTb5uoxVylmhf3ESdF0EHZGgpE19g89rUgV81h6fR4XX",
                                  metadata="{\"key\":\"value\"}",
                                  request_id="a152d341-467e-4752-be06-08e5e80c9901"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_4(self):
        response = client.send(pp.CreateTopupTransaction(
                                  "8e3a5553-8579-4c24-9eef-d74c712447dd",
                                  "d55893f1-9c88-4394-85d1-1bab6d1e9afe",
                                  "ef85eede-82cb-4468-9582-2ccddf764208",
                                  point_expires_at="2018-08-02T19:22:22.000000+09:00",
                                  description="SL8MjPf2nDJncUb7prKqWXHoSFTkZLdy8B9WWqNrXVXI1wRTqwqzVsahBGWwps3iARDJTRZkOOEQFC19Wtss23YjQBhHozeYJjV02y90GWowMI3ASCsApxBJptaJJRDQ6YTYkiFEIISprQ3cmpI6bh8YrVsWGSghD",
                                  metadata="{\"key\":\"value\"}",
                                  request_id="996f202b-5d28-4094-835f-0b771d340d31"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_5(self):
        response = client.send(pp.CreateTopupTransaction(
                                  "8e3a5553-8579-4c24-9eef-d74c712447dd",
                                  "d55893f1-9c88-4394-85d1-1bab6d1e9afe",
                                  "ef85eede-82cb-4468-9582-2ccddf764208",
                                  point_amount=6692,
                                  point_expires_at="2016-08-28T09:38:09.000000+09:00",
                                  description="nnaTSFczRArCskatgTSAk3a8TcT02JvhzyAvEGRwH1gqt79bzapcrIrLur4lrAgRY4qmYCDpX8Ny7Ex4zLyYmVuuwRZjnfSOf90ILh1FnEv5pCv1ztILSktq1cNxb1w0fAXCRcSE6z5QHSLVITcWyXkWwNeThLpKI1N6RIMY7t0u9TuR54ZsbCHG",
                                  metadata="{\"key\":\"value\"}",
                                  request_id="2ab7fa7f-a3c4-41c9-ad1c-f49b83998eea"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_6(self):
        response = client.send(pp.CreateTopupTransaction(
                                  "8e3a5553-8579-4c24-9eef-d74c712447dd",
                                  "d55893f1-9c88-4394-85d1-1bab6d1e9afe",
                                  "ef85eede-82cb-4468-9582-2ccddf764208",
                                  money_amount=4889,
                                  point_amount=1707,
                                  point_expires_at="2019-03-26T12:09:25.000000+09:00",
                                  description="34z4jE8W9hhkpYWEzZLn5uyvbNkf",
                                  metadata="{\"key\":\"value\"}",
                                  request_id="b2e2a821-102f-457d-932c-10baa2a7246b"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_7(self):
        response = client.send(pp.CreateTopupTransaction(
                                  "8e3a5553-8579-4c24-9eef-d74c712447dd",
                                  "d55893f1-9c88-4394-85d1-1bab6d1e9afe",
                                  "ef85eede-82cb-4468-9582-2ccddf764208",
                                  bear_point_shop_id="48447b71-0d64-4da2-877c-2ea2ffa8a760",
                                  money_amount=975,
                                  point_amount=5906,
                                  point_expires_at="2018-01-17T05:41:58.000000+09:00",
                                  description="2tK1ETZVrimXQx2toEzw7Z1gM6fgx4uEjyIUvTVKqmlOa23scUcry",
                                  metadata="{\"key\":\"value\"}",
                                  request_id="047edf6a-2b34-402f-9647-397dde9f75ab"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_with_check_0(self):
        response = client.send(pp.CreateTopupTransactionWithCheck(
                                  "b1a0825d-8e5c-42c2-be06-63d7a2828689",
                                  "d3f7c689-bbd4-4d04-a244-f17a1758a8c1"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_payment_transaction_0(self):
        response = client.send(pp.CreatePaymentTransaction(
                                  "72eb3c2c-8c93-4f56-9365-264bab09ef93",
                                  "ee90f458-2b0d-48d6-bbd4-2a793f4bd44e",
                                  "ecc7f6d2-14fb-47f5-b64e-8a41e3c20229",
                                  7125
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_payment_transaction_1(self):
        response = client.send(pp.CreatePaymentTransaction(
                                  "72eb3c2c-8c93-4f56-9365-264bab09ef93",
                                  "ee90f458-2b0d-48d6-bbd4-2a793f4bd44e",
                                  "ecc7f6d2-14fb-47f5-b64e-8a41e3c20229",
                                  7125,
                                  request_id="caaed78e-be70-4d36-ac89-c0a64bc1ca0a"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_payment_transaction_2(self):
        response = client.send(pp.CreatePaymentTransaction(
                                  "72eb3c2c-8c93-4f56-9365-264bab09ef93",
                                  "ee90f458-2b0d-48d6-bbd4-2a793f4bd44e",
                                  "ecc7f6d2-14fb-47f5-b64e-8a41e3c20229",
                                  7125,
                                  products=[{"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}],
                                  request_id="375e0e3f-d49f-4d1b-8364-25e1c287d7f7"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_payment_transaction_3(self):
        response = client.send(pp.CreatePaymentTransaction(
                                  "72eb3c2c-8c93-4f56-9365-264bab09ef93",
                                  "ee90f458-2b0d-48d6-bbd4-2a793f4bd44e",
                                  "ecc7f6d2-14fb-47f5-b64e-8a41e3c20229",
                                  7125,
                                  metadata="{\"key\":\"value\"}",
                                  products=[{"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}],
                                  request_id="edfecf7c-6781-488d-8d75-c0e2f323c41d"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_payment_transaction_4(self):
        response = client.send(pp.CreatePaymentTransaction(
                                  "72eb3c2c-8c93-4f56-9365-264bab09ef93",
                                  "ee90f458-2b0d-48d6-bbd4-2a793f4bd44e",
                                  "ecc7f6d2-14fb-47f5-b64e-8a41e3c20229",
                                  7125,
                                  description="jQ03lDRu1dHypEu4pqRk9KXy",
                                  metadata="{\"key\":\"value\"}",
                                  products=[{"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}],
                                  request_id="eecf1f7e-aaf7-4b0b-b89a-cd669deb41c1"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_cpm_transaction_0(self):
        response = client.send(pp.CreateCpmTransaction(
                                  "svQQw8eNXwtPfKAW4UwDxt",
                                  "22eac9e0-617d-4f2a-b158-0dfa150b9bfb",
                                  200.0
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_cpm_transaction_1(self):
        response = client.send(pp.CreateCpmTransaction(
                                  "svQQw8eNXwtPfKAW4UwDxt",
                                  "22eac9e0-617d-4f2a-b158-0dfa150b9bfb",
                                  200.0,
                                  request_id="991edf29-a69b-4ece-a6dc-e8a1551ea22a"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_cpm_transaction_2(self):
        response = client.send(pp.CreateCpmTransaction(
                                  "svQQw8eNXwtPfKAW4UwDxt",
                                  "22eac9e0-617d-4f2a-b158-0dfa150b9bfb",
                                  200.0,
                                  products=[{"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}],
                                  request_id="f1948afd-9664-44bf-b920-d03ea9398221"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_cpm_transaction_3(self):
        response = client.send(pp.CreateCpmTransaction(
                                  "svQQw8eNXwtPfKAW4UwDxt",
                                  "22eac9e0-617d-4f2a-b158-0dfa150b9bfb",
                                  200.0,
                                  metadata="{\"key\":\"value\"}",
                                  products=[{"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}],
                                  request_id="618efbeb-e4af-43dc-84b1-5f994e1f12dc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_cpm_transaction_4(self):
        response = client.send(pp.CreateCpmTransaction(
                                  "svQQw8eNXwtPfKAW4UwDxt",
                                  "22eac9e0-617d-4f2a-b158-0dfa150b9bfb",
                                  200.0,
                                  description="inQrWik",
                                  metadata="{\"key\":\"value\"}",
                                  products=[],
                                  request_id="01bf3c74-e24d-4284-9d93-789f49eab28b"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transfer_transaction_0(self):
        response = client.send(pp.CreateTransferTransaction(
                                  "72ba548b-61df-47cb-b046-ae9c95c9b5c8",
                                  "a5024acc-06f9-4e4c-996e-2d1e5e5dd8f6",
                                  "deb457dc-5dfa-4054-a4df-60464dea9de6",
                                  94.0
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transfer_transaction_1(self):
        response = client.send(pp.CreateTransferTransaction(
                                  "72ba548b-61df-47cb-b046-ae9c95c9b5c8",
                                  "a5024acc-06f9-4e4c-996e-2d1e5e5dd8f6",
                                  "deb457dc-5dfa-4054-a4df-60464dea9de6",
                                  94.0,
                                  request_id="95f56e59-fb8a-4731-9bca-2b167cad46cf"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transfer_transaction_2(self):
        response = client.send(pp.CreateTransferTransaction(
                                  "72ba548b-61df-47cb-b046-ae9c95c9b5c8",
                                  "a5024acc-06f9-4e4c-996e-2d1e5e5dd8f6",
                                  "deb457dc-5dfa-4054-a4df-60464dea9de6",
                                  94.0,
                                  description="DoBhEEJFs7RURiJHf6mnglgKA3t551AWYy2EKxgIvudVQK",
                                  request_id="68909fcd-5a85-40a6-b3e9-4b1b2aa48499"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transfer_transaction_3(self):
        response = client.send(pp.CreateTransferTransaction(
                                  "72ba548b-61df-47cb-b046-ae9c95c9b5c8",
                                  "a5024acc-06f9-4e4c-996e-2d1e5e5dd8f6",
                                  "deb457dc-5dfa-4054-a4df-60464dea9de6",
                                  94.0,
                                  metadata="{\"key\":\"value\"}",
                                  description="lyVYA6fe68jtm2G7nC3SW8MPeFKTYT7eEYLwvHQFKDImV0W8uMWRziTXMumFe",
                                  request_id="a6716e61-64c5-4648-a40a-41163b9005e8"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_exchange_transaction_0(self):
        response = client.send(pp.CreateExchangeTransaction(
                                  "34eb72b8-1450-4f7f-a0bc-b0df266a8a91",
                                  "5a96ff88-52e5-4ead-9094-60a96e58e86f",
                                  "10083b2b-1dcd-4421-9c7d-1991ae9a8080",
                                  4059.0
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_exchange_transaction_1(self):
        response = client.send(pp.CreateExchangeTransaction(
                                  "34eb72b8-1450-4f7f-a0bc-b0df266a8a91",
                                  "5a96ff88-52e5-4ead-9094-60a96e58e86f",
                                  "10083b2b-1dcd-4421-9c7d-1991ae9a8080",
                                  4059.0,
                                  request_id="1ed94b77-b96e-4da7-8a41-03a71ec2d0c5"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_exchange_transaction_2(self):
        response = client.send(pp.CreateExchangeTransaction(
                                  "34eb72b8-1450-4f7f-a0bc-b0df266a8a91",
                                  "5a96ff88-52e5-4ead-9094-60a96e58e86f",
                                  "10083b2b-1dcd-4421-9c7d-1991ae9a8080",
                                  4059.0,
                                  description="muUL6pb761IWS7zT3jmF3XMzgKDKO5o6UqQsbMF41dYUnemzRdROKbGph7rDrumGN6tQ3vZwFKRF7w7plclcWB9bNRwQ0LABzLS5AginlSJbgCOpN21EzYv53e8C68gL6nh3hboA1VaXQqYz47H8v5OYX2Bb7kgjpYtpWxkJ",
                                  request_id="b90e2715-4a1c-4932-9d36-3e10f6991b1f"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_bulk_create_transaction_0(self):
        response = client.send(pp.BulkCreateTransaction(
                                  "TN1",
                                  "ktFjJy7",
                                  "P4SbKkoz4u4vqNtkYjPXUyJ1V0r5CHRNT2ec"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_bulk_create_transaction_1(self):
        response = client.send(pp.BulkCreateTransaction(
                                  "TN1",
                                  "ktFjJy7",
                                  "P4SbKkoz4u4vqNtkYjPXUyJ1V0r5CHRNT2ec",
                                  description="Ldc33OSn94wpSCBGnb27KI1Ko9Ro9P2UOPHKcZd7kJ0a09BOfpTrIxahzBDxgf0eAPjokEVHRFLghiMn2sJjV2bGnLruRc9c27Gpu7i"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_transaction_0(self):
        response = client.send(pp.GetTransaction(
                                  "20b8f657-fa62-4a08-80b0-76286d6beb38"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_refund_transaction_0(self):
        response = client.send(pp.RefundTransaction(
                                  "62c64955-3ee2-428f-8918-7958e6f8ede6"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_refund_transaction_1(self):
        response = client.send(pp.RefundTransaction(
                                  "62c64955-3ee2-428f-8918-7958e6f8ede6",
                                  description="zIWogjdxJNEfM7ZphEzx62f8FNzaDel7ro4JT6XY3Y33ek4ahxmsrZJPb5B1K9ZLJjlQzrcG4cFx990D5go4dBLdUCSZVd4cTq"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_external_transaction_0(self):
        response = client.send(pp.CreateExternalTransaction(
                                  "4d70948e-0eee-4106-8e8d-bc6649c47b53",
                                  "0cbf603e-3c5e-4002-9269-f7d8605c8206",
                                  "48adf095-84cc-4077-9a20-feb60d59bc49",
                                  6744
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_external_transaction_1(self):
        response = client.send(pp.CreateExternalTransaction(
                                  "4d70948e-0eee-4106-8e8d-bc6649c47b53",
                                  "0cbf603e-3c5e-4002-9269-f7d8605c8206",
                                  "48adf095-84cc-4077-9a20-feb60d59bc49",
                                  6744,
                                  request_id="6fe4a33d-aa7d-4a78-8d85-8defb10311e0"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_external_transaction_2(self):
        response = client.send(pp.CreateExternalTransaction(
                                  "4d70948e-0eee-4106-8e8d-bc6649c47b53",
                                  "0cbf603e-3c5e-4002-9269-f7d8605c8206",
                                  "48adf095-84cc-4077-9a20-feb60d59bc49",
                                  6744,
                                  products=[{"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}],
                                  request_id="1dad4734-4d0f-4d4e-b3e0-47624d602158"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_external_transaction_3(self):
        response = client.send(pp.CreateExternalTransaction(
                                  "4d70948e-0eee-4106-8e8d-bc6649c47b53",
                                  "0cbf603e-3c5e-4002-9269-f7d8605c8206",
                                  "48adf095-84cc-4077-9a20-feb60d59bc49",
                                  6744,
                                  metadata="{\"key\":\"value\"}",
                                  products=[{"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}],
                                  request_id="b7a43332-2479-4345-a5f2-26cc71bca74e"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_external_transaction_4(self):
        response = client.send(pp.CreateExternalTransaction(
                                  "4d70948e-0eee-4106-8e8d-bc6649c47b53",
                                  "0cbf603e-3c5e-4002-9269-f7d8605c8206",
                                  "48adf095-84cc-4077-9a20-feb60d59bc49",
                                  6744,
                                  description="EKMYsRf9vriYiP8HndtLKgFWIeB413C8zcpa0a0i",
                                  metadata="{\"key\":\"value\"}",
                                  products=[{"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}],
                                  request_id="911b5ebc-fbf0-4ef5-adcc-29f4f57497b3"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_refund_external_transaction_0(self):
        response = client.send(pp.RefundExternalTransaction(
                                  "ab504349-7dd1-464b-9151-b9010663148b"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_refund_external_transaction_1(self):
        response = client.send(pp.RefundExternalTransaction(
                                  "ab504349-7dd1-464b-9151-b9010663148b",
                                  description="6fikVg8U3XBigR3jya01cL7edhmrVi5NIsblUeDquiQL8YRreNoLAWMJdywYSICtYcbHl2ktF16gpa54attROZcBbejZS9wdnnN"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_0(self):
        response = client.send(pp.ListTransfers(
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_1(self):
        response = client.send(pp.ListTransfers(
                                  description="INI7vj8qEDPsdJ8JkL6K4fbUtzmymsdzvhUXmrc210VozYCz4wR9Gfv1ooHMcqzJF0zVNZ8zHF5m"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_2(self):
        response = client.send(pp.ListTransfers(
                                  transfer_types=[],
                                  description="l0g7uhhZVwBBSB9NQuG198o4cE8ye8xiCptr8X3OQSs9cvMVMzYpfEHHq4AVCPhpFJVl2NE9OohrFLhvABt92YjeNGkeRyZCxDwnyuzPdWfYw482S6oHFsZh9ksnqTSKQYaLtgBF21Mao0iMx72McbAtuQfbwPK5Ol"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_3(self):
        response = client.send(pp.ListTransfers(
                                  transaction_types=["payment", "exchange", "cashback", "expire", "transfer"],
                                  transfer_types=[],
                                  description="5ClBnNsqGtwvAjO8SQrjpTlUKU7ix6v"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_4(self):
        response = client.send(pp.ListTransfers(
                                  is_modified=False,
                                  transaction_types=["cashback", "expire", "payment", "transfer"],
                                  transfer_types=["coupon", "expire", "topup"],
                                  description="Iv4Cy2qiGNeSDJueWNAF2iLhkB08mWoSEw4Yfnz5e3bjXKldANGzSZe49qKV1rholLnfHAgpNJKDDEjuzSmETPUL6TDRxNmjKW"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_5(self):
        response = client.send(pp.ListTransfers(
                                  private_money_id="e16c5914-c5d0-4c11-84bc-cec52b1041fa",
                                  is_modified=False,
                                  transaction_types=["expire", "exchange", "cashback", "transfer", "payment"],
                                  transfer_types=["campaign", "expire", "transfer", "exchange", "topup", "coupon", "cashback"],
                                  description="Ulzsxb9tQKSZdMATJHlP3s2aiyvcn732KUYpvpwWJTv2DUcmsWBTf3SfgLVNlOhNoRUioebBno3HZhnyNZ5Q77U04aLs4hmy4C28WnCRfz2leovb1R7O6QOgboW2zpcaLxa2QZma6"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_6(self):
        response = client.send(pp.ListTransfers(
                                  transaction_id="13cd8f43-64a4-4dd2-af3a-e9b8d8e7ed11",
                                  private_money_id="23b8caee-f1f9-489a-8a9c-c54f0d1a60b9",
                                  is_modified=False,
                                  transaction_types=["exchange", "payment", "topup", "cashback"],
                                  transfer_types=["transfer", "coupon", "payment", "topup"],
                                  description="8QSZwJ1udEIb7zDJ6KZTEk0mDRGqd8jGihF2zo2GN3QYDG6CZS1PVe5LZzi2NmWBluHrzflOytNd3ROmH9nMfAHnX3LOs6P3dxLhDjrt4CFE"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_7(self):
        response = client.send(pp.ListTransfers(
                                  customer_name="SWJnPCLUxGLtrgoghS3pPHE574eeX1ksH4R2MgyW6z149JBRZmQUgzecqWdDVSstoEtPVoykbtA6l7WDayqQLAKXyhWYdlIHfSBBKI1KQl4cK6HLesoN7AsxjaX4b",
                                  transaction_id="103877bb-86eb-4201-9386-030084d299fa",
                                  private_money_id="49cf326f-8c57-467c-a435-785365e70602",
                                  is_modified=True,
                                  transaction_types=["exchange", "transfer"],
                                  transfer_types=["cashback", "coupon", "exchange", "topup", "campaign", "expire"],
                                  description="E829PJZq44v95w5OTBAsM3ixdWcd35lzGg9k8zX5Zx6rdzZ6Kiw60EKpO7FL05ARSiRG2UPRPUxcw9rvtxOfCP20hUm1E2Nlz5V1CO5TSFyNtopqI6bCrDgQTiBz8hopleWuv10dzqDmxXKufPIjjJpzSXKPSRMVYMVxniANdM0yy6srRZNC9bYJUFWp4SJDd9Vw0g"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_8(self):
        response = client.send(pp.ListTransfers(
                                  customer_id="f14c9268-689c-4c76-9c55-cdf79b5ef9c8",
                                  customer_name="4GPMgqa4p3NBV6jnDEmNinmBAkCQlWqd4VgtaT7nx9nCCSGOYqsqY3PQB7j8S1LcJM99jV6h5DQ4TL9sXbFiutZ4wF",
                                  transaction_id="49410e93-bdea-479a-87ac-79991cfa4478",
                                  private_money_id="d426e9c2-e9ae-4589-9a89-577fa0f2e2cc",
                                  is_modified=False,
                                  transaction_types=[],
                                  transfer_types=["cashback", "topup", "exchange", "expire", "transfer", "campaign", "payment", "coupon"],
                                  description="e8Kxv6FPaZ8I6AxiybIUdjn2JlMSQ6V8dRYSFDiggsas4Nm4Pbqn0MLycuAIyd8Tc91YrDumA0BEPaxu5hz8quH88gYqQC45YQseyms9QyHVorEq6zLZyg3cEPs9bN7e1DJRmWCvXV5f7NFxRTTWOKh4cp2t8"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_9(self):
        response = client.send(pp.ListTransfers(
                                  shop_name="rtdj0",
                                  customer_id="85f86e46-bc12-46b8-84ab-35dbc74d039a",
                                  customer_name="2hhuu2d72PSRBNNGTP71wcJLJGkIvTZnRNAv7oeQjUez1G0bwCFurxmaLHHuXDOcuycPW2WYY40yWZt9ZjHKqLir6qmCF3zfoEN4hG6jzrPFiN4YTSJ9o4hVc0u6tzaZ3s",
                                  transaction_id="439957aa-5662-41d9-8b11-577f4a10788e",
                                  private_money_id="217eb500-69df-4f80-9e2d-b4c3287696ce",
                                  is_modified=False,
                                  transaction_types=["transfer", "payment", "exchange"],
                                  transfer_types=["payment", "transfer", "campaign", "topup", "cashback", "expire"],
                                  description="RswwQSmiJco3KwhjqpMqyENnno"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_10(self):
        response = client.send(pp.ListTransfers(
                                  shop_id="eaabfe74-0124-461b-8acb-a74ef40db4a5",
                                  shop_name="2DvQSu06FE8juzeNINZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV5jbNBEz14f9BIpTXI2luGWaGy1CoC",
                                  customer_id="7cd2c5aa-6d59-462f-afd9-e01a7bbac46d",
                                  customer_name="aLr1BLYdgsrsB",
                                  transaction_id="d7c3650e-903c-4a37-8ebb-b46eb003dee6",
                                  private_money_id="d089a704-45b3-4280-bab7-60a75789eafa",
                                  is_modified=False,
                                  transaction_types=["payment"],
                                  transfer_types=["topup", "campaign", "payment", "exchange", "transfer", "expire", "coupon"],
                                  description="YQAtf2GPfHYeeJWiJLn1TOWVNqKCYgaN6maSZWJn127yVjYZzSkjksojB4PnV9sBfF1BkHf1A87wLQ9bOIRS2WYI5ck8HRSP5FHw4UX4tGWi4N1WpwhPzDe8V1DYdcKn6nAl4cEX71br7jv7EDkwXN76HyKk1SGbd2fzw9nBiKXYeHN7C4"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_11(self):
        response = client.send(pp.ListTransfers(
                                  per_page=2829,
                                  shop_id="96eee591-12e4-414f-8d68-9f3ed087ec07",
                                  shop_name="cXyEVzhZku2OJwUM0ktk1yse4CdNhZgpKbkXWC5tLFNUhqVPCyC44juCu9OYkti8QhcNElbkx4K7ompotaJBLyz8KN17fLxPU1GvU5oJnH6hOfBgmDSuxOmphkziTG6p4HsLeIcNrFvlQBIX1JBgnrD1yLFlL5k",
                                  customer_id="bf8ef162-059c-4ae7-b39c-c69deccaaa20",
                                  customer_name="6xUgxf5sOofYseOtl3ilNOPpyIVjtUkLTSkOKux630Id9YuKsTGECVvJsAnqjel2la3rWWdK2ybDtXJiikZzBktm983ksDdKfbC96DBMvuC0QTfx8l2ZZBjyQqeO19KhFrkxiVRAQ6FFjz1wnjIRjO9MofqJJncHBCR1qP1zId4mLJCzHpOgkhaasWI8E",
                                  transaction_id="83ad0ffb-f84c-4271-8af7-c2521fe0bf9f",
                                  private_money_id="27f0b241-f8a9-459a-b6b2-fadf5a380e47",
                                  is_modified=False,
                                  transaction_types=[],
                                  transfer_types=["cashback"],
                                  description="V7JprfFD47gNL9WM6cSeojzOZZrLxO3x6r1ViuOnspa8l8OxqMpLrB8ZQmhXH"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_12(self):
        response = client.send(pp.ListTransfers(
                                  page=422,
                                  per_page=2707,
                                  shop_id="00147a8d-9ec7-470a-937d-a1238f05ec2d",
                                  shop_name="gVcs3OQMdHqZLlv01wGqOn2jIsFsWbo7bpQq9anT6PszkN335U1t4DYsuiE88p3Hog0k8dxuKgCFI0Qv1brn8AT",
                                  customer_id="ca6fa587-123a-4714-8dd4-7cce4af7062d",
                                  customer_name="MEyVApkaDeYuOtBoCZgc4gwc8RSE7B5wsqfAkho5yO5EQGpb9AHk6UF1UjWUyw97H5Wi0UlM5hWRop",
                                  transaction_id="741cd606-76bf-479d-9571-af064bc2b40f",
                                  private_money_id="57f2bbb8-eb11-4f66-909b-e86d7c26c40f",
                                  is_modified=False,
                                  transaction_types=["exchange", "payment"],
                                  transfer_types=["expire", "transfer", "topup", "exchange", "cashback", "campaign"],
                                  description="QIEgbGEOQG1PZp7fjd91zgh1RHHtL55R7YEprCJ0U4QnLZWmGvTqLQwaZ9vOnv67spoRoPKUgWvYVa3Gv9xbfzvgScohGvfvszFZKZ0fsirdyb8N5N4uLXeppDXZ9aq2pYugtiiL7qWoYElTKmZkEzC"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_13(self):
        response = client.send(pp.ListTransfers(
                                  to="2018-11-17T14:56:40.000000+09:00",
                                  page=1116,
                                  per_page=8055,
                                  shop_id="e6903e09-1237-464f-8b55-67616fca7aa9",
                                  shop_name="NeEnF41oUMWRj1sxtSyQgT1GkRhboXHY39x3Xs6KbKOjUQYLsphxNcJXceDU70KRGU02ETtMe3p5BruF5QOJx8zwWTQtwhgEUQrpqVtFI20RqU84wWVej7KjR7PO79YOuc2btzI2HvKaIy1dRKuzOlLMmdBSZr220xtZpZdQ9ssluYJHAlylPpV6x",
                                  customer_id="2c8cd9d7-1d78-4523-b437-a003423a4507",
                                  customer_name="2oLFlgp2lLhVbHghg4lZSVxXqYiDQPFv2xIXmI4PlPvyiodipyOhBLvJd18F7msVClYIZ6Bq4ZCm153pAwidsKM1ZphpLhv7NIoqmlJ",
                                  transaction_id="3ce2d5af-dadf-48bb-b0fa-8b4bf409254f",
                                  private_money_id="60d2eede-8926-459c-8d0f-7f59d5c63540",
                                  is_modified=True,
                                  transaction_types=["cashback", "transfer", "exchange", "expire"],
                                  transfer_types=["cashback", "expire", "campaign", "coupon", "transfer", "exchange", "topup", "payment"],
                                  description="HcZXN3Xa70o7nFXURkjCcagg1x0DCy4shXKR7nTWCyIt3Gr6ubUQRiycmsaOa8T2aG0PP6tn"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_14(self):
        response = client.send(pp.ListTransfers(
                                  from="2021-04-22T01:04:24.000000+09:00",
                                  to="2017-11-13T03:24:46.000000+09:00",
                                  page=4208,
                                  per_page=8852,
                                  shop_id="41d52a55-b7c9-4890-8c0e-d04fd5cc7292",
                                  shop_name="zvfJbTrh0kbVP56HQVtzlq6MKoBezSZGJZ1h8km3mkAPAZ0UMnnwlo100h7H4BT2IdLeJZDTCEki4ZW2q7YUbIlt759XkPd0Pd9Lm5F7XmpoqfPmIraGVhsLJiqbQ3MQR9CltXlG6ahNcft22PrlsKWxGtQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6LmEP7tafjyhKgvwh227cUJMuQ1t83oitBAmKCKeNp7Z6KeHafo",
                                  customer_id="12049a5c-b34f-4405-9d4b-aed9c85cc8a9",
                                  customer_name="Us7zf9dIsiva1vYlz4sIXfB3ep9eHnNy54z9YZjsWtY1WGlubcf8poH65gFI1eD4xOb3KkBBLymzX1iKABzsalQh9et3sJPwGPZVdfeHb6D60qrRKjcydAgQf1kjgylUDTK4jhJH0jAjNW1ZH6MoDDkoySCPKncEWYebt4RUGRqT3wcuceySCabxrgTXSxZbg1Ud9jBS9CQqv6T7eIQXHJd8SnpNPnO39WNWvjXlHUhCIHkbLQ7KL6",
                                  transaction_id="af6c81bf-a4fd-49f9-b353-8ae4de8ccc6f",
                                  private_money_id="60871278-c794-44bb-a416-a22ee5d920ee",
                                  is_modified=False,
                                  transaction_types=["payment"],
                                  transfer_types=["campaign", "cashback", "coupon", "transfer", "payment"],
                                  description="rmRY7bQCW9sPYWAKIaPAnlgG8mho7qKjeP1Vs1el3tVDmtz0qcHqLIsXtLIzc5kRp3WnRoU2x23XKfAMBShU6I6qbRRo0KsKQjbIFpDLYbMMvlh9JCT1xGcQLRIyKzcfWhCzi1Z89pSvPCqCpyLyZ"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_0(self):
        response = client.send(pp.CreateOrganization(
                                  "50fssjoNHBAUn0qZzC",
                                  "WIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQL9XINJ3Yd9vs5R5vReMbbVX8HS4JwKvfQBXbwG5FfObbKUS2wO8JUS6TcMNwfudd0OcDN26kEZNJtfvLzUTMMVxGv3INa5f54YI1Ph3OUBAsVaG6TxK3slQw2Vv1qEnKcaw1pz9vX015UD9qqTdXnkHVwtuWRPDBo28vDsYr2EOFyjAKpCpIzZX",
                                  ["1e20c26d-f316-4303-b320-cf03107b778a", "e4061717-7eef-4682-98c7-863a9dd625d3", "3610bf99-3328-4299-b791-06e0ba08e7e1", "19a5baca-a2d4-49e9-97a5-4a376b4ca013", "de322bcf-9d2b-4d3f-95ae-f14bc950aba5", "b03fef9c-aa30-49f6-8b51-e5b19edc6a8f", "a10ea5ab-39b3-4d99-a72b-04c0fd0e8f90", "94b385a8-f766-4987-8fb1-0651a70f5b24"],
                                  "SAIUcA7AjS@SLuH.com",
                                  "Yzu2Ra1BME@r62g.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_1(self):
        response = client.send(pp.CreateOrganization(
                                  "50fssjoNHBAUn0qZzC",
                                  "WIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQL9XINJ3Yd9vs5R5vReMbbVX8HS4JwKvfQBXbwG5FfObbKUS2wO8JUS6TcMNwfudd0OcDN26kEZNJtfvLzUTMMVxGv3INa5f54YI1Ph3OUBAsVaG6TxK3slQw2Vv1qEnKcaw1pz9vX015UD9qqTdXnkHVwtuWRPDBo28vDsYr2EOFyjAKpCpIzZX",
                                  ["1e20c26d-f316-4303-b320-cf03107b778a", "e4061717-7eef-4682-98c7-863a9dd625d3", "3610bf99-3328-4299-b791-06e0ba08e7e1", "19a5baca-a2d4-49e9-97a5-4a376b4ca013", "de322bcf-9d2b-4d3f-95ae-f14bc950aba5", "b03fef9c-aa30-49f6-8b51-e5b19edc6a8f", "a10ea5ab-39b3-4d99-a72b-04c0fd0e8f90", "94b385a8-f766-4987-8fb1-0651a70f5b24"],
                                  "SAIUcA7AjS@SLuH.com",
                                  "Yzu2Ra1BME@r62g.com",
                                  contact_name="vnEoyfpAANnkoel9aDgdNSfmE5De5bTvMyHpd2S0WD3FaqRKAgoYEGpNOGzwWmNqL0QHxylFWlu94S8FVSDMY5BU7ZXRTfnNFoNra9"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_2(self):
        response = client.send(pp.CreateOrganization(
                                  "50fssjoNHBAUn0qZzC",
                                  "WIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQL9XINJ3Yd9vs5R5vReMbbVX8HS4JwKvfQBXbwG5FfObbKUS2wO8JUS6TcMNwfudd0OcDN26kEZNJtfvLzUTMMVxGv3INa5f54YI1Ph3OUBAsVaG6TxK3slQw2Vv1qEnKcaw1pz9vX015UD9qqTdXnkHVwtuWRPDBo28vDsYr2EOFyjAKpCpIzZX",
                                  ["1e20c26d-f316-4303-b320-cf03107b778a", "e4061717-7eef-4682-98c7-863a9dd625d3", "3610bf99-3328-4299-b791-06e0ba08e7e1", "19a5baca-a2d4-49e9-97a5-4a376b4ca013", "de322bcf-9d2b-4d3f-95ae-f14bc950aba5", "b03fef9c-aa30-49f6-8b51-e5b19edc6a8f", "a10ea5ab-39b3-4d99-a72b-04c0fd0e8f90", "94b385a8-f766-4987-8fb1-0651a70f5b24"],
                                  "SAIUcA7AjS@SLuH.com",
                                  "Yzu2Ra1BME@r62g.com",
                                  bank_account_holder_name=",",
                                  contact_name="KkUB3tuq1X9Hm0SHBKCUruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yNfh8NoRe5rX0rVCmpqdlLHNNlbdn"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_3(self):
        response = client.send(pp.CreateOrganization(
                                  "50fssjoNHBAUn0qZzC",
                                  "WIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQL9XINJ3Yd9vs5R5vReMbbVX8HS4JwKvfQBXbwG5FfObbKUS2wO8JUS6TcMNwfudd0OcDN26kEZNJtfvLzUTMMVxGv3INa5f54YI1Ph3OUBAsVaG6TxK3slQw2Vv1qEnKcaw1pz9vX015UD9qqTdXnkHVwtuWRPDBo28vDsYr2EOFyjAKpCpIzZX",
                                  ["1e20c26d-f316-4303-b320-cf03107b778a", "e4061717-7eef-4682-98c7-863a9dd625d3", "3610bf99-3328-4299-b791-06e0ba08e7e1", "19a5baca-a2d4-49e9-97a5-4a376b4ca013", "de322bcf-9d2b-4d3f-95ae-f14bc950aba5", "b03fef9c-aa30-49f6-8b51-e5b19edc6a8f", "a10ea5ab-39b3-4d99-a72b-04c0fd0e8f90", "94b385a8-f766-4987-8fb1-0651a70f5b24"],
                                  "SAIUcA7AjS@SLuH.com",
                                  "Yzu2Ra1BME@r62g.com",
                                  bank_account="3956213",
                                  bank_account_holder_name=" ",
                                  contact_name="iyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45c417ClVPZadCz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0NmtxroKV"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_4(self):
        response = client.send(pp.CreateOrganization(
                                  "50fssjoNHBAUn0qZzC",
                                  "WIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQL9XINJ3Yd9vs5R5vReMbbVX8HS4JwKvfQBXbwG5FfObbKUS2wO8JUS6TcMNwfudd0OcDN26kEZNJtfvLzUTMMVxGv3INa5f54YI1Ph3OUBAsVaG6TxK3slQw2Vv1qEnKcaw1pz9vX015UD9qqTdXnkHVwtuWRPDBo28vDsYr2EOFyjAKpCpIzZX",
                                  ["1e20c26d-f316-4303-b320-cf03107b778a", "e4061717-7eef-4682-98c7-863a9dd625d3", "3610bf99-3328-4299-b791-06e0ba08e7e1", "19a5baca-a2d4-49e9-97a5-4a376b4ca013", "de322bcf-9d2b-4d3f-95ae-f14bc950aba5", "b03fef9c-aa30-49f6-8b51-e5b19edc6a8f", "a10ea5ab-39b3-4d99-a72b-04c0fd0e8f90", "94b385a8-f766-4987-8fb1-0651a70f5b24"],
                                  "SAIUcA7AjS@SLuH.com",
                                  "Yzu2Ra1BME@r62g.com",
                                  bank_account_type="saving",
                                  bank_account="4478",
                                  bank_account_holder_name="\\",
                                  contact_name="xL5ooBCUmbexHlOYPdRDRXfcFEKebPAHiatKRmL7K8IMJIBW1vB1RC8WQ75Zq2CPEph5LyiHrKKZHYeA6KMsRSBkbfNhFwjSSUkqouGV2ULftf3KLiOm0u6OdTYvY1WMa6BMdHbor9Bi8VjYjeAF8N8XvRYyNjj6LzPNoFY0NPc7gW3tdaerbfAUj6MGuDCQRgbbh69IfOOqdFvcvTYHWhMSc2J"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_5(self):
        response = client.send(pp.CreateOrganization(
                                  "50fssjoNHBAUn0qZzC",
                                  "WIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQL9XINJ3Yd9vs5R5vReMbbVX8HS4JwKvfQBXbwG5FfObbKUS2wO8JUS6TcMNwfudd0OcDN26kEZNJtfvLzUTMMVxGv3INa5f54YI1Ph3OUBAsVaG6TxK3slQw2Vv1qEnKcaw1pz9vX015UD9qqTdXnkHVwtuWRPDBo28vDsYr2EOFyjAKpCpIzZX",
                                  ["1e20c26d-f316-4303-b320-cf03107b778a", "e4061717-7eef-4682-98c7-863a9dd625d3", "3610bf99-3328-4299-b791-06e0ba08e7e1", "19a5baca-a2d4-49e9-97a5-4a376b4ca013", "de322bcf-9d2b-4d3f-95ae-f14bc950aba5", "b03fef9c-aa30-49f6-8b51-e5b19edc6a8f", "a10ea5ab-39b3-4d99-a72b-04c0fd0e8f90", "94b385a8-f766-4987-8fb1-0651a70f5b24"],
                                  "SAIUcA7AjS@SLuH.com",
                                  "Yzu2Ra1BME@r62g.com",
                                  bank_branch_code="441",
                                  bank_account_type="saving",
                                  bank_account="081",
                                  bank_account_holder_name="2",
                                  contact_name="KjX0wbEINtuhWyJmxhctiEpL1KlL20SY28CEIpXvCz2lX0WFgkUTJYHHOr63hjnglJCcSZdRjCOwyap0lsb8d4Dc5yMU1TN0yX6wxY6IPoPyEr8klncfGkEwHBWOqOmjPQjCJIqduyEzfF4ihEMnqIdNLL8T5msTmgqj"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_6(self):
        response = client.send(pp.CreateOrganization(
                                  "50fssjoNHBAUn0qZzC",
                                  "WIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQL9XINJ3Yd9vs5R5vReMbbVX8HS4JwKvfQBXbwG5FfObbKUS2wO8JUS6TcMNwfudd0OcDN26kEZNJtfvLzUTMMVxGv3INa5f54YI1Ph3OUBAsVaG6TxK3slQw2Vv1qEnKcaw1pz9vX015UD9qqTdXnkHVwtuWRPDBo28vDsYr2EOFyjAKpCpIzZX",
                                  ["1e20c26d-f316-4303-b320-cf03107b778a", "e4061717-7eef-4682-98c7-863a9dd625d3", "3610bf99-3328-4299-b791-06e0ba08e7e1", "19a5baca-a2d4-49e9-97a5-4a376b4ca013", "de322bcf-9d2b-4d3f-95ae-f14bc950aba5", "b03fef9c-aa30-49f6-8b51-e5b19edc6a8f", "a10ea5ab-39b3-4d99-a72b-04c0fd0e8f90", "94b385a8-f766-4987-8fb1-0651a70f5b24"],
                                  "SAIUcA7AjS@SLuH.com",
                                  "Yzu2Ra1BME@r62g.com",
                                  bank_branch_name="81RXJ34GFY2SrpQfm9Le0rSPWlrPa8fbLwdjVaS9JydpHqXjqW7D3uCGCdE3Z7g",
                                  bank_branch_code="343",
                                  bank_account_type="saving",
                                  bank_account="4492186",
                                  bank_account_holder_name="\\",
                                  contact_name="JxcGB9NLriuIsMTY"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_7(self):
        response = client.send(pp.CreateOrganization(
                                  "50fssjoNHBAUn0qZzC",
                                  "WIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQL9XINJ3Yd9vs5R5vReMbbVX8HS4JwKvfQBXbwG5FfObbKUS2wO8JUS6TcMNwfudd0OcDN26kEZNJtfvLzUTMMVxGv3INa5f54YI1Ph3OUBAsVaG6TxK3slQw2Vv1qEnKcaw1pz9vX015UD9qqTdXnkHVwtuWRPDBo28vDsYr2EOFyjAKpCpIzZX",
                                  ["1e20c26d-f316-4303-b320-cf03107b778a", "e4061717-7eef-4682-98c7-863a9dd625d3", "3610bf99-3328-4299-b791-06e0ba08e7e1", "19a5baca-a2d4-49e9-97a5-4a376b4ca013", "de322bcf-9d2b-4d3f-95ae-f14bc950aba5", "b03fef9c-aa30-49f6-8b51-e5b19edc6a8f", "a10ea5ab-39b3-4d99-a72b-04c0fd0e8f90", "94b385a8-f766-4987-8fb1-0651a70f5b24"],
                                  "SAIUcA7AjS@SLuH.com",
                                  "Yzu2Ra1BME@r62g.com",
                                  bank_code="",
                                  bank_branch_name="CUoOEa9YZaUNPTMagDSPeHLGCGYvgqbqCIdoPTyGfjAlvbOwBRftL3mTfJ",
                                  bank_branch_code="",
                                  bank_account_type="saving",
                                  bank_account="381",
                                  bank_account_holder_name=")",
                                  contact_name="vnht1UycVdhwjqe7Rve16qe5BUa3mrtCxkktMbdZ0Ff5nebRZC0vDYNEWMf"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_8(self):
        response = client.send(pp.CreateOrganization(
                                  "50fssjoNHBAUn0qZzC",
                                  "WIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQL9XINJ3Yd9vs5R5vReMbbVX8HS4JwKvfQBXbwG5FfObbKUS2wO8JUS6TcMNwfudd0OcDN26kEZNJtfvLzUTMMVxGv3INa5f54YI1Ph3OUBAsVaG6TxK3slQw2Vv1qEnKcaw1pz9vX015UD9qqTdXnkHVwtuWRPDBo28vDsYr2EOFyjAKpCpIzZX",
                                  ["1e20c26d-f316-4303-b320-cf03107b778a", "e4061717-7eef-4682-98c7-863a9dd625d3", "3610bf99-3328-4299-b791-06e0ba08e7e1", "19a5baca-a2d4-49e9-97a5-4a376b4ca013", "de322bcf-9d2b-4d3f-95ae-f14bc950aba5", "b03fef9c-aa30-49f6-8b51-e5b19edc6a8f", "a10ea5ab-39b3-4d99-a72b-04c0fd0e8f90", "94b385a8-f766-4987-8fb1-0651a70f5b24"],
                                  "SAIUcA7AjS@SLuH.com",
                                  "Yzu2Ra1BME@r62g.com",
                                  bank_name="xXSVHRY4YZdsEswklf9tWgAr9K",
                                  bank_code="8375",
                                  bank_branch_name="eefEvU98BI4BdtnYVFOF5IXA6lNw66Yqs62ry4EX0H5SsjBGi2vt3IVLujf",
                                  bank_branch_code="583",
                                  bank_account_type="current",
                                  bank_account="821853",
                                  bank_account_holder_name=" ",
                                  contact_name="5hc29pv4sZBooZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJ"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_0(self):
        response = client.send(pp.ListShops(
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_1(self):
        response = client.send(pp.ListShops(
                                  per_page=4558
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_2(self):
        response = client.send(pp.ListShops(
                                  page=3784,
                                  per_page=9980
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_3(self):
        response = client.send(pp.ListShops(
                                  external_id="98zC6otpSw3LnpbrPkZnNjPWO5",
                                  page=2230,
                                  per_page=1954
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_4(self):
        response = client.send(pp.ListShops(
                                  email="DSfY3LgW5M@2IvR.com",
                                  external_id="2CgIBy3eLTys12HHDFFeqLoUtYmfM0",
                                  page=4320,
                                  per_page=8025
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_5(self):
        response = client.send(pp.ListShops(
                                  tel="09-101552",
                                  email="Y3jVYhbh4R@W4Sj.com",
                                  external_id="cPHu2gIp7Hl",
                                  page=1172,
                                  per_page=5011
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_6(self):
        response = client.send(pp.ListShops(
                                  address="CgxYlFZzBuHZ8tjsh68ScZg3aAMErPcV9o0TcGJkIJgRMahTjY4B83KCbssdnciBK2yKUyBpazsFHLyPhoCqWWrzikH0DrThI9ndCARX9iZhUIwUrsQ8Uijo55dyiBxXbKWYhqIQcADAJhWFwASll2hGkEzja1Nm",
                                  tel="078517159",
                                  email="0dtBhucZ4e@0BzA.com",
                                  external_id="y80f2MmxJUnd92RrjDmsbpR1",
                                  page=6697,
                                  per_page=8233
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_7(self):
        response = client.send(pp.ListShops(
                                  postal_code="859-0057",
                                  address="2pRvNpULEoTr6H5p2Y5YBaOZdS1seolNILNbVpFGvZ3N4x3uvaLnbw12Ii4C82SzJJG4lODNS2Ij7U5b72U",
                                  tel="02-8987530",
                                  email="Z2vkYmrCrW@wA7I.com",
                                  external_id="kDmk9acr8tX9JQSHyiFoseHqYyK8GIOW0PG",
                                  page=5038,
                                  per_page=4054
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_8(self):
        response = client.send(pp.ListShops(
                                  name="5uzPdd0dJeNNvUC0bqs1hvmd5I8evbrAQGpnYomE2cpD4cThkIOO2LW0e3G1sTmjjHcN57ZbAikJ2opGyr1ja3zumve771kQ7mwZnfGMQasC1yb1Dq2UL9Kx0jYk7sZRicOTg23f5GXrX6ozTzm0HG0TosxKz4jitwHtujKhwCFGwiyv4vlRB",
                                  postal_code="2280688",
                                  address="eKBVf4jVtecQNubIdHetIBPUrvpeN86f46tWgyM43AJZ0KTwWOYBSX4EzfsIiIDCSxoowqwobMRj4K8plKuk4zON6ls",
                                  tel="041900701",
                                  email="9YuV27x2ZZ@wJNP.com",
                                  external_id="J0aXH1uRWCYsw",
                                  page=9952,
                                  per_page=5943
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_9(self):
        response = client.send(pp.ListShops(
                                  private_money_id="329b1a56-9852-4dc2-9566-5b1248f6f858",
                                  name="AF7xeoT0y6lNlDnKEOyMV89HU",
                                  postal_code="057-6476",
                                  address="kSpdcLQvsJQRiuvWpRkphzntqbTr2v",
                                  tel="0666-7862-3097",
                                  email="dBxe8hiTzw@kLtz.com",
                                  external_id="fAa",
                                  page=8603,
                                  per_page=2616
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_10(self):
        response = client.send(pp.ListShops(
                                  organization_code="t50ubO70jcnj9t-335CJ-s-WrtL",
                                  private_money_id="6aa80989-5b3f-4906-983b-adb7070de342",
                                  name="6AmswdAM3IJrwVbs9pMxfMCthiv1a2EEHFmQw4OmJsXraAGliEBPmHrH76ocsr7yZptwOIMGRxZLktLdV7uiWarFr5GP0wp4l70ZsGyPlyZYRURgUMf0P5ozHDn0iOeoWIRRMyR0nQkh8Zz7eaFGoiOPKR0rUW9UTcnGDBsZuPfABdiNvfS9Anufij6THnocikBJOkD3FvwnaI0WeO",
                                  postal_code="740-3242",
                                  address="mmegc1KGhe3TxnuKac7CS1DK4Gnrr3oBLGMXHrz9mqfRhRmUp8pN9pjtBKEK1",
                                  tel="0339938-340",
                                  email="Zmu6u7tOxq@uneN.com",
                                  external_id="tGolCf6SjeF7SeZXyMS6WkNJ2GvSwQUcru",
                                  page=8154,
                                  per_page=2613
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_0(self):
        response = client.send(pp.CreateShop(
                                  "5cCw5ExNqh41OXXFwVmaHYw6oEFbK8qER1LlAIi5qYTqeIN9jftsBTkZDKCnQigIBcgyeHE0t"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_1(self):
        response = client.send(pp.CreateShop(
                                  "5cCw5ExNqh41OXXFwVmaHYw6oEFbK8qER1LlAIi5qYTqeIN9jftsBTkZDKCnQigIBcgyeHE0t",
                                  organization_code="y4-RP2-WA67-4397-5"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_2(self):
        response = client.send(pp.CreateShop(
                                  "5cCw5ExNqh41OXXFwVmaHYw6oEFbK8qER1LlAIi5qYTqeIN9jftsBTkZDKCnQigIBcgyeHE0t",
                                  shop_external_id="Ogp1VTNstKsbk2wvZcZ",
                                  organization_code="Jk0-n1o-al"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_3(self):
        response = client.send(pp.CreateShop(
                                  "5cCw5ExNqh41OXXFwVmaHYw6oEFbK8qER1LlAIi5qYTqeIN9jftsBTkZDKCnQigIBcgyeHE0t",
                                  shop_email="d5uwOg53j3@Qic0.com",
                                  shop_external_id="yKLnZxaZi9",
                                  organization_code="GG-"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_4(self):
        response = client.send(pp.CreateShop(
                                  "5cCw5ExNqh41OXXFwVmaHYw6oEFbK8qER1LlAIi5qYTqeIN9jftsBTkZDKCnQigIBcgyeHE0t",
                                  shop_tel="008767500",
                                  shop_email="SdiADG37ey@dGEN.com",
                                  shop_external_id="PuSUGCPNHip0Y3",
                                  organization_code="tq-o-ae-Y2-D-mBbpS3eFh1jdy-8u-v"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_5(self):
        response = client.send(pp.CreateShop(
                                  "5cCw5ExNqh41OXXFwVmaHYw6oEFbK8qER1LlAIi5qYTqeIN9jftsBTkZDKCnQigIBcgyeHE0t",
                                  shop_address="fX1fzmKZw4jAX5TdVMZA3FsBWHTaR7q8iHovbTWoPNbCUX3WmvU0lnYW7MWulxJqejEoXiemEzy22TP2wtSY9IoDSrJUA2sSTBsOwjVmr0bTbO79fqhITnnz7WaCAiQd9B8sle88sl7rSWKN9oQjHsNX48VkSyiuzE1L2wv36YuE4jwp0IiR44I5KLiO",
                                  shop_tel="020263-131",
                                  shop_email="xtTGifN6Kr@raD5.com",
                                  shop_external_id="ojwDmQdLNOKHIlDiaOh78QfhNbZ3YfGh",
                                  organization_code="uE1"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_6(self):
        response = client.send(pp.CreateShop(
                                  "5cCw5ExNqh41OXXFwVmaHYw6oEFbK8qER1LlAIi5qYTqeIN9jftsBTkZDKCnQigIBcgyeHE0t",
                                  shop_postal_code="9801535",
                                  shop_address="caXjUtBcNe9XyY4wthFo0glXBErIUB1p7aPMzXnAdDrY96Gn0OAQ9xSN0zfKx7ivixiVqjgvBNcsQLQxAtJmVTcXWtKUzkNd35gyuBKlwozbM8BIp6WWFtoNM3mKKWyblmmAHRSYCV0EDw10SY48ZoA8oj9alrEKYDjBWPKCwbirzvScUvjsqVkc",
                                  shop_tel="006-0992-667",
                                  shop_email="g0ANEHCj5e@M805.com",
                                  shop_external_id="wtsg2NkJBDvuxWoqdLq3",
                                  organization_code="9-3k68lq0O9X6D-pI"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_0(self):
        response = client.send(pp.CreateShopV2(
                                  "wJJuJPCjlaztijN3vebjT869"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_1(self):
        response = client.send(pp.CreateShopV2(
                                  "wJJuJPCjlaztijN3vebjT869",
                                  can_topup_private_money_ids=["9471e56a-e5bf-4b59-9250-43c38c555871", "b344271d-479b-4076-aebe-edda3e856731"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_2(self):
        response = client.send(pp.CreateShopV2(
                                  "wJJuJPCjlaztijN3vebjT869",
                                  private_money_ids=["f6122587-4c7a-4264-a11f-4a13c46a26f2", "3a116368-839b-4e5f-871e-cfa95bb93e48", "0c0210b7-3a0f-48a9-98cb-77031463f77e", "aed499ce-ae17-476f-aec7-9e7e1692fc44", "d08801ac-367c-4f7b-b0f1-3771cce36518", "af67b3ea-60d9-4eba-95e1-3b34202928b2", "a935ccce-0592-4d20-bbce-9598bb026337", "c02f2f1f-cbea-4ee0-bf10-38d7b41b802b", "62852894-9617-4fe2-948c-755bb68c13c1", "aebf60aa-51db-45b8-b385-cc28e8968d8d"],
                                  can_topup_private_money_ids=["124977b9-028c-43c3-9cea-e122d209de59", "6aac285d-8b03-4ce4-9be8-9d597fd276f9", "820807d2-8d2c-44b9-9a74-4c87629a8e57", "84fec1e8-dd14-4e3d-bccd-dc41640dcdcb"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_3(self):
        response = client.send(pp.CreateShopV2(
                                  "wJJuJPCjlaztijN3vebjT869",
                                  organization_code="A5-lRgrZc--HqP-iMbc",
                                  private_money_ids=["a3271672-f56b-471a-98aa-65564618cc1e", "c8f7459d-a5e9-449d-ace8-6fc9e9cba764", "6b634b51-eafc-40d7-8b75-24b70f08c3fb", "70fbdfca-581a-4112-9eb4-974e68cc9397", "ad24f7d9-005e-4e3a-a9a0-82f239cae2e0", "38c61dd8-d7f2-42f9-90bd-1dafbfea49d0", "d61de8b6-21ac-4e74-a1f1-983e9e44007f"],
                                  can_topup_private_money_ids=["ad5ad092-2ded-4287-ba36-a3a00e00fce8", "b03b2622-ff73-496e-9441-6783a3e201a4"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_4(self):
        response = client.send(pp.CreateShopV2(
                                  "wJJuJPCjlaztijN3vebjT869",
                                  external_id="9",
                                  organization_code="4j-Wx",
                                  private_money_ids=["588e6066-1249-4a7a-aa31-8b78ea56d95f", "f8f3d665-a9ed-46ee-b244-a52a9e0abf92", "7606ae85-61f8-4bb9-bf50-cca437203993", "5cbf0329-debe-4b87-9dae-d98396231fba"],
                                  can_topup_private_money_ids=["f8690721-9d26-4237-887b-4ed00a80a8fe", "b8198af7-edbb-47cc-9835-4440292f34ec", "9483c97f-4d8f-4577-aed7-9ddde74d6596", "a82d0d5a-b54b-4a75-9757-3a664f0d00b4", "21932524-ccee-4d35-bbf7-3c4e94686200", "23d1c950-51f1-40b2-b2ea-bece15ca43ab", "f917069c-5732-42a2-b8a8-a700a3b13851", "96f5f666-33d1-47fe-992e-4dcc4403f06e"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_5(self):
        response = client.send(pp.CreateShopV2(
                                  "wJJuJPCjlaztijN3vebjT869",
                                  email="Q9Qr2gs4rA@yEVt.com",
                                  external_id="2ws7WkJzpgGU",
                                  organization_code="4--9C-y-6w11-4JJ4508E--v",
                                  private_money_ids=["87351271-8785-4d74-b2e5-39ec66d9e4c9", "6a7b0917-ff6d-44ff-a755-e80790762692", "8d97b201-3ece-4d84-ad81-614c0b498c21", "de5ac891-ca65-458d-9396-0aaad9126b4b", "e6a85f45-8de6-4894-9855-48e371f38232", "24bd4b64-9cd1-4685-85a3-f1f81d7cd4f5", "c3129723-fcbc-4932-9c08-da0a75523a7b", "fc22cab2-08a6-41ff-a697-14457c7a335e", "2e917e5c-45b4-4ee2-8721-3f2d3bed64ab", "b605c058-506e-4b9a-9426-b9f3eda43f72"],
                                  can_topup_private_money_ids=["e49713c1-c575-4126-9f58-307ad2d38663", "d0d70740-1da6-4f1e-953a-9660ca62e2fa", "cddbd77c-4f74-4a04-801a-c6635623a96a", "6281c895-9f10-4470-a3fe-3ac4ee273363", "dd1c925c-91c9-4ea3-baf6-198484160e38", "5ca17e0d-6223-4890-942a-b792ed5d306a", "0f789625-34cb-417c-a2a6-d2315839ad64", "44c720af-71c9-4a63-a851-f90160076ecb"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_6(self):
        response = client.send(pp.CreateShopV2(
                                  "wJJuJPCjlaztijN3vebjT869",
                                  tel="07049-473",
                                  email="u0LI4T70lQ@wB45.com",
                                  external_id="3YpOK96EoFGxVJNTeRlFM4",
                                  organization_code="-T7X7Iq548-0s-9DH5Z5HMjk",
                                  private_money_ids=["2f7af162-5f3f-478b-8ff2-d4cd3767d0ea"],
                                  can_topup_private_money_ids=["ca77e6ea-90c6-4df7-b204-65890daa6241", "a81beb64-268f-440b-a20f-a8e39d890fc0", "e4f8b6fa-e2b5-4337-a6da-dface2f50d4f", "e0c290d7-bf29-4073-bc2c-b4c4db750772", "2fbd2130-19ad-43c4-ad99-c5a2dae95fea"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_7(self):
        response = client.send(pp.CreateShopV2(
                                  "wJJuJPCjlaztijN3vebjT869",
                                  address="9M12BOno1AcjM96oftC7mHhiSDgXKvVy5paxKD2XcOfyMo26iqol80j1t4n3lpnoezOx6Ov6eGwjQCqxdtQnDY4S9N4HhJ5rCsXRcUZY47cpIh03BvqB7CzLjYHoO28zEE65UlKtMCe12MUV2dxrA2428zEWnFZLX87qtedPzV8NdiYCurcmVOPZzwMWHgQ0VESfspW9b9NBdczTSynCfTiWLEN2pEbq7ZeB8PVJkE9NzaeTptZ5k",
                                  tel="0917771",
                                  email="QnEnTlLyub@wibc.com",
                                  external_id="5",
                                  organization_code="-L5-fR-en-93os8-3--MN6",
                                  private_money_ids=["41cefbaa-2fc0-427a-a24c-a9c683f930bd", "03dc006d-40e6-4da4-bf2a-6fc616a82ad3", "fe00a37a-5eb1-4a5b-b570-f8e54dae3bac", "48a590f2-9c1f-4594-99c8-b36826174955", "d1399dde-1935-4381-b60f-a1052fbf5581"],
                                  can_topup_private_money_ids=["4df5394c-68ba-4a20-b857-f60573da7db8", "fc8c193a-7259-45bb-aaf1-4e981c4746b1"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_8(self):
        response = client.send(pp.CreateShopV2(
                                  "wJJuJPCjlaztijN3vebjT869",
                                  postal_code="5802558",
                                  address="q3NykiRPYO2oQiAYMcKkXBWEu4RSjxgCW3jFlgob7yobgqdqFleVhpCebd",
                                  tel="00-31697",
                                  email="2YjP5pod5Q@aLCZ.com",
                                  external_id="TmFLxumOn",
                                  organization_code="7--pfe--nh-1--O53q7A-p--",
                                  private_money_ids=["0cb43db5-6894-44a5-9b49-22a903143749", "34587466-b211-450d-8562-9106f3443e20", "5fb06821-f6ac-4661-9293-1d97e10a73a6", "f1ebe083-31ec-46f0-9a7e-0ae407fca1aa", "9c48dea4-df28-4868-a0bf-7d54a6ea395d", "6d396310-bfd4-4728-8d7d-072cebe6258e"],
                                  can_topup_private_money_ids=["eaaadd70-1583-47d1-a6a7-b26fe4ef8bd3"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_shop_0(self):
        response = client.send(pp.GetShop(
                                  "1dba2796-4f52-483e-9487-f5b6546bde93"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_0(self):
        response = client.send(pp.UpdateShop(
                                  "319a0c01-8a60-4ee2-80b0-4ec9c89f47d9"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_1(self):
        response = client.send(pp.UpdateShop(
                                  "319a0c01-8a60-4ee2-80b0-4ec9c89f47d9",
                                  can_topup_private_money_ids=["7ce7811e-1db8-458b-a320-4d026aa53e84", "062d3c3a-1429-4602-b36a-93a18ee414d3", "bd82a17f-57ac-40f9-ada9-4b1b54747b1a", "d74d7080-e539-478a-9080-d943136b2406", "13e8c54c-849e-44ea-ab71-5238cedf3179", "514f338c-0b6a-4c5f-aa5e-c97f00d22d78", "208ccdc9-9c24-486e-bf7d-af6ff9c3c6af", "c5682613-ccc2-416e-8a4c-c6563cea22f7", "7a805705-bfb5-498a-8a4e-269e46026078", "97a55001-a49c-42c8-90a2-a3b7f0ec90c3"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_2(self):
        response = client.send(pp.UpdateShop(
                                  "319a0c01-8a60-4ee2-80b0-4ec9c89f47d9",
                                  private_money_ids=["5a27a1c9-5a39-4dd9-a221-48b541d65790", "2ce967f4-eccf-4551-9a2a-b4b2f2f34471"],
                                  can_topup_private_money_ids=["a64ae791-5f70-4db6-a58b-78425dda8190", "a5ea67ec-9421-42ef-829e-f570f3e68bf5", "22cb80ea-642b-4cce-ad99-874a8fa44713"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_3(self):
        response = client.send(pp.UpdateShop(
                                  "319a0c01-8a60-4ee2-80b0-4ec9c89f47d9",
                                  external_id="uVKWvjUjC0",
                                  private_money_ids=["c64458af-0ab3-465d-9b86-90664eff11b2", "61154127-fe01-47cc-bdef-933913db0fce", "c898b0f1-236c-48d6-b6ae-0575cf9ae458", "ce5e100c-9da6-4abe-aaa0-abcd5c833634", "d3440c3e-a879-4645-b96b-2d6403e72a5b"],
                                  can_topup_private_money_ids=["f924df37-7cec-4dd6-b65f-130165b1fd90", "1a190817-d11f-4151-8d5d-600d7d36c64b", "0a46d77c-4dde-466b-bc93-baa610954c7a", "0b38e436-5686-4ad2-bb9f-1b054eb4a1fb", "b3a403c5-f387-4b7a-af80-15490e3dccb7", "d72cc81f-c2e3-4eda-993d-ddfda395863a", "1097e857-3540-4b34-bfa9-cbe3c86e9ba7", "6049838d-0d97-4e0d-9b30-9499f0fed147"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_4(self):
        response = client.send(pp.UpdateShop(
                                  "319a0c01-8a60-4ee2-80b0-4ec9c89f47d9",
                                  email="yNh6EpQVqX@4KE4.com",
                                  external_id="5KR",
                                  private_money_ids=["92d773a5-54dc-463c-8478-0f0206ce2dbd", "1e073b53-d053-422d-bd70-cf8f465a56f0", "ed67b71c-8c56-4988-8f52-5799cb86822b"],
                                  can_topup_private_money_ids=["dbf2f57b-6f4c-4a79-b650-325f782fdbcf"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_5(self):
        response = client.send(pp.UpdateShop(
                                  "319a0c01-8a60-4ee2-80b0-4ec9c89f47d9",
                                  tel="038-87-5062",
                                  email="7dHE8reh9b@3v7z.com",
                                  external_id="YS2",
                                  private_money_ids=["4d62e930-4525-40c5-870a-11f340449dbf", "3734f6a0-e7d0-4ed0-a207-a276f90d83a3", "2b1cd3d1-e2ba-4a76-83bb-ae2fb1519e18", "cd1f8e7c-84d9-4e6b-8150-5ac2f344eea9", "70b576ca-3c37-4a1a-b7a0-a8ed43d150e7", "8a00ce14-0d13-4c43-9e0e-203b19378957", "2f603e4e-67cb-429a-8450-e8a7b32cb4b1"],
                                  can_topup_private_money_ids=[]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_6(self):
        response = client.send(pp.UpdateShop(
                                  "319a0c01-8a60-4ee2-80b0-4ec9c89f47d9",
                                  address="enxAKZBD2FhNoFZKIbAgSoRCKxxDEWQZO9yz4Mc4BWxPS7UaVHpVi4pZYZOGKLSewvJuaN97ObUNQZ0A0Rwk2Z2omGatDjCcJfOMaGd4kHySUJYrKI48UyLazcdaqg9M9b56VUQzIG7Yr7fsBnFuG56tOVY8vi9Z9lrb",
                                  tel="07-8431-6229",
                                  email="dPS2DfLew9@jsvL.com",
                                  external_id="XjFRqAsdyU0EjzFGdoCEVoN09yrlyTlHcxkp",
                                  private_money_ids=["1e253ae8-b900-4364-8d69-ae1220adce4a", "c990d3af-79d7-482f-b35e-278ab6e04338"],
                                  can_topup_private_money_ids=["f6294826-30a5-4b2d-9fa7-548ac8c250e5", "c1197029-5aef-4b41-b1f6-79678d085486", "0febff67-1e30-4488-b17a-305ac560f915"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_7(self):
        response = client.send(pp.UpdateShop(
                                  "319a0c01-8a60-4ee2-80b0-4ec9c89f47d9",
                                  postal_code="777-7247",
                                  address="gWRTNwobRsB1baR1aePdc9fGH",
                                  tel="03-452-017",
                                  email="5Jr7zEeO7n@UDqx.com",
                                  external_id="j74j643AIOVakyq8QHWKNric3",
                                  private_money_ids=["98829d42-795e-4d7f-9fd1-afd942de89a8", "9aba5da3-35bb-4657-b34b-bd5bf85d005f", "b8cf7af4-4f8b-4276-ae78-f76f201e3428", "1ffb49fb-8f51-4dca-af1d-d905313401cc"],
                                  can_topup_private_money_ids=[]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_8(self):
        response = client.send(pp.UpdateShop(
                                  "319a0c01-8a60-4ee2-80b0-4ec9c89f47d9",
                                  name="loM94TQVFchkaVLnKXq1JcpZfZUH2UsKCxnRcuSoLNAly4QR5kzfucn7LZFZw",
                                  postal_code="8958602",
                                  address="JGwbFSZ2qU3L9frpqlrETgz3O9wlyQ0TWfR4Gx21zM7WIQGDsPsJyAShBlCJPjtVj6RA58jW2j8noWbhryHKQAP2bBeZkmIh2UeN7Z047tEp9MnaMKkPTTOh4KlFXKgtixsqVTYrrSHZ1a0tz4EzkuhUCHWp85qyAYWUJWst1yIlHOt0XiM6Qkur8SbZd3wcuCesxkTgeU",
                                  tel="06419716",
                                  email="L5t780R8L5@VrLx.com",
                                  external_id="zR",
                                  private_money_ids=["e0ab3283-3c51-4612-bc6c-7756cbf66c75", "ab66f78a-4d24-442f-b0dc-beac75d52dda", "f4e91560-95e4-44eb-adc8-9481ec8c27d7", "d0d0f59b-e927-4764-90dd-b5d5d648ee98", "0c428be9-6d00-408a-ba56-47acec9262bd", "60427415-8ac4-4daa-b1e5-8748ed87ee5e", "bf947585-3450-4006-a3d1-88d6bace351b", "7f990cfc-5274-4799-919d-702360279503", "e535e5ec-c34f-41ea-ba53-c51c3cf57fa9"],
                                  can_topup_private_money_ids=["231178b3-8731-4c05-8d7f-01f8af007490", "321f9f15-5706-4b71-9bb8-1fd3fe26f421"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_moneys_0(self):
        response = client.send(pp.GetPrivateMoneys(
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_moneys_1(self):
        response = client.send(pp.GetPrivateMoneys(
                                  per_page=3545
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_moneys_2(self):
        response = client.send(pp.GetPrivateMoneys(
                                  page=2545,
                                  per_page=6265
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_moneys_3(self):
        response = client.send(pp.GetPrivateMoneys(
                                  organization_code="-2V-c00-lsJ--485-YX",
                                  page=3242,
                                  per_page=5035
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_organization_summaries_0(self):
        response = client.send(pp.GetPrivateMoneyOrganizationSummaries(
                                  "47bd441f-be24-42f8-9cc7-b83b54c12ce0"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_organization_summaries_1(self):
        response = client.send(pp.GetPrivateMoneyOrganizationSummaries(
                                  "47bd441f-be24-42f8-9cc7-b83b54c12ce0",
                                  page=2863
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_organization_summaries_2(self):
        response = client.send(pp.GetPrivateMoneyOrganizationSummaries(
                                  "47bd441f-be24-42f8-9cc7-b83b54c12ce0",
                                  per_page=4757,
                                  page=94
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_organization_summaries_3(self):
        response = client.send(pp.GetPrivateMoneyOrganizationSummaries(
                                  "47bd441f-be24-42f8-9cc7-b83b54c12ce0",
                                  from="2024-02-08T06:29:36.000000+09:00",
                                  to="2025-05-21T16:02:13.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_organization_summaries_4(self):
        response = client.send(pp.GetPrivateMoneyOrganizationSummaries(
                                  "47bd441f-be24-42f8-9cc7-b83b54c12ce0",
                                  from="2025-01-24T05:20:49.000000+09:00",
                                  to="2025-03-21T06:13:52.000000+09:00",
                                  page=7828
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_organization_summaries_5(self):
        response = client.send(pp.GetPrivateMoneyOrganizationSummaries(
                                  "47bd441f-be24-42f8-9cc7-b83b54c12ce0",
                                  from="2016-08-16T20:42:13.000000+09:00",
                                  to="2024-12-12T10:29:17.000000+09:00",
                                  per_page=9609,
                                  page=344
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_summary_0(self):
        response = client.send(pp.GetPrivateMoneySummary(
                                  "207277b1-3eac-4eda-8fe8-61f8d320daad"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_summary_1(self):
        response = client.send(pp.GetPrivateMoneySummary(
                                  "207277b1-3eac-4eda-8fe8-61f8d320daad",
                                  to="2020-05-10T10:53:48.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_summary_2(self):
        response = client.send(pp.GetPrivateMoneySummary(
                                  "207277b1-3eac-4eda-8fe8-61f8d320daad",
                                  from="2018-08-17T19:25:08.000000+09:00",
                                  to="2017-02-18T18:01:35.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_0(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "a804d396-c0bd-4bc8-83fb-80edddd57010"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_1(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "a804d396-c0bd-4bc8-83fb-80edddd57010",
                                  per_page=6306
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_2(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "a804d396-c0bd-4bc8-83fb-80edddd57010",
                                  page=568,
                                  per_page=7044
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_3(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "a804d396-c0bd-4bc8-83fb-80edddd57010",
                                  to="2017-03-04T12:47:41.000000+09:00",
                                  page=6492,
                                  per_page=4773
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_4(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "a804d396-c0bd-4bc8-83fb-80edddd57010",
                                  from="2023-07-12T05:20:36.000000+09:00",
                                  to="2022-11-02T06:39:42.000000+09:00",
                                  page=9959,
                                  per_page=9931
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_5(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "a804d396-c0bd-4bc8-83fb-80edddd57010",
                                  is_modified=True,
                                  from="2018-03-07T19:23:07.000000+09:00",
                                  to="2018-02-02T02:34:09.000000+09:00",
                                  page=403,
                                  per_page=9309
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_6(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "a804d396-c0bd-4bc8-83fb-80edddd57010",
                                  type="topup",
                                  is_modified=False,
                                  from="2024-02-03T09:38:39.000000+09:00",
                                  to="2025-07-21T11:03:54.000000+09:00",
                                  page=9365,
                                  per_page=9128
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_7(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "a804d396-c0bd-4bc8-83fb-80edddd57010",
                                  receiver_customer_id="8d502c53-31cb-4f93-8ba8-a1fcf5d66752",
                                  type="cashback",
                                  is_modified=False,
                                  from="2020-12-12T00:34:00.000000+09:00",
                                  to="2021-02-25T20:52:44.000000+09:00",
                                  page=3341,
                                  per_page=3336
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_8(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "a804d396-c0bd-4bc8-83fb-80edddd57010",
                                  sender_customer_id="19fc2c78-ddc0-46b8-8963-2b6986fd9ae0",
                                  receiver_customer_id="841e4321-a7ce-4d72-8bf7-2b654d5e9d15",
                                  type="exchange",
                                  is_modified=True,
                                  from="2020-03-20T03:48:42.000000+09:00",
                                  to="2019-05-25T02:41:42.000000+09:00",
                                  page=784,
                                  per_page=941
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_bulk_transaction_0(self):
        response = client.send(pp.GetBulkTransaction(
                                  "cc139cd3-54a4-49fe-9bf0-d9395aadd2b0"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_cashtray_0(self):
        response = client.send(pp.CreateCashtray(
                                  "7b2ba0a6-dee3-4169-bd25-5afb57c27b40",
                                  "dc3626b6-77fc-47c4-b069-b447dbd7c6e4",
                                  7392.0
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_cashtray_1(self):
        response = client.send(pp.CreateCashtray(
                                  "7b2ba0a6-dee3-4169-bd25-5afb57c27b40",
                                  "dc3626b6-77fc-47c4-b069-b447dbd7c6e4",
                                  7392.0,
                                  expires_in=7826
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_cashtray_2(self):
        response = client.send(pp.CreateCashtray(
                                  "7b2ba0a6-dee3-4169-bd25-5afb57c27b40",
                                  "dc3626b6-77fc-47c4-b069-b447dbd7c6e4",
                                  7392.0,
                                  description="dOVzLT6tirwJLurByrAGwszVwlQAuTXTWtKg2YB5YxVquVYsbDyysRisRQ9ectqoj4yKOsEPCrpQPvSjUDltH57ysDpO4lTbJ9dqwKn5NSHIJ7mbc5qbOnYCYxA4AjI47p6qtIsaCpt80GzH1FRWe6",
                                  expires_in=6500
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_cashtray_0(self):
        response = client.send(pp.GetCashtray(
                                  "7aa080f7-0ea8-4a85-a6fe-1dcdac93f7a3"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_cancel_cashtray_0(self):
        response = client.send(pp.CancelCashtray(
                                  "6b1bf8c8-a061-49c0-a5ca-53c7e7365805"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_cashtray_0(self):
        response = client.send(pp.UpdateCashtray(
                                  "04fa8406-5ac6-4203-98f1-d63f1d329980"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_cashtray_1(self):
        response = client.send(pp.UpdateCashtray(
                                  "04fa8406-5ac6-4203-98f1-d63f1d329980",
                                  expires_in=399
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_cashtray_2(self):
        response = client.send(pp.UpdateCashtray(
                                  "04fa8406-5ac6-4203-98f1-d63f1d329980",
                                  description="wAY75stQD6SAh41fZii84vybd1Jsf0jR3rzbwtxyn2FAh1zUedGEpNztrZH4AytTHxVvHVgjPvTnTRbAGxJFBzSBdN9r",
                                  expires_in=8985
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_cashtray_3(self):
        response = client.send(pp.UpdateCashtray(
                                  "04fa8406-5ac6-4203-98f1-d63f1d329980",
                                  amount=9387.0,
                                  description="Ml90EeuZgaP20pyyEjfyZn",
                                  expires_in=3199
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_0(self):
        response = client.send(pp.CreateCampaign(
                                  "BHpzVqBZqNRFUo9BhqQxq9FR8VF2gH7EAnlFEgMmyi8jmBN0T80aLvrKoRyTXgPVT4Az",
                                  "e60cfb65-025c-41ef-9a45-3e1759e3633b",
                                  "2018-11-30T11:04:25.000000+09:00",
                                  "2017-09-30T18:52:58.000000+09:00",
                                  3829,
                                  "payment"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_1(self):
        response = client.send(pp.CreateCampaign(
                                  "BHpzVqBZqNRFUo9BhqQxq9FR8VF2gH7EAnlFEgMmyi8jmBN0T80aLvrKoRyTXgPVT4Az",
                                  "e60cfb65-025c-41ef-9a45-3e1759e3633b",
                                  "2018-11-30T11:04:25.000000+09:00",
                                  "2017-09-30T18:52:58.000000+09:00",
                                  3829,
                                  "payment",
                                  dest_private_money_id="0f518127-01d2-45f9-be0a-b4bb1ba833af"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_2(self):
        response = client.send(pp.CreateCampaign(
                                  "BHpzVqBZqNRFUo9BhqQxq9FR8VF2gH7EAnlFEgMmyi8jmBN0T80aLvrKoRyTXgPVT4Az",
                                  "e60cfb65-025c-41ef-9a45-3e1759e3633b",
                                  "2018-11-30T11:04:25.000000+09:00",
                                  "2017-09-30T18:52:58.000000+09:00",
                                  3829,
                                  "payment",
                                  minimum_number_for_combination_purchase=7472,
                                  dest_private_money_id="274e8422-ee20-4471-ac15-fbec8a743ad7"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_3(self):
        response = client.send(pp.CreateCampaign(
                                  "BHpzVqBZqNRFUo9BhqQxq9FR8VF2gH7EAnlFEgMmyi8jmBN0T80aLvrKoRyTXgPVT4Az",
                                  "e60cfb65-025c-41ef-9a45-3e1759e3633b",
                                  "2018-11-30T11:04:25.000000+09:00",
                                  "2017-09-30T18:52:58.000000+09:00",
                                  3829,
                                  "payment",
                                  applicable_shop_ids=["15cafefc-e9f9-46bc-a685-02c33b3f8a9b", "e8215f1d-664e-4056-a57a-b521fbdf2ed4", "8dc559c4-09c4-48a8-8ac3-5dd5e6105ace", "d5c68923-4689-458e-960f-1327d8b0015e", "d9c4c614-4ca9-4930-9b3a-7a0b32a8d00b", "ea73e1b0-ff46-4717-95b2-fa7b51c45b0b", "a6194ad6-6c88-42de-91af-03e811b842fd"],
                                  minimum_number_for_combination_purchase=7081,
                                  dest_private_money_id="ee5834ee-7929-4e10-9890-c95e409e9333"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_4(self):
        response = client.send(pp.CreateCampaign(
                                  "BHpzVqBZqNRFUo9BhqQxq9FR8VF2gH7EAnlFEgMmyi8jmBN0T80aLvrKoRyTXgPVT4Az",
                                  "e60cfb65-025c-41ef-9a45-3e1759e3633b",
                                  "2018-11-30T11:04:25.000000+09:00",
                                  "2017-09-30T18:52:58.000000+09:00",
                                  3829,
                                  "payment",
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["2cf489ed-ef9b-45af-8f83-ce9ad0b4bcc0"],
                                  minimum_number_for_combination_purchase=5700,
                                  dest_private_money_id="a68f30d3-46cd-4ec4-bcfa-29baa739e82c"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_5(self):
        response = client.send(pp.CreateCampaign(
                                  "BHpzVqBZqNRFUo9BhqQxq9FR8VF2gH7EAnlFEgMmyi8jmBN0T80aLvrKoRyTXgPVT4Az",
                                  "e60cfb65-025c-41ef-9a45-3e1759e3633b",
                                  "2018-11-30T11:04:25.000000+09:00",
                                  "2017-09-30T18:52:58.000000+09:00",
                                  3829,
                                  "payment",
                                  applicable_days_of_week=[5, 4, 3, 4, 3],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["860f63fe-30c8-469b-8249-41d50aa83bc2", "cedde10e-62a1-4479-b9df-a394c3aa9930", "e50a20de-8b7e-4c9e-896c-0e0ea833c6e2", "6c9ad8e6-c216-4783-b8a1-ac42b76fd9fe", "703d06a2-9325-48f9-a525-4889a459c72c", "068db7a5-c49f-4a79-8cfe-c35ee947f585", "3fb10f27-3280-4edd-a74a-c66ce37087ec", "653ee761-80f4-4df9-93aa-09b0ab2cae65", "9e4c8bf8-8a6f-45bb-965a-5a775ab33a3d", "6781fcff-0f3c-446e-9dd8-e332d516f594"],
                                  minimum_number_for_combination_purchase=9038,
                                  dest_private_money_id="0e9999ad-a81b-467d-aa4a-4d56cb7d336b"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_6(self):
        response = client.send(pp.CreateCampaign(
                                  "BHpzVqBZqNRFUo9BhqQxq9FR8VF2gH7EAnlFEgMmyi8jmBN0T80aLvrKoRyTXgPVT4Az",
                                  "e60cfb65-025c-41ef-9a45-3e1759e3633b",
                                  "2018-11-30T11:04:25.000000+09:00",
                                  "2017-09-30T18:52:58.000000+09:00",
                                  3829,
                                  "payment",
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[6, 5, 2, 2],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=[],
                                  minimum_number_for_combination_purchase=6213,
                                  dest_private_money_id="3375b838-1f4e-4d73-ace9-c0b09a66570c"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_7(self):
        response = client.send(pp.CreateCampaign(
                                  "BHpzVqBZqNRFUo9BhqQxq9FR8VF2gH7EAnlFEgMmyi8jmBN0T80aLvrKoRyTXgPVT4Az",
                                  "e60cfb65-025c-41ef-9a45-3e1759e3633b",
                                  "2018-11-30T11:04:25.000000+09:00",
                                  "2017-09-30T18:52:58.000000+09:00",
                                  3829,
                                  "payment",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[2, 3, 1, 2],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["726260c8-b049-4e69-8deb-f0f5cab9738b", "5bf55ff7-5acc-425f-9e51-e5961ca7e626", "527703c1-f383-48e9-8bfb-98a8f0bf5b7f", "186c481f-9a11-4f0b-a73d-8630c3fc44be", "6d20739a-9359-4abe-af72-40c4835792c8"],
                                  minimum_number_for_combination_purchase=9232,
                                  dest_private_money_id="d38c401e-5b9c-4593-a0ab-654c478c7e01"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_8(self):
        response = client.send(pp.CreateCampaign(
                                  "BHpzVqBZqNRFUo9BhqQxq9FR8VF2gH7EAnlFEgMmyi8jmBN0T80aLvrKoRyTXgPVT4Az",
                                  "e60cfb65-025c-41ef-9a45-3e1759e3633b",
                                  "2018-11-30T11:04:25.000000+09:00",
                                  "2017-09-30T18:52:58.000000+09:00",
                                  3829,
                                  "payment",
                                  subject="money",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[],
                                  applicable_days_of_week=[3, 1, 1, 4, 0, 2],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=[],
                                  minimum_number_for_combination_purchase=3975,
                                  dest_private_money_id="2f8df75f-bfab-4dbc-8e3b-901f7f3bb710"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_9(self):
        response = client.send(pp.CreateCampaign(
                                  "BHpzVqBZqNRFUo9BhqQxq9FR8VF2gH7EAnlFEgMmyi8jmBN0T80aLvrKoRyTXgPVT4Az",
                                  "e60cfb65-025c-41ef-9a45-3e1759e3633b",
                                  "2018-11-30T11:04:25.000000+09:00",
                                  "2017-09-30T18:52:58.000000+09:00",
                                  3829,
                                  "payment",
                                  is_exclusive=False,
                                  subject="money",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[1, 4, 2],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["14a888b3-7aa8-473c-a71f-cf1692658030", "c15343ee-82cb-4db7-83f4-22e2788832b3", "8d95431c-8362-4f01-b448-191d7ed17d16", "938ee356-c10f-48c7-81e0-944afc49e54a"],
                                  minimum_number_for_combination_purchase=6630,
                                  dest_private_money_id="87cd0e16-3b0e-4a6a-a599-9b514c94be62"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_10(self):
        response = client.send(pp.CreateCampaign(
                                  "BHpzVqBZqNRFUo9BhqQxq9FR8VF2gH7EAnlFEgMmyi8jmBN0T80aLvrKoRyTXgPVT4Az",
                                  "e60cfb65-025c-41ef-9a45-3e1759e3633b",
                                  "2018-11-30T11:04:25.000000+09:00",
                                  "2017-09-30T18:52:58.000000+09:00",
                                  3829,
                                  "payment",
                                  point_expires_in_days=657,
                                  is_exclusive=False,
                                  subject="money",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[6, 1, 2, 2, 2, 1, 6],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["a053fe03-e795-4430-9a71-75cc5ec3b745", "f7401a77-a719-4f78-9a77-03abd4a26a9c", "25a5262f-1d2d-4d6a-b81a-cf01123aed95", "5e985e55-6f34-4941-a834-4f4bee553bbc", "e7374ada-7fc2-4d7b-a17f-12a07823ba51"],
                                  minimum_number_for_combination_purchase=1032,
                                  dest_private_money_id="27b30364-d676-42f5-91e2-2835f1887fe0"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_11(self):
        response = client.send(pp.CreateCampaign(
                                  "BHpzVqBZqNRFUo9BhqQxq9FR8VF2gH7EAnlFEgMmyi8jmBN0T80aLvrKoRyTXgPVT4Az",
                                  "e60cfb65-025c-41ef-9a45-3e1759e3633b",
                                  "2018-11-30T11:04:25.000000+09:00",
                                  "2017-09-30T18:52:58.000000+09:00",
                                  3829,
                                  "payment",
                                  point_expires_at="2022-09-13T07:14:33.000000+09:00",
                                  point_expires_in_days=4502,
                                  is_exclusive=False,
                                  subject="all",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[1, 6, 4, 4, 3, 6, 4, 4, 1, 6],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["e91438f4-fe3e-496c-a800-f38e81c66abb", "693419f4-da26-40c1-9558-49718c9ddedc", "7780f166-680a-4636-96f5-dc10074d6b93", "f1e6518f-5b65-4672-9874-24bcface8d9a", "c35a5506-e60e-4ced-ac0e-bb56e9516070", "8e47ae13-851d-4b1c-bd33-3f695aad6ad0"],
                                  minimum_number_for_combination_purchase=920,
                                  dest_private_money_id="44ef85f1-b6af-44d2-a8e2-c38f83941603"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_12(self):
        response = client.send(pp.CreateCampaign(
                                  "BHpzVqBZqNRFUo9BhqQxq9FR8VF2gH7EAnlFEgMmyi8jmBN0T80aLvrKoRyTXgPVT4Az",
                                  "e60cfb65-025c-41ef-9a45-3e1759e3633b",
                                  "2018-11-30T11:04:25.000000+09:00",
                                  "2017-09-30T18:52:58.000000+09:00",
                                  3829,
                                  "payment",
                                  status="disabled",
                                  point_expires_at="2025-06-01T15:08:23.000000+09:00",
                                  point_expires_in_days=1733,
                                  is_exclusive=True,
                                  subject="money",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[0, 5, 6, 4],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["3f647cb8-b57e-4649-8015-d6fbcef3a06b", "b83f65e0-f207-4768-b4d4-c9e6c4de3c15", "b233a161-671b-4551-97cc-340f75ef989f"],
                                  minimum_number_for_combination_purchase=8671,
                                  dest_private_money_id="6259b271-db3b-4505-963c-fee8f70db1a1"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_13(self):
        response = client.send(pp.CreateCampaign(
                                  "BHpzVqBZqNRFUo9BhqQxq9FR8VF2gH7EAnlFEgMmyi8jmBN0T80aLvrKoRyTXgPVT4Az",
                                  "e60cfb65-025c-41ef-9a45-3e1759e3633b",
                                  "2018-11-30T11:04:25.000000+09:00",
                                  "2017-09-30T18:52:58.000000+09:00",
                                  3829,
                                  "payment",
                                  description="FbA6TsT4rGSzhCtzrrQIFeK35Z3EF7SWnLL5qkYPGTd8wILW6Ubji6nDVo6kwtt0eE996vZBp0zzwPN5DIhcy9tg03Xeu",
                                  status="enabled",
                                  point_expires_at="2020-03-09T08:10:07.000000+09:00",
                                  point_expires_in_days=6614,
                                  is_exclusive=True,
                                  subject="money",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[3, 3, 2],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["88bec65e-920f-4b88-a9e6-d8596416fbca", "9d2677ad-e260-4e16-b8ed-e6e141b54ccf", "d81ac31f-c699-42b8-b4bd-9d57a0f6b903", "9b030e23-0012-4497-9d4b-a82045aa9416", "61e0d203-2ce9-4827-a5f1-1b06fc773d70", "fbd664fa-873f-47f9-a0c6-9efb2db88577", "26e110e3-037e-48b0-9b3b-9b16b210b24f", "c2b1d8fc-4406-4fb5-b191-d85dcaef2044", "5f6bac48-fa96-4f07-b60c-21e369c2353c"],
                                  minimum_number_for_combination_purchase=1602,
                                  dest_private_money_id="d12f3564-27f9-4b93-bf56-ee5a298b9285"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_14(self):
        response = client.send(pp.CreateCampaign(
                                  "BHpzVqBZqNRFUo9BhqQxq9FR8VF2gH7EAnlFEgMmyi8jmBN0T80aLvrKoRyTXgPVT4Az",
                                  "e60cfb65-025c-41ef-9a45-3e1759e3633b",
                                  "2018-11-30T11:04:25.000000+09:00",
                                  "2017-09-30T18:52:58.000000+09:00",
                                  3829,
                                  "payment",
                                  bear_point_shop_id="319c9b3d-e86e-43bb-9a34-0c6f7828e8b5",
                                  description="A5DSTN7FZ8Y8t8MIK7GdyM50XmxAy3ATlXa99m3Ela8zcR94JgHtiXrfi45gdORj3Jla3Pfb8OgNhhqnfBQjVsClPPd45bUBovESo5O7DwwlNZPFf6xG0YeVkLQLhc7hbuv3B8S8pH3eqOx8cOR3TFR9a8hMUMtt7RdIKeKSciqwdkkgvqZQpE",
                                  status="disabled",
                                  point_expires_at="2024-07-17T09:36:41.000000+09:00",
                                  point_expires_in_days=8193,
                                  is_exclusive=True,
                                  subject="money",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[6, 0, 2, 0, 4, 2, 1, 5, 1, 2],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["c47a2e37-b8fb-43d9-98ed-64d44e50f08e", "1e61cf10-4974-4c0f-8908-1d0d41fb6bca", "df564315-6ad9-486a-b073-06be67a354b5", "3fb0d66e-6ab0-453b-ac46-42010e357aea", "14a0e187-16ac-4e9e-a327-726df3ed4e19", "5e2678dd-061c-4810-9487-2dc625174ff6", "40df89de-54cf-40b6-9090-85df72e2403e", "ec1c997f-f002-455a-aaad-ae3e7a84d056", "16f68e58-fe38-4a99-9c37-7ed00138e015"],
                                  minimum_number_for_combination_purchase=1101,
                                  dest_private_money_id="8bc265fa-4252-4429-8032-3ab9914691ef"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_campaigns_0(self):
        response = client.send(pp.ListCampaigns(
                                  "fb229154-3b05-4c43-9ff6-fd8c6b60cb12"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_campaigns_1(self):
        response = client.send(pp.ListCampaigns(
                                  "fb229154-3b05-4c43-9ff6-fd8c6b60cb12",
                                  per_page=690
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_campaigns_2(self):
        response = client.send(pp.ListCampaigns(
                                  "fb229154-3b05-4c43-9ff6-fd8c6b60cb12",
                                  page=5886,
                                  per_page=9959
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_campaigns_3(self):
        response = client.send(pp.ListCampaigns(
                                  "fb229154-3b05-4c43-9ff6-fd8c6b60cb12",
                                  is_ongoing=True,
                                  page=3359,
                                  per_page=4634
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_campaign_0(self):
        response = client.send(pp.GetCampaign(
                                  "77b3eb68-190c-4cd6-a76c-5bbb723f82cc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_0(self):
        response = client.send(pp.UpdateCampaign(
                                  "0292e4f0-7e8e-43cb-a782-75f43fe77c72"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_1(self):
        response = client.send(pp.UpdateCampaign(
                                  "0292e4f0-7e8e-43cb-a782-75f43fe77c72",
                                  minimum_number_for_combination_purchase=4756
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_2(self):
        response = client.send(pp.UpdateCampaign(
                                  "0292e4f0-7e8e-43cb-a782-75f43fe77c72",
                                  applicable_shop_ids=["63ab7db0-4204-4361-bb8d-ac580f80fc8d", "0499c1bb-daed-45ec-b0c9-593841d733be", "dba47b95-36aa-447d-8cc1-11b74ac5a81f", "6a684d73-8150-4f8a-9978-efb7f16ca0cb", "8b5dc11f-fb92-499b-9ed7-afba931d45f3", "c20a257b-1ab9-4b47-b266-b3afeccdf390", "f0d1576b-9ce3-4ec7-86ab-4200d1d03df8", "08c6b290-e209-4b6c-abbf-6f1524da51d4", "adad4ea4-c707-4497-855b-44592ce8556a"],
                                  minimum_number_for_combination_purchase=25
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_3(self):
        response = client.send(pp.UpdateCampaign(
                                  "0292e4f0-7e8e-43cb-a782-75f43fe77c72",
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["17742386-a306-4ee7-a9d0-d06c347a9378", "8b76b58b-f7ee-43fa-b066-5d5ec1e67222", "18693239-9cd8-4604-afa3-44e302e79197"],
                                  minimum_number_for_combination_purchase=7644
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_4(self):
        response = client.send(pp.UpdateCampaign(
                                  "0292e4f0-7e8e-43cb-a782-75f43fe77c72",
                                  applicable_days_of_week=[0, 4, 0, 1, 0, 2, 0, 0],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["b597ee0b-80f1-4a99-a016-afcd1d416a8a", "ede34d20-fb54-4c77-9b8b-91b9d7f5cf9c", "1123f743-749d-492f-9dc7-bb4d450967ab", "bed26a85-1407-4606-94f2-9570372a711d", "ef5e3775-7a70-453e-ae5a-48a61252b617", "107b8950-7640-4733-ae74-6b2efff632bb", "18996458-af4c-4ac7-8ca3-572d287b3d1f", "ed2cd0e4-8820-4ac9-a0b4-0b42e1ca309e", "89fafb2c-b9a4-4751-a5cd-41cb1fe66b4e"],
                                  minimum_number_for_combination_purchase=8427
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_5(self):
        response = client.send(pp.UpdateCampaign(
                                  "0292e4f0-7e8e-43cb-a782-75f43fe77c72",
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[0, 0, 1, 3],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=[],
                                  minimum_number_for_combination_purchase=2679
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_6(self):
        response = client.send(pp.UpdateCampaign(
                                  "0292e4f0-7e8e-43cb-a782-75f43fe77c72",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[4, 4, 4, 2, 1, 0, 1],
                                  applicable_time_ranges=[],
                                  applicable_shop_ids=["d822e189-3f66-4b89-8155-2b2322643c75", "02f06147-36a6-4e5d-82c8-808837b8b755", "fea8c76e-72c3-4795-8ef6-2de3ddbb0889", "37ce9234-9414-4441-a935-79c8bef181ec", "b56cc10c-6643-4c6f-bc12-95b2a7aa0640", "968f0c24-7261-4237-8f04-73bc8042edec", "497dc06c-9fa2-47be-9f55-f03d1c08b487", "10b1289b-08ff-416c-8d3e-ed4fa7004cc3", "ecbd2b9e-4f0e-4f47-a3a1-73599f7c7761"],
                                  minimum_number_for_combination_purchase=8433
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_7(self):
        response = client.send(pp.UpdateCampaign(
                                  "0292e4f0-7e8e-43cb-a782-75f43fe77c72",
                                  subject="money",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[1, 4, 1, 5, 0, 3, 4, 3],
                                  applicable_time_ranges=[],
                                  applicable_shop_ids=["b25b5288-5bf4-436f-8f59-9a168abe990f"],
                                  minimum_number_for_combination_purchase=8972
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_8(self):
        response = client.send(pp.UpdateCampaign(
                                  "0292e4f0-7e8e-43cb-a782-75f43fe77c72",
                                  is_exclusive=False,
                                  subject="all",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[0, 0, 6, 0],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=[],
                                  minimum_number_for_combination_purchase=662
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_9(self):
        response = client.send(pp.UpdateCampaign(
                                  "0292e4f0-7e8e-43cb-a782-75f43fe77c72",
                                  point_expires_in_days=5273,
                                  is_exclusive=False,
                                  subject="money",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[3, 3, 3, 0, 1],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["5a668aaf-bcea-4ce7-af63-f81907971ef5", "4eb80c75-95d7-48d3-b5f5-3d2ca69e0fd0", "92a363af-de84-4c37-b15b-b4041567490a", "c254a1a6-7a24-4e5d-9003-ced8ababa9dc", "6d7dc249-f508-4390-8484-5ad6873b0ffc", "2f299f3a-50d9-42a1-9cc0-33de36a863fa", "000c7587-8288-434e-aace-177bdde60311", "a1e222c0-c429-4969-959a-859300993200", "ff59a54c-258a-40a9-8612-3657dd2f0421"],
                                  minimum_number_for_combination_purchase=9
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_10(self):
        response = client.send(pp.UpdateCampaign(
                                  "0292e4f0-7e8e-43cb-a782-75f43fe77c72",
                                  point_expires_at="2021-05-27T23:46:14.000000+09:00",
                                  point_expires_in_days=3990,
                                  is_exclusive=True,
                                  subject="money",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[5, 4, 5, 5, 0, 6, 4],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["ff25d5f0-1095-44ac-b9a3-9b23b6ecc635", "46acdf10-6790-4860-bc6f-5e1a8e9abf60", "6a507c37-e8f2-4f45-8eb4-96e530305e8e", "79ecc92d-5669-4d08-849a-b271139b7296", "bd2d2ed9-504a-4f56-85a1-d4e7d6ed69b5", "69038f7d-220f-4e55-9a96-4aaa8af203cf", "38f9b0dd-975b-4b06-8e3f-d325d6c81668", "91b1e54a-982e-4bbd-813e-c5dd2d40effe", "3fe30ce2-edbb-4fc8-b708-329ff7fc4440", "9c7333ce-285d-4f4c-a7f5-a18b8557b13d"],
                                  minimum_number_for_combination_purchase=3919
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_11(self):
        response = client.send(pp.UpdateCampaign(
                                  "0292e4f0-7e8e-43cb-a782-75f43fe77c72",
                                  status="enabled",
                                  point_expires_at="2015-12-02T14:06:36.000000+09:00",
                                  point_expires_in_days=4474,
                                  is_exclusive=False,
                                  subject="money",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[1, 1, 2, 6, 5],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["31309e6a-c33b-49c1-bddd-c98771d13ccb", "1b0968d4-959c-4b9d-bd7d-adaae720da7a", "e5d668e4-2f51-4c09-945c-c88f44ccca2e", "afd9061b-a6b2-476c-acdf-0cc794cee6e3", "0b5f72d8-ca6c-4cdc-b52c-dd80d7fb9fc3", "d187513e-bff7-421c-8ab9-7161402706a7", "712409e8-1bfd-4d22-9df4-ba5337440cc8", "2078c876-7796-4520-9cd7-ba5bbbf0cbc8", "0cbf49f8-5bfb-4444-9b9a-d9aaee709de2"],
                                  minimum_number_for_combination_purchase=1654
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_12(self):
        response = client.send(pp.UpdateCampaign(
                                  "0292e4f0-7e8e-43cb-a782-75f43fe77c72",
                                  description="GOKxoKM3BkiQ5JCNLUQPpDOoGNkBoKxTvABwe33UWeSzKCZwv4",
                                  status="enabled",
                                  point_expires_at="2017-02-27T04:35:29.000000+09:00",
                                  point_expires_in_days=8070,
                                  is_exclusive=True,
                                  subject="all",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[0, 1, 4, 5, 3, 5, 4, 2, 0],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["db6515ce-0065-4427-8d41-6a92c43235c3", "38e22b49-3c74-4eed-bf4f-6f6b996649d9"],
                                  minimum_number_for_combination_purchase=9093
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_13(self):
        response = client.send(pp.UpdateCampaign(
                                  "0292e4f0-7e8e-43cb-a782-75f43fe77c72",
                                  event="external-transaction",
                                  description="1pUONfZUthj8CTdPwk2g7DYhFuXWtax2gH7mosTYAgSjd1Lu4N1G4DllEfWLsx2f1PjIk5LFEcZYZR1K1ULgGU5oSrsDCn36n92LJoBnxVWA0Bmx0P3sSh52djDx2E8q2Tl06IV",
                                  status="enabled",
                                  point_expires_at="2017-12-18T02:05:30.000000+09:00",
                                  point_expires_in_days=5142,
                                  is_exclusive=False,
                                  subject="money",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[5, 5, 2, 1, 4, 1, 3, 3, 2, 4],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=[],
                                  minimum_number_for_combination_purchase=9143
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_14(self):
        response = client.send(pp.UpdateCampaign(
                                  "0292e4f0-7e8e-43cb-a782-75f43fe77c72",
                                  priority=253,
                                  event="payment",
                                  description="D4jd9Fi73fT2ekfbMypSoZArmvOOmVqy7LHITpCScM5po6zQrUB5yHtoGfycJYa2GIKQCGBFwcqnjKtXS5ctb0sUDamQiJFavfIlsQjs1Uxv98uoxa9cfqdBZBSSyuPsLgc14jRH1daAJWkWpeGVt7BTtK3VwbUSgXIGfDPEPwHED0KtmDzxLUbUeg",
                                  status="disabled",
                                  point_expires_at="2025-03-30T18:06:33.000000+09:00",
                                  point_expires_in_days=7177,
                                  is_exclusive=False,
                                  subject="all",
                                  amount_based_point_rules=[],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[5, 3, 5, 1, 1, 5],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["49b62e55-084b-4ce8-899d-19fc3b0bbf21", "08452bf8-5b4c-45fd-9065-b80dc4b5a131", "2b8cd094-197f-40c6-8d48-17ef25d6c568", "54a3bfb3-4c30-4334-b1e3-77e03818377a", "2abe7376-5b55-4937-b47c-2a69ec5e4ad4", "b56f1029-3e14-4e47-abce-7895c7242b83", "13a9ed59-c901-4484-977e-24eceb302044"],
                                  minimum_number_for_combination_purchase=4924
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_15(self):
        response = client.send(pp.UpdateCampaign(
                                  "0292e4f0-7e8e-43cb-a782-75f43fe77c72",
                                  ends_at="2015-10-15T20:27:09.000000+09:00",
                                  priority=1889,
                                  event="external-transaction",
                                  description="Mps1HN2Oi8GzWre6yIHCge3KvTMWtvAOdqc6t46b4EgFIpDVk2sqQhlAUNF0Kr6ekdB7WSGl",
                                  status="disabled",
                                  point_expires_at="2021-11-27T23:42:51.000000+09:00",
                                  point_expires_in_days=5597,
                                  is_exclusive=True,
                                  subject="money",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[1, 2, 2, 6, 5, 6, 6, 0, 1, 5],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["25b9c896-3166-4f7a-a74d-eed3c6dc0737", "4494f793-e395-4fde-8441-c1182e51f60f", "ae7a1112-6778-4dd2-969a-2f19ffc5ce7d", "40250498-6758-456a-8181-d61c4dee57f0", "43e1b2af-fd6f-41d9-8feb-8986254dad4c", "3551c959-0c89-40e2-9d4a-00cd949dd834", "30a5fe9c-04b6-4918-9947-0eae24a41012", "d652a5a0-58dd-4b4b-84ca-102199823e25"],
                                  minimum_number_for_combination_purchase=1304
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_16(self):
        response = client.send(pp.UpdateCampaign(
                                  "0292e4f0-7e8e-43cb-a782-75f43fe77c72",
                                  starts_at="2024-10-22T15:28:34.000000+09:00",
                                  ends_at="2018-03-03T10:13:06.000000+09:00",
                                  priority=6557,
                                  event="external-transaction",
                                  description="tfUdHVcso",
                                  status="disabled",
                                  point_expires_at="2022-10-04T08:15:00.000000+09:00",
                                  point_expires_in_days=6807,
                                  is_exclusive=True,
                                  subject="all",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[1, 2, 3, 6, 0, 3, 4, 2, 5],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["f93abace-e809-483f-92c4-d88173ca89d3", "670635eb-36a4-4952-b966-a9d7e78f9099", "a4f89b60-f14b-4e41-b86a-c98c69dc5424", "c36d46fc-11d1-4c88-97ea-798e105e3243", "68ec2842-b0b8-4492-9a1f-3140097e73ee", "af9522c6-e63f-4c2f-907c-1563c21e4c82", "3b5350f1-5912-48ed-8586-bca6c60bce98"],
                                  minimum_number_for_combination_purchase=5711
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_17(self):
        response = client.send(pp.UpdateCampaign(
                                  "0292e4f0-7e8e-43cb-a782-75f43fe77c72",
                                  name="fDor1z",
                                  starts_at="2018-05-21T05:49:16.000000+09:00",
                                  ends_at="2018-09-12T08:46:31.000000+09:00",
                                  priority=6042,
                                  event="external-transaction",
                                  description="x3xZsR5bLJPhH3FEHzbfU4cD6smAeqngifjNikqDE3OudXpYhNwFWUAKOn",
                                  status="disabled",
                                  point_expires_at="2024-02-13T07:04:20.000000+09:00",
                                  point_expires_in_days=2543,
                                  is_exclusive=True,
                                  subject="money",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["0dde3703-82ce-472d-8d51-f11f8aa8d80d", "2b90853c-dde2-4dc5-bd5e-a66ee96a3162", "bc779e2c-8ba7-4d7b-a04d-b0afb5e88356", "24e02593-fe11-48e4-a2e9-7c39a2bbc511", "7ab22680-df0e-493a-8735-a25dfe891b61", "544f4bc5-175b-462a-b371-cc340896a8a4", "f33f07e7-7754-4cce-b986-93266ae72633", "9a25d023-f4e7-4748-8aa2-44270277e741", "03f390aa-197c-483b-b19a-809924c73dc6"],
                                  minimum_number_for_combination_purchase=4653
        ))
        self.assertNotEqual(response.status_code, 400)

