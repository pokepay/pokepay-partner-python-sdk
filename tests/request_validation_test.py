# coding: utf-8
# DO NOT EDIT: File is generated by code generator.

import unittest
import pokepay_partner_python_sdk as pp

client = pp.Client('~/.pokepay/config.ini')


class PokepayTest(unittest.TestCase):

    def test_get_ping_0(self):
        response = client.send(pp.GetPing(
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_send_echo_0(self):
        response = client.send(pp.SendEcho(
                                  "ebTS2"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_user_0(self):
        response = client.send(pp.GetUser(
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_user_accounts_0(self):
        response = client.send(pp.ListUserAccounts(
                                  "50fd80cf-48ea-4697-9a9d-ae3aa2a594c4"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_user_accounts_1(self):
        response = client.send(pp.ListUserAccounts(
                                  "50fd80cf-48ea-4697-9a9d-ae3aa2a594c4",
                                  per_page=5919
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_user_accounts_2(self):
        response = client.send(pp.ListUserAccounts(
                                  "50fd80cf-48ea-4697-9a9d-ae3aa2a594c4",
                                  page=3436,
                                  per_page=1330
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_user_account_0(self):
        response = client.send(pp.CreateUserAccount(
                                  "0a7a1d2b-64c7-40ba-acb9-89cd0d23e081",
                                  "7a28108c-a768-4402-8b1c-52a596f681ed"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_user_account_1(self):
        response = client.send(pp.CreateUserAccount(
                                  "0a7a1d2b-64c7-40ba-acb9-89cd0d23e081",
                                  "7a28108c-a768-4402-8b1c-52a596f681ed",
                                  metadata="{\"key1\":\"foo\",\"key2\":\"bar\"}"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_user_account_2(self):
        response = client.send(pp.CreateUserAccount(
                                  "0a7a1d2b-64c7-40ba-acb9-89cd0d23e081",
                                  "7a28108c-a768-4402-8b1c-52a596f681ed",
                                  external_id="X4OKEOWqz",
                                  metadata="{\"key1\":\"foo\",\"key2\":\"bar\"}"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_user_account_3(self):
        response = client.send(pp.CreateUserAccount(
                                  "0a7a1d2b-64c7-40ba-acb9-89cd0d23e081",
                                  "7a28108c-a768-4402-8b1c-52a596f681ed",
                                  name="0hvycb0vlIqYLwmEttbmi9Qno8w65LUyJS4mRpmspP7N2X0cyPYRC0Z6ONIHi6uoKCHOuzolcuIOKeSSY5X9b8h3wAjLQjaXu716ByS80FCJOb4a1hzIWs15q8PTemYYJLa2jDGV65WBVJFowkHWzNOsRYgAGRzBb7t8",
                                  external_id="3FzpKCC",
                                  metadata="{\"key1\":\"foo\",\"key2\":\"bar\"}"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_account_0(self):
        response = client.send(pp.GetAccount(
                                  "475824ec-a11f-455b-bbe6-dd98620af899"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_account_0(self):
        response = client.send(pp.UpdateAccount(
                                  "471c3850-63a3-4f74-825e-246b2a3530d7"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_account_1(self):
        response = client.send(pp.UpdateAccount(
                                  "471c3850-63a3-4f74-825e-246b2a3530d7",
                                  can_transfer_topup=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_account_2(self):
        response = client.send(pp.UpdateAccount(
                                  "471c3850-63a3-4f74-825e-246b2a3530d7",
                                  status="active",
                                  can_transfer_topup=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_account_3(self):
        response = client.send(pp.UpdateAccount(
                                  "471c3850-63a3-4f74-825e-246b2a3530d7",
                                  is_suspended=True,
                                  status="suspended",
                                  can_transfer_topup=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_delete_account_0(self):
        response = client.send(pp.DeleteAccount(
                                  "c5f69512-a4d2-4026-be1e-956b27ee76cc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_delete_account_1(self):
        response = client.send(pp.DeleteAccount(
                                  "c5f69512-a4d2-4026-be1e-956b27ee76cc",
                                  cashback=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_balances_0(self):
        response = client.send(pp.ListAccountBalances(
                                  "0b4dbfe2-6ce7-4710-a884-9b6c06f9b1a7"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_balances_1(self):
        response = client.send(pp.ListAccountBalances(
                                  "0b4dbfe2-6ce7-4710-a884-9b6c06f9b1a7",
                                  direction="asc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_balances_2(self):
        response = client.send(pp.ListAccountBalances(
                                  "0b4dbfe2-6ce7-4710-a884-9b6c06f9b1a7",
                                  expires_at_to="2019-01-02T14:01:40.000000+09:00",
                                  direction="asc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_balances_3(self):
        response = client.send(pp.ListAccountBalances(
                                  "0b4dbfe2-6ce7-4710-a884-9b6c06f9b1a7",
                                  expires_at_from="2023-11-05T01:01:23.000000+09:00",
                                  expires_at_to="2024-03-19T09:20:31.000000+09:00",
                                  direction="desc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_balances_4(self):
        response = client.send(pp.ListAccountBalances(
                                  "0b4dbfe2-6ce7-4710-a884-9b6c06f9b1a7",
                                  per_page=8149,
                                  expires_at_from="2023-11-07T14:17:24.000000+09:00",
                                  expires_at_to="2017-10-23T09:39:15.000000+09:00",
                                  direction="desc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_balances_5(self):
        response = client.send(pp.ListAccountBalances(
                                  "0b4dbfe2-6ce7-4710-a884-9b6c06f9b1a7",
                                  page=591,
                                  per_page=5654,
                                  expires_at_from="2022-04-21T17:48:53.000000+09:00",
                                  expires_at_to="2016-07-06T05:08:25.000000+09:00",
                                  direction="asc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_expired_balances_0(self):
        response = client.send(pp.ListAccountExpiredBalances(
                                  "f9fa6da7-5255-4d4c-8c91-e7c709b6aec7"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_expired_balances_1(self):
        response = client.send(pp.ListAccountExpiredBalances(
                                  "f9fa6da7-5255-4d4c-8c91-e7c709b6aec7",
                                  direction="asc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_expired_balances_2(self):
        response = client.send(pp.ListAccountExpiredBalances(
                                  "f9fa6da7-5255-4d4c-8c91-e7c709b6aec7",
                                  expires_at_to="2022-07-27T13:36:21.000000+09:00",
                                  direction="asc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_expired_balances_3(self):
        response = client.send(pp.ListAccountExpiredBalances(
                                  "f9fa6da7-5255-4d4c-8c91-e7c709b6aec7",
                                  expires_at_from="2020-11-01T13:24:16.000000+09:00",
                                  expires_at_to="2019-05-15T19:17:15.000000+09:00",
                                  direction="asc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_expired_balances_4(self):
        response = client.send(pp.ListAccountExpiredBalances(
                                  "f9fa6da7-5255-4d4c-8c91-e7c709b6aec7",
                                  per_page=8697,
                                  expires_at_from="2021-09-30T05:18:45.000000+09:00",
                                  expires_at_to="2023-10-18T14:09:45.000000+09:00",
                                  direction="desc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_account_expired_balances_5(self):
        response = client.send(pp.ListAccountExpiredBalances(
                                  "f9fa6da7-5255-4d4c-8c91-e7c709b6aec7",
                                  page=6253,
                                  per_page=3292,
                                  expires_at_from="2020-07-18T20:58:23.000000+09:00",
                                  expires_at_to="2022-03-06T14:07:14.000000+09:00",
                                  direction="desc"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_customer_account_0(self):
        response = client.send(pp.UpdateCustomerAccount(
                                  "c8cf31e2-e8ad-48bf-8dbc-a2f2ef23b15a"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_customer_account_1(self):
        response = client.send(pp.UpdateCustomerAccount(
                                  "c8cf31e2-e8ad-48bf-8dbc-a2f2ef23b15a",
                                  metadata="{\"key1\":\"foo\",\"key2\":\"bar\"}"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_customer_account_2(self):
        response = client.send(pp.UpdateCustomerAccount(
                                  "c8cf31e2-e8ad-48bf-8dbc-a2f2ef23b15a",
                                  external_id="HO9iCu90DxVQnbrqJ1u870fgvmvI18bxj",
                                  metadata="{\"key1\":\"foo\",\"key2\":\"bar\"}"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_customer_account_3(self):
        response = client.send(pp.UpdateCustomerAccount(
                                  "c8cf31e2-e8ad-48bf-8dbc-a2f2ef23b15a",
                                  account_name="hN7vwIrE2na",
                                  external_id="uY3CLMoUqdXStY4djBESHKY1pj0apbEZnaTZohN",
                                  metadata="{\"key1\":\"foo\",\"key2\":\"bar\"}"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_customer_account_4(self):
        response = client.send(pp.UpdateCustomerAccount(
                                  "c8cf31e2-e8ad-48bf-8dbc-a2f2ef23b15a",
                                  status="pre-closed",
                                  account_name="JjdwzN7i41itVu8FxDdlBwgH4BAhmYKDxRqPptC95kmcGUfuUWaOzoP",
                                  external_id="zcQM2WatXV7xTUK2ks1X2cRzN6D0AIcT9",
                                  metadata="{\"key1\":\"foo\",\"key2\":\"bar\"}"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_account_transfer_summary_0(self):
        response = client.send(pp.GetAccountTransferSummary(
                                  "53ecbf4c-1026-4da9-aead-4548dfff2ca9"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_account_transfer_summary_1(self):
        response = client.send(pp.GetAccountTransferSummary(
                                  "53ecbf4c-1026-4da9-aead-4548dfff2ca9",
                                  transfer_types=["payment", "refund-payment", "campaign-topup", "refund-campaign"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_account_transfer_summary_2(self):
        response = client.send(pp.GetAccountTransferSummary(
                                  "53ecbf4c-1026-4da9-aead-4548dfff2ca9",
                                  to="2019-03-15T14:30:36.000000+09:00",
                                  transfer_types=["payment", "topup"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_account_transfer_summary_3(self):
        response = client.send(pp.GetAccountTransferSummary(
                                  "53ecbf4c-1026-4da9-aead-4548dfff2ca9",
                                  from="2022-04-28T17:18:31.000000+09:00",
                                  to="2024-01-12T05:55:28.000000+09:00",
                                  transfer_types=["campaign-topup", "refund-exchange-outflow", "refund-campaign", "refund-payment"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_0(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "6d7f5429-6462-48b4-b6c5-ef93c5a58565"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_1(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "6d7f5429-6462-48b4-b6c5-ef93c5a58565",
                                  email="seFuSKqhG9@cRRL.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_2(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "6d7f5429-6462-48b4-b6c5-ef93c5a58565",
                                  tel="01164357-7295",
                                  email="Tcq1jjtSzL@swMn.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_3(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "6d7f5429-6462-48b4-b6c5-ef93c5a58565",
                                  external_id="GivTrPjkRVQiSQwCu565IkQreM8sLIwCQh",
                                  tel="0498-0594-2650",
                                  email="uTStRoFwCv@eSSu.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_4(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "6d7f5429-6462-48b4-b6c5-ef93c5a58565",
                                  status="active",
                                  external_id="p",
                                  tel="0746-932876",
                                  email="DRMMzvFyE7@SIRQ.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_5(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "6d7f5429-6462-48b4-b6c5-ef93c5a58565",
                                  is_suspended=True,
                                  status="pre-closed",
                                  external_id="iftX23hz2jy",
                                  tel="0423-47755",
                                  email="syIWGxCVMa@rN4h.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_6(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "6d7f5429-6462-48b4-b6c5-ef93c5a58565",
                                  created_at_to="2025-02-13T01:24:10.000000+09:00",
                                  is_suspended=False,
                                  status="active",
                                  external_id="cJsTKgPjyhBG5BoFEx4L0ovkP",
                                  tel="0495832",
                                  email="do31ZIF0wE@6Hv1.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_7(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "6d7f5429-6462-48b4-b6c5-ef93c5a58565",
                                  created_at_from="2017-03-22T08:29:32.000000+09:00",
                                  created_at_to="2025-05-20T03:05:44.000000+09:00",
                                  is_suspended=True,
                                  status="suspended",
                                  external_id="IlZt",
                                  tel="010301908",
                                  email="KTnGbb5yr0@3PiD.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_8(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "6d7f5429-6462-48b4-b6c5-ef93c5a58565",
                                  per_page=5494,
                                  created_at_from="2024-03-08T16:33:51.000000+09:00",
                                  created_at_to="2022-05-23T04:52:33.000000+09:00",
                                  is_suspended=False,
                                  status="active",
                                  external_id="xpeUU8q2GbfuRtxzVqYb",
                                  tel="08-8653249",
                                  email="B4wJ0f0JnN@fx7v.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_customer_accounts_9(self):
        response = client.send(pp.GetCustomerAccounts(
                                  "6d7f5429-6462-48b4-b6c5-ef93c5a58565",
                                  page=8941,
                                  per_page=8378,
                                  created_at_from="2023-06-14T00:01:22.000000+09:00",
                                  created_at_to="2020-05-26T15:03:26.000000+09:00",
                                  is_suspended=False,
                                  status="active",
                                  external_id="rDjKTxvWQ1t9uNc",
                                  tel="043148165",
                                  email="FsvvnuBi1l@gzWy.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_customer_account_0(self):
        response = client.send(pp.CreateCustomerAccount(
                                  "0301890e-8542-4743-93aa-02b09041908f"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_customer_account_1(self):
        response = client.send(pp.CreateCustomerAccount(
                                  "0301890e-8542-4743-93aa-02b09041908f",
                                  external_id="D2AvcFVB2jY4xmyPg"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_customer_account_2(self):
        response = client.send(pp.CreateCustomerAccount(
                                  "0301890e-8542-4743-93aa-02b09041908f",
                                  account_name="P98zjb9n1lIfOaOTxiW7Qm37b5BFHSSEFoOIFwueZXLQbecJPPWpDIB6bM4cBQFaXLVuILYeOdooCw66P8UtNGw0V4qGeZ2XKQV8u3zmgdNbMOzd5qIHdvWfQavjUjbDeIbQ0rYRN8DgbWit0DFcpbPUzmbWlUqumIhJ4btZAQHbEiPcXXvd",
                                  external_id="iEAps63irjaXA"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_customer_account_3(self):
        response = client.send(pp.CreateCustomerAccount(
                                  "0301890e-8542-4743-93aa-02b09041908f",
                                  user_name="WoCiJ6UekR9rWdRmOTvbQHHywmIAPrWKijATvkoTPes7Qjlt5CT2vxN1Mc63xCxHHoag84NZcV6OTT1CGMcUUWUYieS3zx166C1To8pxBYFY1F9kfMMzaGddFL27hhY0zsisTrvvGgZflcmtn59KTkyjXtKUPjFI8y9xNMflpCeHxN7YVPA89xyiq9rIUzgAtRLfWzYbpPNWpjUr2l",
                                  account_name="5aRVkYU1pAEgwKmPKWHxULJj0MCjQoOwWZmQHAQqAUFQSaz170unrxZEFrcBNvId6xlGxoWCCUY1xga47HDXDC65smi6ZOVs4acD9rVhcg23xCEFkLSS5hbwBSU0giTkxdUxD9igIZgzVBJR17y2sfA25FYEFWrTh8Mab8ddltw30e4SOVYmckTyHBGdh2ncuUAUv5uljcYpsOO2Qr9Ihkm7wM77qFZYBr7N1qyCMdedP9erYqZjf",
                                  external_id="2I41SOBl8TzqNAAAujRgZ"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_shop_accounts_0(self):
        response = client.send(pp.GetShopAccounts(
                                  "178036b1-16ef-4efc-987d-319e09e9e588"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_shop_accounts_1(self):
        response = client.send(pp.GetShopAccounts(
                                  "178036b1-16ef-4efc-987d-319e09e9e588",
                                  is_suspended=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_shop_accounts_2(self):
        response = client.send(pp.GetShopAccounts(
                                  "178036b1-16ef-4efc-987d-319e09e9e588",
                                  created_at_to="2021-05-01T14:39:51.000000+09:00",
                                  is_suspended=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_shop_accounts_3(self):
        response = client.send(pp.GetShopAccounts(
                                  "178036b1-16ef-4efc-987d-319e09e9e588",
                                  created_at_from="2025-05-19T05:27:03.000000+09:00",
                                  created_at_to="2021-10-21T16:25:32.000000+09:00",
                                  is_suspended=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_shop_accounts_4(self):
        response = client.send(pp.GetShopAccounts(
                                  "178036b1-16ef-4efc-987d-319e09e9e588",
                                  per_page=8853,
                                  created_at_from="2025-04-29T01:15:20.000000+09:00",
                                  created_at_to="2019-09-26T12:03:12.000000+09:00",
                                  is_suspended=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_shop_accounts_5(self):
        response = client.send(pp.GetShopAccounts(
                                  "178036b1-16ef-4efc-987d-319e09e9e588",
                                  page=7055,
                                  per_page=2628,
                                  created_at_from="2025-04-20T14:22:07.000000+09:00",
                                  created_at_to="2019-03-29T13:26:10.000000+09:00",
                                  is_suspended=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_0(self):
        response = client.send(pp.ListBills(
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_1(self):
        response = client.send(pp.ListBills(
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_2(self):
        response = client.send(pp.ListBills(
                                  upper_limit_amount=2092,
                                  is_disabled=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_3(self):
        response = client.send(pp.ListBills(
                                  lower_limit_amount=8012,
                                  upper_limit_amount=1311,
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_4(self):
        response = client.send(pp.ListBills(
                                  shop_id="63cf611d-354a-48af-b2da-2be1a801edf9",
                                  lower_limit_amount=512,
                                  upper_limit_amount=17,
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_5(self):
        response = client.send(pp.ListBills(
                                  shop_name="0M6cS0CJw1vTU",
                                  shop_id="5199d951-904e-4146-a215-fcb80a21e0b4",
                                  lower_limit_amount=4617,
                                  upper_limit_amount=6655,
                                  is_disabled=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_6(self):
        response = client.send(pp.ListBills(
                                  created_to="2016-07-29T03:05:55.000000+09:00",
                                  shop_name="GUooZcQVTmwSs3xrPvTFtnXj9MgooihLhG9gIeLfixIJdqF6iVZMlnVia6KMAVTweSWrbkDAKb6ux40NJ1m8ZDPBGCcT6lNdw0WHwFn0kj9SvXe8eJpBi2oFfS3bPkKy2PDmf5IM14bE1XEjBH36SFei5vvzq9vUKj6fpcputjuV7MqE5ob6lnRwvxep9h4CXuzBIQsS5xifzrEz8M0H2ALVOK8UdOrqP9JScC9NoQIHBWnSkwF3ndW",
                                  shop_id="fffe5fc2-ee99-4dad-99e8-1985b7cd463c",
                                  lower_limit_amount=1264,
                                  upper_limit_amount=831,
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_7(self):
        response = client.send(pp.ListBills(
                                  created_from="2023-09-05T05:48:53.000000+09:00",
                                  created_to="2019-03-31T16:36:58.000000+09:00",
                                  shop_name="EM2EcP8sCTaxhkChW1aQpLCxRx93B2VonJvizlGgA1QRsiEPanBYjR6tfda9soo2HvWIfUU",
                                  shop_id="d0021ce2-5542-4c19-88c9-208b773fca9b",
                                  lower_limit_amount=3895,
                                  upper_limit_amount=8897,
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_8(self):
        response = client.send(pp.ListBills(
                                  description="zQc38veTxZF6X94844JzEqHSu8pmMFuUYCPXNBFk3DnX9T6AyYCCuD6ckkyHHbXke7PbHzwZohyPlBu0N2",
                                  created_from="2020-03-22T20:08:34.000000+09:00",
                                  created_to="2019-07-27T11:18:30.000000+09:00",
                                  shop_name="SFv27bcOIuVtVVhHAKppIIwJUtAJXbvaYU36irYgOn7jt5eb74Ulf8a1YNLmFi1kErB1nLRlpi0oaQD67cBN1lCsJIPs39YUTk7A2FswOl",
                                  shop_id="beb823d7-de4b-4c64-8b7c-a2498200b19e",
                                  lower_limit_amount=4083,
                                  upper_limit_amount=7316,
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_9(self):
        response = client.send(pp.ListBills(
                                  organization_code="4UPKE88J-Onz608",
                                  description="NmnqaLeXljkBPYyvU6MSxfkJDXTiNobaHzqHKZgv4zy7I9MylpKTsEOr4zeqqlWXrGhqj65QBIk9HoKj2aM74dH5PXoyQ7YDmmOunaGreHFrt",
                                  created_from="2017-04-26T20:10:40.000000+09:00",
                                  created_to="2016-05-09T20:40:28.000000+09:00",
                                  shop_name="SXsSVbiCqVaxL0CylxMS1ckdkoKA8zFP9wOh0PLemUJN5Sno1MfV2ZTHErXThRJWW9CWX7Br7RdzBu02VqA1VGvwnFwTQH3yt30VxPVKxlvxlLWhshFLEcqOVbM0yXCE2Y3QA3n5SuoaUgl7nFSyuMYZqUnSi1tkvQJEMALYcrNdRTOKFgd2aESpzvkdOxIVxpCplODQBxa",
                                  shop_id="d799c6f2-00f5-4377-b444-c7f997ba5b12",
                                  lower_limit_amount=6129,
                                  upper_limit_amount=6467,
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_10(self):
        response = client.send(pp.ListBills(
                                  private_money_id="85bc16bb-bd1d-4cba-82a5-c00ae78b4f5b",
                                  organization_code="FEY",
                                  description="DIg7sH28JYE7WXVc16ZpnUtGL57zq0Nd0MqNiLL2vfPHUsjAdmr",
                                  created_from="2017-08-12T14:59:34.000000+09:00",
                                  created_to="2018-08-17T07:44:34.000000+09:00",
                                  shop_name="S2QiAEydmFG1sK7lqS8CKIWAivgjSpU1xJrnjEdJg9PZuB4sImIfh9dLWttS5qXjZ32qi02R82uph1ea6aAreMlAZMi13aaG3ECV5zRCJZqa4e8hSJ2QmdpxE8IEkmo9hXYmbprW43HjQng1oQCNrKju4sUSzhsmVpmmPGJPFaihFLb2zGVALDkSVdBSME",
                                  shop_id="42670e04-8a38-4741-95d9-31dec170fc67",
                                  lower_limit_amount=9005,
                                  upper_limit_amount=8591,
                                  is_disabled=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_11(self):
        response = client.send(pp.ListBills(
                                  bill_id="POCJ",
                                  private_money_id="2da8bac8-9c91-40d0-925b-8fa65e597e0e",
                                  organization_code="t4NF2B-x---z--v55--GcT1",
                                  description="vNnU85kcg9i9SyhQ1s0tofMiJ3nSjkJyHjB",
                                  created_from="2020-03-24T20:42:52.000000+09:00",
                                  created_to="2018-11-20T07:35:29.000000+09:00",
                                  shop_name="qdJOnF06DKEA",
                                  shop_id="a894bcc9-7c29-42d1-af17-3bc91d98e573",
                                  lower_limit_amount=7387,
                                  upper_limit_amount=4035,
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_12(self):
        response = client.send(pp.ListBills(
                                  per_page=5541,
                                  bill_id="Ee",
                                  private_money_id="21e8487d-6ed8-4565-8e11-297330631c3e",
                                  organization_code="---3B-0--L7",
                                  description="1Cu",
                                  created_from="2023-03-31T11:35:58.000000+09:00",
                                  created_to="2023-01-03T16:08:32.000000+09:00",
                                  shop_name="jnrQWbonoIilNoXrdPbVrYs24eYCH8w7PFjnMC801TisOQ19GiEVVU2w0ghUkdrKCNI682j4ryuS80DiHJxGucypgFLoS8Yisf",
                                  shop_id="7121b615-699b-4255-a83f-8c883a6de5c0",
                                  lower_limit_amount=9164,
                                  upper_limit_amount=4752,
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bills_13(self):
        response = client.send(pp.ListBills(
                                  page=6516,
                                  per_page=3193,
                                  bill_id="EjRWmF",
                                  private_money_id="a52686d8-e9c9-4c32-9eae-3544156402cc",
                                  organization_code="--",
                                  description="cAoVYYMt6a2dABd6khCYgGphGnMcxAFxLEynuG1MYJZDS1Sjs43y0J63vPIMx2xx3Kwql9mtC9ZCRSwx8Ca2qTeBkLLR2NwXBIpRa9NREZu8MGzAwqQPRxjsJG7IMkx5VkMi18NxE1t4Xg",
                                  created_from="2015-12-02T19:45:59.000000+09:00",
                                  created_to="2020-11-05T08:12:32.000000+09:00",
                                  shop_name="rB1H08xh2te5RVaAn24SnOVV647k4Easiy8fWcyXmX9yIg8hXUcc4uDEeOzK8GnzsYxKIWaxMIYC9acZkUJF1WCgz6Wdp7Kk0TlZeO2FNydf0GtYjfDoNZFzEdLw42Hb0pSrX6DBYgQSlYrNVlmjvxZD2Vl2A7GLEGvBBfmT4GfMO1jnHi6IZuuJlJQBETOaVwgKIC7879NBZVktfxdDMYzhFjc0gVUyu1",
                                  shop_id="a0214ae3-dad3-4db1-86cf-6de445d74dd2",
                                  lower_limit_amount=9991,
                                  upper_limit_amount=6666,
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_bill_0(self):
        response = client.send(pp.CreateBill(
                                  "06d75a4a-a340-4fa1-a2e2-42b5cdefd0f1",
                                  "7aa80162-61c7-478f-8d28-2c6f281957ce"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_bill_1(self):
        response = client.send(pp.CreateBill(
                                  "06d75a4a-a340-4fa1-a2e2-42b5cdefd0f1",
                                  "7aa80162-61c7-478f-8d28-2c6f281957ce",
                                  description="DAVPbYlYwDgUmVf4VyeCq2zv3m8EEJTtegfLPAKZKPgTBuuzmE82FXQId8b7y1pRWueZ0KeUazMXVvOufuSQG5JXrcr1smXBGt9nL7odm1v5XmnnOoYTpQrqT1"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_bill_2(self):
        response = client.send(pp.CreateBill(
                                  "06d75a4a-a340-4fa1-a2e2-42b5cdefd0f1",
                                  "7aa80162-61c7-478f-8d28-2c6f281957ce",
                                  amount=2488.0,
                                  description="MpDWEaz1NRm7Qy2OfT4tQ4"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_bill_0(self):
        response = client.send(pp.UpdateBill(
                                  "3fa99e7e-4d77-434d-bb4d-d7f1ee1ad9f8"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_bill_1(self):
        response = client.send(pp.UpdateBill(
                                  "3fa99e7e-4d77-434d-bb4d-d7f1ee1ad9f8",
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_bill_2(self):
        response = client.send(pp.UpdateBill(
                                  "3fa99e7e-4d77-434d-bb4d-d7f1ee1ad9f8",
                                  description="iqaWFOsINpkgU9aUzWMEiLDgKu4zT64GLBlkks3i12lUDdOmpyVlJwONKN8r89J44UVQkLOCkwbOGKCbVOJr6xvtts",
                                  is_disabled=True
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_bill_3(self):
        response = client.send(pp.UpdateBill(
                                  "3fa99e7e-4d77-434d-bb4d-d7f1ee1ad9f8",
                                  amount=7229.0,
                                  description="Am4jxkZlaPGnC9YJFp6p0zRrU0lCGV3Uq4HmqHawkKDCgeNO0rz37QmQFa7JuoJnfFva5D9Js4SpYvByeGqsj0yprdNuvsMiTo9p1rwmLYQgKrtU",
                                  is_disabled=False
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_0(self):
        response = client.send(pp.CreateCheck(
                                  "89b87cf1-3dd7-4f9c-bfef-823eef7b79fd",
                                  money_amount=650.0
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_1(self):
        response = client.send(pp.CreateCheck(
                                  "89b87cf1-3dd7-4f9c-bfef-823eef7b79fd",
                                  money_amount=1659.0,
                                  description="WK0KcKtpTqPN7myg36HD5i4E"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_2(self):
        response = client.send(pp.CreateCheck(
                                  "89b87cf1-3dd7-4f9c-bfef-823eef7b79fd",
                                  money_amount=8684.0,
                                  is_onetime=False,
                                  description="XmuJ8hE57Gl7pEKHMZEnnv4BGWcXxjyI99p2wwdsD9Wwjus0ApwAwAgwMCGaWRsSg3h5K009IFGAIBrQxpHcGKfPvcPcqXe2SirdOtG"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_3(self):
        response = client.send(pp.CreateCheck(
                                  "89b87cf1-3dd7-4f9c-bfef-823eef7b79fd",
                                  money_amount=7485.0,
                                  usage_limit=5829,
                                  is_onetime=False,
                                  description="di1Ff7oXyWoC9O9Pn9Tk0RmbpiLPAWvGb3gNC5gax"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_4(self):
        response = client.send(pp.CreateCheck(
                                  "89b87cf1-3dd7-4f9c-bfef-823eef7b79fd",
                                  money_amount=1668.0,
                                  expires_at="2018-03-04T10:37:27.000000+09:00",
                                  usage_limit=9651,
                                  is_onetime=False,
                                  description="qG34TeAGBmdRHXOLLDzi3oML201Kv2jLgbkZm0a57cp58WtFAPm2CMCqD092jwL0eHU1A8A"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_5(self):
        response = client.send(pp.CreateCheck(
                                  "89b87cf1-3dd7-4f9c-bfef-823eef7b79fd",
                                  money_amount=6273.0,
                                  point_expires_at="2018-12-08T18:21:17.000000+09:00",
                                  expires_at="2017-09-26T10:41:05.000000+09:00",
                                  usage_limit=7981,
                                  is_onetime=False,
                                  description="c2lkvjquuHwsnis8AhNg2Gh4IFi7DXKWH4BW1Bt3mcnIH8T37b4Z6gJVJM5Ba9YAtMNgIiSGs7TzdlFwscEaew2dWWpF"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_6(self):
        response = client.send(pp.CreateCheck(
                                  "89b87cf1-3dd7-4f9c-bfef-823eef7b79fd",
                                  money_amount=6440.0,
                                  point_expires_in_days=3504,
                                  point_expires_at="2017-12-28T12:33:41.000000+09:00",
                                  expires_at="2017-04-20T16:37:13.000000+09:00",
                                  usage_limit=7571,
                                  is_onetime=False,
                                  description="MfDgcxcJlxLoaQoRA96dZ6S1icruAvDLWQ2gFnyZbfK59ElGkmtszNollZKDY7qfTgVdofpEuLyi3SHnm5oHDwZj9wr0rxbCTZFMBhgbDB47q"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_7(self):
        response = client.send(pp.CreateCheck(
                                  "89b87cf1-3dd7-4f9c-bfef-823eef7b79fd",
                                  money_amount=9211.0,
                                  bear_point_account="f8864316-5d41-4d49-9995-e305bfa30f85",
                                  point_expires_in_days=8608,
                                  point_expires_at="2020-05-18T14:25:14.000000+09:00",
                                  expires_at="2023-01-29T01:44:41.000000+09:00",
                                  usage_limit=7234,
                                  is_onetime=False,
                                  description="5IMIf83o46tM1uAXbWimqAE3Dcc4WGt00szKRkD20l5WdYc73FGvp3SuLO0AlqFo3zVjnggRNklsd4R6uLyF9dFCg2T4e8RjF5SFckQVVFd3yTTxaSCfqju2Vf0EwqEH7TlYEtkNJVErHp1jWI2d28DyMO1"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_8(self):
        response = client.send(pp.CreateCheck(
                                  "89b87cf1-3dd7-4f9c-bfef-823eef7b79fd",
                                  money_amount=6415.0,
                                  point_amount=6523.0
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_9(self):
        response = client.send(pp.CreateCheck(
                                  "89b87cf1-3dd7-4f9c-bfef-823eef7b79fd",
                                  money_amount=9970.0,
                                  point_amount=5161.0,
                                  description="TCCyhNfr1GE6bl"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_10(self):
        response = client.send(pp.CreateCheck(
                                  "89b87cf1-3dd7-4f9c-bfef-823eef7b79fd",
                                  money_amount=3782.0,
                                  point_amount=9318.0,
                                  is_onetime=True,
                                  description="M5u1E1meAhuITUibwYMGbQVn0ANrtkB35WHrhfshlwyeVof3OmmTnFrGptzVk5XGcuo6FJegxyVByl2lqpBQFLDmBKZUbuF5frlZI2NZV29i8v7j7bvyomB8OIGyNSRTGERCKmoynLLrH1BhaZ0yGuTDU9xHE6jN2ds"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_11(self):
        response = client.send(pp.CreateCheck(
                                  "89b87cf1-3dd7-4f9c-bfef-823eef7b79fd",
                                  money_amount=6183.0,
                                  point_amount=4662.0,
                                  usage_limit=1426,
                                  is_onetime=False,
                                  description="wpMAz5Tt"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_12(self):
        response = client.send(pp.CreateCheck(
                                  "89b87cf1-3dd7-4f9c-bfef-823eef7b79fd",
                                  money_amount=379.0,
                                  point_amount=2130.0,
                                  expires_at="2020-11-07T16:34:53.000000+09:00",
                                  usage_limit=765,
                                  is_onetime=False,
                                  description="FrJwfWjNO3YVGvyPy89d81CTxzIK9IZjcAcLLK627tMRzqFgh4D92lCwnLTeBkWgbq7z6eouBuuJDsl864jIsQXxH5r1wTUoJhlOdEA5MpQnTAd3RErWZ8l3WQSuEQMZ2d4ctRFBEsxSpHQgayMonXew7Et3QEIBWJHiA"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_13(self):
        response = client.send(pp.CreateCheck(
                                  "89b87cf1-3dd7-4f9c-bfef-823eef7b79fd",
                                  money_amount=2875.0,
                                  point_amount=8179.0,
                                  point_expires_at="2025-06-01T05:59:16.000000+09:00",
                                  expires_at="2019-10-16T22:28:28.000000+09:00",
                                  usage_limit=5550,
                                  is_onetime=True,
                                  description="5RBXuqhLNzG5FyaZFb4QsFOFEviRqgnl3loLNnZqSmkCOALrQWNq71qE4IXda2yDCFz8RQLM0pdp1q56CWM6IAAL2YYLme6M8UyBeufr3grLxd7FC8wUgODjgtYmGgU1WM37Qqg84w36G5cZ"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_14(self):
        response = client.send(pp.CreateCheck(
                                  "89b87cf1-3dd7-4f9c-bfef-823eef7b79fd",
                                  money_amount=1440.0,
                                  point_amount=1646.0,
                                  point_expires_in_days=8482,
                                  point_expires_at="2020-02-29T10:19:12.000000+09:00",
                                  expires_at="2017-01-07T08:41:18.000000+09:00",
                                  usage_limit=9957,
                                  is_onetime=True,
                                  description="u3pl2efGUdSUKsXJ4mLp8H2b5MHIkA1odlhZiutA5hChoV"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_15(self):
        response = client.send(pp.CreateCheck(
                                  "89b87cf1-3dd7-4f9c-bfef-823eef7b79fd",
                                  money_amount=4026.0,
                                  point_amount=74.0,
                                  bear_point_account="76509069-1ce0-4562-9db4-f4e0e78b20e7",
                                  point_expires_in_days=3025,
                                  point_expires_at="2015-11-03T04:55:02.000000+09:00",
                                  expires_at="2021-12-18T01:46:32.000000+09:00",
                                  usage_limit=959,
                                  is_onetime=False,
                                  description="YVVQx50IFGzRydeJJpQwCts10453OAEWV9JIs27vBuqTkRboiUVKEn0OURqamF84TTDaByynyI6fIPPcUVohGc3OEyLHWszUiXXJUJoWxVjWJS3Y"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_16(self):
        response = client.send(pp.CreateCheck(
                                  "89b87cf1-3dd7-4f9c-bfef-823eef7b79fd",
                                  point_amount=8758.0
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_17(self):
        response = client.send(pp.CreateCheck(
                                  "89b87cf1-3dd7-4f9c-bfef-823eef7b79fd",
                                  point_amount=7737.0,
                                  description="Ypq22tRojr73gPwyZw0n5lmGxqkkvVUc2t"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_18(self):
        response = client.send(pp.CreateCheck(
                                  "89b87cf1-3dd7-4f9c-bfef-823eef7b79fd",
                                  point_amount=2880.0,
                                  is_onetime=False,
                                  description="4ZMGoXGJmU8TkUnRMOOGG0WE8aDekdgbqbr2qn8vVm2Z7M8ID6oODu9tHg5NpVQk6bDP2LO0VzxHMnHjwcDnT69haofPuOF8KjpGrZ5YbRFhbfQbsE1Kdvc2LblPMe0Zgoi937cJ81dBSjWbVEmSJwGtjUQP6566g9TvkGukHlKZZ"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_19(self):
        response = client.send(pp.CreateCheck(
                                  "89b87cf1-3dd7-4f9c-bfef-823eef7b79fd",
                                  point_amount=6836.0,
                                  usage_limit=2629,
                                  is_onetime=False,
                                  description="PvECrs299HSNWbn21hO5KIunjWUkVWdyRILT6MPfEoK2cUPQxx7VRd4fgJWST2Tz8KGf2St3IixzrdHyJfApOG2yGQ4mLROfQRvGk4TyNugQTAkCRi8ai5BFvqoBVoOGaBQRJV0sBboiNPCOPZs0ge"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_20(self):
        response = client.send(pp.CreateCheck(
                                  "89b87cf1-3dd7-4f9c-bfef-823eef7b79fd",
                                  point_amount=7716.0,
                                  expires_at="2017-11-29T15:10:09.000000+09:00",
                                  usage_limit=9856,
                                  is_onetime=True,
                                  description="sPgNnrw77bHQUTKY5GkH0XDwnHyLzQtcAMSIUsHkb7zCYqkQq"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_21(self):
        response = client.send(pp.CreateCheck(
                                  "89b87cf1-3dd7-4f9c-bfef-823eef7b79fd",
                                  point_amount=1124.0,
                                  point_expires_at="2022-08-14T01:32:28.000000+09:00",
                                  expires_at="2024-09-28T16:56:57.000000+09:00",
                                  usage_limit=9621,
                                  is_onetime=True,
                                  description="8OPJDGXVBln63FKkFUwYWlrX0iZscKzczP1s1Rbv6IgvVmSfzRew6hS9i5GlQeIloESZCGqVaCcir8RDm5Jf0KJeJnXQHIxfEZIezNLmcU1ctYZzBfiYnY7jG5USKpDnQnzITu0a1pdvGz2"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_22(self):
        response = client.send(pp.CreateCheck(
                                  "89b87cf1-3dd7-4f9c-bfef-823eef7b79fd",
                                  point_amount=1650.0,
                                  point_expires_in_days=7833,
                                  point_expires_at="2016-12-29T22:04:32.000000+09:00",
                                  expires_at="2020-08-04T21:28:26.000000+09:00",
                                  usage_limit=1972,
                                  is_onetime=True,
                                  description="YXKJOsRaDmxgv9X1Qt6fUQWjvrKcJyJNCCuLUxFHZfefjQUi2brCVWuCFIAUugojhMZC4gPnI"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_check_23(self):
        response = client.send(pp.CreateCheck(
                                  "89b87cf1-3dd7-4f9c-bfef-823eef7b79fd",
                                  point_amount=3242.0,
                                  bear_point_account="fbcaf877-b4c2-4806-ae2c-b19cfa82a9bf",
                                  point_expires_in_days=1096,
                                  point_expires_at="2024-02-08T19:54:53.000000+09:00",
                                  expires_at="2019-08-12T23:59:28.000000+09:00",
                                  usage_limit=1694,
                                  is_onetime=False,
                                  description="YrCCq8wGjIMmljsMB7FrBNoEuKPOBjA6cZewDZpKd82viMmzTAsd3FUYO2VChazQj70B"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_cpm_token_0(self):
        response = client.send(pp.GetCpmToken(
                                  "jfXkVfdwZ6y0WjcqdHP9Gk"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_0(self):
        response = client.send(pp.ListTransactions(
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_1(self):
        response = client.send(pp.ListTransactions(
                                  description="iolbYxOenGcdxMqprbMsWv8ifOcslj9BIq4K8VuPuwgTP82hCWOHqgFtD3dX5rTR6GPRoOhI6tfs0OyNeObwMCchJguWnsoaS4F57V"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_2(self):
        response = client.send(pp.ListTransactions(
                                  types=["exchange_outflow", "cashback"],
                                  description="UXM19OC1ugh2tmTHMCRtv8TW9jfh9kXB9ay3PtML5ps7nqbvxQ5hWPIGUa666v6PDiyew1nSRQmtIuxMDzPDs75LzPCLVhELKuWPcXmoWD39zgUQGlulUVJRZjcwkExeE94lL8qCxhsVwzOZIKHnnLtpXOh3KtVdlN9Amjlk2guzhURciPZEx5gV81lBiu9CS6k"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_3(self):
        response = client.send(pp.ListTransactions(
                                  is_modified=True,
                                  types=[],
                                  description="EFGhm1Gf5Jb9FZyAK2mS9XZpjRwsQoyC2Q9L9sgl3XuvvIzUxDbC2xGL5j7kJZLjvlZRTaAbBa13shWzdQDj9EsovFNkNFoVbF4jbiKxL8aTm2q6zMvVJuLwQOo9PzRjscidav3XHODZ8KAsv32Erc0BzMSguuB84OvpcPXRAguQJTWx2LRFuAvyfnjA8GizhqwfCq"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_4(self):
        response = client.send(pp.ListTransactions(
                                  private_money_id="a2cc38f5-44c9-4bba-a7b8-e7db84fa112b",
                                  is_modified=True,
                                  types=["topup", "expire", "cashback", "exchange_outflow", "payment"],
                                  description="efcGgPbz17kYaG5RVkM28Z2iMGwXNvzYtHHktaTNPyMYkQstk0WOoeLhnWyGQjT7xKs0isZCM0Fi5pNCaACWO7vVddQbVvj0E1pnlcIRoAe9US2oeUP2zz58riAzy2eLyDa1veWrdHf6rMUUKGQYZ2GKIMcCqQdlPxOOQPgSLZ1hL1HCidrMLSsuPHPP4hA7"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_5(self):
        response = client.send(pp.ListTransactions(
                                  organization_code="vE-K--5ht1q---3X--0O-3G1d5v",
                                  private_money_id="ff92ec60-3f3c-45dd-b973-94402831be83",
                                  is_modified=False,
                                  types=["exchange_outflow", "payment"],
                                  description="MGBFqhiLYJCSpqEJ"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_6(self):
        response = client.send(pp.ListTransactions(
                                  transaction_id="eFe4uyolf",
                                  organization_code="k-",
                                  private_money_id="286b8a12-d0cd-4486-8f34-86f5d8310f97",
                                  is_modified=False,
                                  types=["expire", "exchange_inflow"],
                                  description="4kXc5sEzAwVuhr4TcW2KgVNHMAV0lJcQpjHr9IiMyKPs1TebTuQ2J7wQYvdeo6EyArRbGEB6HZNXrpf33cKXNaTJ2fKPgrr1exAIJKN3mvOMYxvrObI"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_7(self):
        response = client.send(pp.ListTransactions(
                                  terminal_id="62a61678-2f3a-4afe-a6e7-32338cb389a6",
                                  transaction_id="ow5",
                                  organization_code="1O5IbsMsb---VZi--6-Pk1",
                                  private_money_id="653e03f6-dcb7-4254-9a80-4d4f8f8a746d",
                                  is_modified=True,
                                  types=["expire", "cashback", "payment"],
                                  description="H0hE7gvGXUMtADrf3stUZjEE0b"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_8(self):
        response = client.send(pp.ListTransactions(
                                  customer_name="uBdIBLFm0kiglqn7o69pLyu2LpLowawEBOxYCjnQOia3QOoxgzUSvM10GBWi5dMdhrxED7cPYSD9fBuWzuQ5lKDErREe",
                                  terminal_id="d24bf755-5526-4220-8972-d5e4728ad930",
                                  transaction_id="gR",
                                  organization_code="Y-59RXM397-7Q-E",
                                  private_money_id="eda374dc-0d63-473d-b1b3-78b6dd1634cb",
                                  is_modified=False,
                                  types=[],
                                  description="68fag4eTwlRvwlWpQYjLOvQ0Gdmyy3PqXKfvEhEjElc8s52zMxqqFTvUNT7JdrtdLpp5e1QQlK1nCgKChKG5BaWN102JwS2byZTlNDBDCoiI4dwLuLHxUF3Kz5dX4qaq4hgt8RYEYyjIVA6XjM"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_9(self):
        response = client.send(pp.ListTransactions(
                                  customer_id="a863d9bd-40ab-4fb1-aa93-0c5e49fb2e98",
                                  customer_name="8QU4l8NyysZkYq7WOZAoqOEMoX6qvr6o7c3nDiGYwge45nHbqRsHR3VjgyUpwWLK9mCueEtwYPgU46oEkne0BgPWl6qsBnAAnAiBVFD5bawyAu4Jf7vWGpeu0IBjqyqQS9W4ks56ZtH5GTVdW45AAkuOzqFytqZ2itmrvJokx3jhPjaUcLNKy9uNaRc8GLKETO",
                                  terminal_id="0e00161d-91e3-44d5-89a6-6a3ebe072cfa",
                                  transaction_id="uQhQTSr",
                                  organization_code="3HEdb",
                                  private_money_id="0a38bc1c-e338-4594-a775-ce684063b65e",
                                  is_modified=False,
                                  types=["topup", "exchange_inflow", "payment", "exchange_outflow", "expire", "cashback"],
                                  description="wuT93LxwmTI8x5hrIGRhbARpGw5x3cYgRFw0MvJIa1ZgmsNwBy3Ggj6Q5zJGiJrcgXXCYJHnglOrDZjnePvO9IUKsgnbJTjTBmwDJLyj8gGxnPwKVX8vbgRJ0pWSBtZtwjj6jPFl0aOrb6ARTzHkRdXFqiNK"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_10(self):
        response = client.send(pp.ListTransactions(
                                  shop_id="4df707cd-600f-491c-9a9b-896af9913486",
                                  customer_id="1700e089-eadb-451f-80b1-9c6c7f6e4998",
                                  customer_name="ACS8Xb2ODs8dYezhJLpYO7dEwM9nJRvPNIGMPCjSKjbLhMVnet0zNKZOf2xOdb2VdFxnkv0TKGcJHyUJLdrn1DSiPVDXWubAcUrAiVJLsxqCqqJiqAj9l4bEnoJK4xksJjIt0UBpilwEbrPjPnmpDB4g6QtsxHpD3DpCST7rP9Lyh4NH64vMHgQWXlRiim0BVwGwScTC04fzgCuSuogptu53wFm91kql11ZMpmTwxBa3K1CBjgQi",
                                  terminal_id="e5540f09-ca82-47a5-9bea-8539ca3d3303",
                                  transaction_id="UR6hPaA",
                                  organization_code="15-8I-EvvXHQP---X--VR3-4c-8fp0s",
                                  private_money_id="b0736647-45d9-4f48-9b98-f990310d7d0e",
                                  is_modified=True,
                                  types=["exchange_inflow", "expire", "exchange_outflow", "payment"],
                                  description="9qGwVlUmp8bY5KHeV4OHRkCTM2LBK540yCay57ZX0e66onuK2LGkQ84XMHZ19ndLSVl4mXW8OksXSuRsukTH8rQ8EKPRQklEVj7uwo1rUZ9l6gEnjVcaTZ4r8ouQMxdl5xfKuN4Ex0SLV5GkKJGkQPyNFjHdz"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_11(self):
        response = client.send(pp.ListTransactions(
                                  per_page=7038,
                                  shop_id="3bb10950-3178-43f1-8368-2e71507d5b21",
                                  customer_id="0db57d12-e068-4f62-ab5c-db2a5be59478",
                                  customer_name="kSAPojATTTqVQiPuy2SeuOkM2bo0TMn0ZGPyuXnsAz0uPzjTULUphaQiVSTu9Bmy6926EoQlpHFNDtdvaNFR5yCe5xDiSM",
                                  terminal_id="1224b0dc-8eac-4b27-8655-0fbd3d744090",
                                  transaction_id="Za",
                                  organization_code="-",
                                  private_money_id="9820748e-18ce-4412-a827-31ba1f2fcedf",
                                  is_modified=True,
                                  types=["topup", "exchange_inflow", "exchange_outflow", "expire"],
                                  description="20x7oIgHVeW0N0p72qf16nR4orz07EZaMQCiFe2xgm8DSF9s7x4uBa0niAy0AIxOt4RTINT0aCbl1Udmaye9LLNWQRSdtSjd37PHvNwJ2yTdgoQtQ6kHM63aCDS9B1jXTn8Hu80jEWfyMz9VQlNN"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_12(self):
        response = client.send(pp.ListTransactions(
                                  page=50,
                                  per_page=3510,
                                  shop_id="6c4c0555-7e6e-4edf-ba2a-35662ebff8db",
                                  customer_id="dcccad13-e84d-4a35-81cc-ee0aa08b455e",
                                  customer_name="lhaxyqvY6pGysQdkIOqUqzenc1E0g5DbS5LXDRWRlhQ3MXnTYsvtkIqIBEwdVBtG8akFS5T",
                                  terminal_id="69d11a17-66fc-4209-bb4f-291c9b1cf54d",
                                  transaction_id="tSxFDcBS64",
                                  organization_code="-1-jlE-Usf",
                                  private_money_id="5f6fcd1b-37b7-43a0-aa32-d84846754a18",
                                  is_modified=True,
                                  types=["topup", "cashback", "payment"],
                                  description="WuKM3BfQD4tSb62y8wh"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_13(self):
        response = client.send(pp.ListTransactions(
                                  to="2024-02-19T08:34:18.000000+09:00",
                                  page=1413,
                                  per_page=9183,
                                  shop_id="6b72aa65-b001-44d8-92f2-59626c5b68c9",
                                  customer_id="ad280327-ca8d-49bf-bf71-fe26d36b3f19",
                                  customer_name="K9gZZjyiM4L5lWung3khrXYHbBO3SHXXBQVvE4N8r8wTWcirATVcJEDYZPBq1IWaGcVgObuPGlQDvq0jrZCbZL83iCA8tscoyk3TeGXhoGVIBbOwJi8CV9gMlVVJyT0h4ag5lQu2tM5B4vl1vhZ7x2QWXTM6CPK6Svne1GoHQHxskQ527srZgbo1lthlsF5rPHcsG2nVxq3orMYlBl",
                                  terminal_id="5cb3909d-fb47-4f8b-b47e-d4c7a1bf9481",
                                  transaction_id="6DfNPm",
                                  organization_code="a5--92Lh-1-4XbY5XzJ-sD9KU3",
                                  private_money_id="88b3e8bc-1a06-42e3-a6e3-d7842c93fc3e",
                                  is_modified=False,
                                  types=["exchange_outflow", "cashback", "expire", "exchange_inflow", "payment"],
                                  description="H06kRFFDmfDDsAvLhC54HuUfyKzVCzqZLrfJVJj1CueGNLlyxoCXeX9HDqAmFXR5mnG0q3qPk0vouXnymt01HxUn8RxPbzAx1"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_14(self):
        response = client.send(pp.ListTransactions(
                                  from="2022-06-30T07:27:24.000000+09:00",
                                  to="2019-07-17T17:45:44.000000+09:00",
                                  page=1825,
                                  per_page=446,
                                  shop_id="7155d94b-3154-4f4f-af86-7f4eb287ba65",
                                  customer_id="fa472eb0-4625-4919-b7b2-5db8deee8f7c",
                                  customer_name="Glc5faZxx8xwtgssVotX1dIZAGp8ie5zm3Bv95Ptpi4Z6KJI4Ehxn2VZp9HhdyWInwANy3q4PBNRkmeb4PCtsxg0NSLyGtIcObC7ipiVViGf5fiqsLYqAqDmUKVRrrWwIJH7EmikCBrUEJTa6hNYP6CpBDjVC98r7QIH9ThzjiK1",
                                  terminal_id="24db1d6b-9ea3-4a3a-b05d-2c17fb0af6ef",
                                  transaction_id="whS3UCP",
                                  organization_code="VJ1B-2-50K-o-6-1574-788",
                                  private_money_id="00d05be2-a418-4ed7-abd8-338909e07b3a",
                                  is_modified=False,
                                  types=[],
                                  description="rQe9VJqqqkRVuxNqGMqPw3vl6esrcaU1LnIfJruKB4N9bowbCfqq7hknkhr9YkD6YWeBznSKM7AL52l9pH5bdQQQfomfO2WQcChJnVCZVgEjX32jvKM8aqo7XxaE4584zhtCZasCxUzgumHO0VIaaI74OJpQ3YH7b2GxyyKbwyKY3YmKhm24nsUCw4l"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transaction_0(self):
        response = client.send(pp.CreateTransaction(
                                  "61e38550-7665-4e34-aed7-4351fa51e123",
                                  "6413d1c2-15f9-4eaf-ae9f-8de4c2fc3bb0",
                                  "9bf7e4d2-d42c-47cb-b37a-fb97e644f1fa"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transaction_1(self):
        response = client.send(pp.CreateTransaction(
                                  "61e38550-7665-4e34-aed7-4351fa51e123",
                                  "6413d1c2-15f9-4eaf-ae9f-8de4c2fc3bb0",
                                  "9bf7e4d2-d42c-47cb-b37a-fb97e644f1fa",
                                  description="cR0fGX23D9yn1hdE6JFzKQWTFiRAyfjItwY8mOiUlWWSieR4Bg9sP92u4rsVFtzrTbiMI7XijkJBNLVzAc0cXgxUn9SblqZHXQefz40MuL"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transaction_2(self):
        response = client.send(pp.CreateTransaction(
                                  "61e38550-7665-4e34-aed7-4351fa51e123",
                                  "6413d1c2-15f9-4eaf-ae9f-8de4c2fc3bb0",
                                  "9bf7e4d2-d42c-47cb-b37a-fb97e644f1fa",
                                  point_expires_at="2022-06-14T12:09:44.000000+09:00",
                                  description="N5RpvmjMWhQSPNsN8aRlTgVD3dXVyYsjj827Ijp7EC6GVY2I88COZXdC2wHbXQEoD8qwrXg8HKycqXkXk0gMxkg0t4tY6iYyQf91OJe0uWeJlvMu3hSCYRoWUsem8YanlfsgBPUtvShrrFfpbY"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transaction_3(self):
        response = client.send(pp.CreateTransaction(
                                  "61e38550-7665-4e34-aed7-4351fa51e123",
                                  "6413d1c2-15f9-4eaf-ae9f-8de4c2fc3bb0",
                                  "9bf7e4d2-d42c-47cb-b37a-fb97e644f1fa",
                                  point_amount=9667,
                                  point_expires_at="2016-02-24T05:07:19.000000+09:00",
                                  description="F6CUlw83YcvMtz5vDHMpu2lHWKAIybzHvPXzhA3tbJJOa2sPMREOzjsq4B0LV1VXLLeqrrQGt5aQ6YI5Ikomyt9JwDXfGAVjRhaMBrih0cIns2ozmq0IFMMjuVW6bOpwLziwuJ0GIwL5gW5yns0ewWL2cV8irAmCAaDIOxqeeHnCsmOnIkGvk"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transaction_4(self):
        response = client.send(pp.CreateTransaction(
                                  "61e38550-7665-4e34-aed7-4351fa51e123",
                                  "6413d1c2-15f9-4eaf-ae9f-8de4c2fc3bb0",
                                  "9bf7e4d2-d42c-47cb-b37a-fb97e644f1fa",
                                  money_amount=5125,
                                  point_amount=8577,
                                  point_expires_at="2024-02-15T20:31:17.000000+09:00",
                                  description="N3RjCp1xS0CeEINMVN0tJIudD0iAn0jCQo8TMjGeHxGmedqA2o4yc8Wv5pKIzYWp5oklZa1qbjjChJojBqaeDPNz6ICU2fXM7SaJWrl9lX09kbONnwv3iXbtemjhUinyTv4cH7fLuFNMQbf2Ixtq9njOCFxEfnTxm6HcN4eOM"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_0(self):
        response = client.send(pp.ListTransactionsV2(
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_1(self):
        response = client.send(pp.ListTransactionsV2(
                                  per_page=687
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_2(self):
        response = client.send(pp.ListTransactionsV2(
                                  prev_page_cursor_id="bc7a103c-0f30-4b89-8678-e29644c75f09",
                                  per_page=742
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_3(self):
        response = client.send(pp.ListTransactionsV2(
                                  next_page_cursor_id="1dde2746-17ee-409c-ae52-745972b58827",
                                  prev_page_cursor_id="dbe3acff-d83a-4d0a-9368-c2e1efbc53cb",
                                  per_page=921
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_4(self):
        response = client.send(pp.ListTransactionsV2(
                                  to="2021-02-28T23:42:36.000000+09:00",
                                  next_page_cursor_id="f6a4cf1f-97b2-4675-9703-7986d2802e73",
                                  prev_page_cursor_id="6e36aceb-9fbe-4a3e-b095-4e636c440f08",
                                  per_page=515
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_5(self):
        response = client.send(pp.ListTransactionsV2(
                                  from="2018-03-04T01:27:50.000000+09:00",
                                  to="2021-01-27T00:11:47.000000+09:00",
                                  next_page_cursor_id="46de23ea-770a-4fe1-a39c-fef7652915f5",
                                  prev_page_cursor_id="52f56beb-045e-4ec1-aa5f-6a3a313d5f95",
                                  per_page=396
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_6(self):
        response = client.send(pp.ListTransactionsV2(
                                  types=["cashback", "exchange_inflow", "topup", "exchange_outflow", "payment", "expire"],
                                  from="2016-03-14T14:10:03.000000+09:00",
                                  to="2022-06-28T15:11:45.000000+09:00",
                                  next_page_cursor_id="92b7360e-cf18-4787-a8cf-eee9d127d4b2",
                                  prev_page_cursor_id="64fb0d76-5ad5-4fd6-954d-6086db2556e8",
                                  per_page=595
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_7(self):
        response = client.send(pp.ListTransactionsV2(
                                  is_modified=False,
                                  types=[],
                                  from="2025-06-02T14:06:57.000000+09:00",
                                  to="2024-09-19T00:13:56.000000+09:00",
                                  next_page_cursor_id="5bc61fe9-ae35-4bb3-bf37-bdec683bfc19",
                                  prev_page_cursor_id="8e43966c-49c4-4de1-95c4-2445d03bd47e",
                                  per_page=733
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_8(self):
        response = client.send(pp.ListTransactionsV2(
                                  transaction_id="i",
                                  is_modified=False,
                                  types=["topup", "exchange_inflow"],
                                  from="2023-04-07T11:57:26.000000+09:00",
                                  to="2016-01-07T02:40:46.000000+09:00",
                                  next_page_cursor_id="0bbe9e0b-ef80-4a65-af4c-d13938f92211",
                                  prev_page_cursor_id="ee3ce689-3472-4773-a9fd-9358cc24c70f",
                                  per_page=131
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_9(self):
        response = client.send(pp.ListTransactionsV2(
                                  description="KC46AAlF9tpMuPDkmJkx",
                                  transaction_id="4QEYoBK0y",
                                  is_modified=True,
                                  types=["exchange_inflow", "cashback"],
                                  from="2021-12-04T14:43:14.000000+09:00",
                                  to="2018-06-19T15:03:39.000000+09:00",
                                  next_page_cursor_id="3e0e207c-2ca5-4502-8bcf-790ac6c2ecf8",
                                  prev_page_cursor_id="b2319094-5203-473f-a477-3b88adab1a71",
                                  per_page=51
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_10(self):
        response = client.send(pp.ListTransactionsV2(
                                  customer_name="5CwpkHlpqvaM2AAXMXDlvbCpSBAuaY2haiOR3FnuvHVQlXAIeEIsnawOEiehvly5cMyjmw4XPP5viXJoavSAObwohpxAA7drW8sQdMAFEUWEzdyJx2e3V7rrfB2bRO7duznB2kfvaiiOFQcI",
                                  description="Jgujd3nDquBcgbJU9cqV72IElc3htWtcc9JEluFA9usAlTsxxH8Va7So1jchQq7Esi27ZztuSlxq7OsvMLWs5aPBTfCDJRhic8OzXfnN9O6nGT0g5Bf1inxN7pC",
                                  transaction_id="zvvJ",
                                  is_modified=False,
                                  types=["cashback", "expire", "exchange_outflow", "exchange_inflow"],
                                  from="2019-09-16T13:37:28.000000+09:00",
                                  to="2019-01-22T07:01:01.000000+09:00",
                                  next_page_cursor_id="a455ce74-050a-4969-a3f3-de8726efc0a6",
                                  prev_page_cursor_id="cad4009e-2468-40fb-8a53-585aa228e34b",
                                  per_page=431
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_11(self):
        response = client.send(pp.ListTransactionsV2(
                                  customer_id="337760cc-6e7f-4911-8ae9-a7a3d0315af7",
                                  customer_name="d4YfHqdEDqNMmxvciK1abBMYKRDZ4KpgD75FBDvdf8to5AFeuP1gc6fBgSaF5hlgrWEE44",
                                  description="XMMChdiHx7lT9Y5oaMAv22JjIVNEBFLcfNXbfFcskZhjGjrGshZsD5gsUNXHhIjK3GpSYBMra9UJtgSfu9PtaGtIJMuf96TccE3TySi0s5La8ulMOLT36aWntJEl4UHFJSsK98Ilzp6vTt7nIX5bEJ0XPrS4bikkz8q8ftVKKnStRpPbZQiYqVQjnKR",
                                  transaction_id="Zrr",
                                  is_modified=False,
                                  types=["exchange_inflow", "payment", "cashback", "expire", "topup", "exchange_outflow"],
                                  from="2016-04-07T20:24:02.000000+09:00",
                                  to="2025-03-25T06:31:33.000000+09:00",
                                  next_page_cursor_id="8a4c029f-2f1f-481f-b5a7-d3b6ae694c1e",
                                  prev_page_cursor_id="04a2724c-8d43-4ac0-9eb6-1f5af41ded19",
                                  per_page=827
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_12(self):
        response = client.send(pp.ListTransactionsV2(
                                  terminal_id="88ab3ba8-54bb-404c-93a7-f6fc14d3c0aa",
                                  customer_id="203cb6b6-b121-424a-81f0-4ecf30cb02d7",
                                  customer_name="CB9dSyUDFXvmnGZvNvjBx8E1zz7hU2lWOwGWKu0T7SWjeSkG5TE5zf5uAigzgur1Ms0h3V4YZm2W22qscqwNvbZ8IUx8UBD0E11BmAEINRYSTuLq4bCC02r7dCPU7VXPPUkoCkisVPZh6TWmospZbCKpYoUuGLG3ymtW1cIq0618jVEuowzvke8Gu1cnqug",
                                  description="EUNZR3Tpl",
                                  transaction_id="9n",
                                  is_modified=True,
                                  types=["topup", "exchange_inflow", "cashback", "expire"],
                                  from="2023-12-24T11:00:23.000000+09:00",
                                  to="2017-07-27T15:07:08.000000+09:00",
                                  next_page_cursor_id="028a917e-4695-4669-9a9d-9ee3b32d8c66",
                                  prev_page_cursor_id="789df4ce-d9a8-4676-997d-fd3dd6ccd85a",
                                  per_page=227
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_13(self):
        response = client.send(pp.ListTransactionsV2(
                                  shop_id="6dc595fd-e59c-49bb-be34-114585297b32",
                                  terminal_id="cf3e44aa-a60c-4df2-af6a-fafaff18c74f",
                                  customer_id="18a500cd-8300-4f59-ad51-98dae68fcbaf",
                                  customer_name="6FYveoGNOodzCgWktXyGrcuoFagkwHNLtNQ2XU3oyqHFKePR6Nmqrvrl5VPEMdjqHQg7fP8mp9g1QjZkwyko0FiBWwXkKK3NM0aagP1xPQwuDgJFrI2SZW3LD3pAzNUre0UcZQz5yaDtRfL8T96HeydDkQPhLehwLNPXEWsaDinMBwLonX8fBkyjsZMgUImTmBcDfvanWyPnyyMV6aFWXVWr8lGshspo",
                                  description="F2B7Y9VE4224H3BkH6JdPIhgJK3eo9mB6ugydubRCdcTXDISYp7qAZxTN04FlyJPLJkMflEfArqRApXk8kdvBLnWgykDW9CH8YdI89blfL5ZC5scpYKVD",
                                  transaction_id="qxSk7",
                                  is_modified=False,
                                  types=["topup", "payment"],
                                  from="2023-01-05T12:55:33.000000+09:00",
                                  to="2024-01-23T05:58:54.000000+09:00",
                                  next_page_cursor_id="2633d600-6182-45a5-909f-4cee5359fc9f",
                                  prev_page_cursor_id="281835ba-ac3a-4612-9360-37a32420cea5",
                                  per_page=558
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_14(self):
        response = client.send(pp.ListTransactionsV2(
                                  organization_code="gy-1-y6A-1UFX5ues27j-u-4-Qmp-6L",
                                  shop_id="396ecff7-edc2-4a25-a39a-095925a72668",
                                  terminal_id="053559a3-22fa-4d41-a961-e6119f580e84",
                                  customer_id="017f1468-48ad-42d7-8d09-9c835b70f7cb",
                                  customer_name="My0jFmTyCGkLIORjpEdl63NDBv8IzFB1EEovmtUoVW2Cu1fdgN4vhSwY1YCeeaICZAzor3rf5KLONqy7ToRLPIz3Jh69kDgQaXcWdd2apT5GOytIzKIKUeEEMpyB2p5RMGfBVNim4hTJXPRuvzSMmWEQ10gGb9MicBIej9lmMTRrlUs6yz3iAtJKx3uRF25XGmOFFlbjabkiVFsDWnVXrYCNGzZL1QPbRa",
                                  description="P7Nk8BX1nGcmbDIqgCNPl1uQPppv9YpsZRFnN7obDkaSgEpC38TY9z5i",
                                  transaction_id="d",
                                  is_modified=True,
                                  types=["exchange_inflow", "exchange_outflow", "expire"],
                                  from="2018-08-20T21:58:43.000000+09:00",
                                  to="2021-09-28T16:03:41.000000+09:00",
                                  next_page_cursor_id="b9c1e4aa-8356-4dfd-8ce8-5f853598e2cb",
                                  prev_page_cursor_id="621242c3-9477-4290-b1be-94c9a3a39cdb",
                                  per_page=272
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transactions_v2_15(self):
        response = client.send(pp.ListTransactionsV2(
                                  private_money_id="96924dfd-d8f6-4013-b893-95dad9d532b1",
                                  organization_code="-D-bq-t--xO-8KB8",
                                  shop_id="7f64571e-4f26-4433-8e27-3f7bb7cb9fd6",
                                  terminal_id="b0747f96-b689-449f-8df6-404ee8237a8c",
                                  customer_id="f6ba690b-1486-4395-8e63-a635af607e42",
                                  customer_name="Zqdm8LAjIgwTOlkIStsCrJQLnOMQupGV0FdwRuEZnTfi6fdLpCc7h4CxNIPMdDaUn4KwwXZ1rcCRjdkAobuxOn7gy7Ks5Dx15qeEThttWEIvfFlfY7OE6Ywya0vOloRBQIHqpYKyE67hkAURATb8R2tGn1Q9s2M9GWyBFljifEHxXp0jffgUT4hy7",
                                  description="Bhu7Hf9lBLJJrLf0UJbWKGypZYYypECaoOc65i0C52n7f59Cni4rcSOaPfPU1MDogRH4bUmMnBbiCsd9yR2nm7QNhuVxYkpk0oIN9yNAggKnFKoPqG5en1ToKL2SZuMxHCeImziB30cZY5EdOkH5DZaO071zTCv5BeQPmIBX51YRbx9khiN",
                                  transaction_id="PSnyIa",
                                  is_modified=False,
                                  types=["payment"],
                                  from="2022-01-15T23:34:41.000000+09:00",
                                  to="2019-07-25T22:16:41.000000+09:00",
                                  next_page_cursor_id="36574a36-4fbb-41c0-8762-ea5a31185c27",
                                  prev_page_cursor_id="a636d1c3-6358-4e80-bce6-24edce183333",
                                  per_page=617
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_0(self):
        response = client.send(pp.CreateTopupTransaction(
                                  "8c35172f-e3c0-4282-92d5-14171379eb43",
                                  "89d073d8-8d9b-4d79-bb1a-683f40e775d5",
                                  "3378bffb-9f6d-422f-bc86-8599df6b0302"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_1(self):
        response = client.send(pp.CreateTopupTransaction(
                                  "8c35172f-e3c0-4282-92d5-14171379eb43",
                                  "89d073d8-8d9b-4d79-bb1a-683f40e775d5",
                                  "3378bffb-9f6d-422f-bc86-8599df6b0302",
                                  request_id="2c6df70a-5010-4eb5-8385-6c06aa29af5f"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_2(self):
        response = client.send(pp.CreateTopupTransaction(
                                  "8c35172f-e3c0-4282-92d5-14171379eb43",
                                  "89d073d8-8d9b-4d79-bb1a-683f40e775d5",
                                  "3378bffb-9f6d-422f-bc86-8599df6b0302",
                                  metadata="{\"key\":\"value\"}",
                                  request_id="afbf6c97-5b0a-44e9-bf90-8b7c69bf6717"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_3(self):
        response = client.send(pp.CreateTopupTransaction(
                                  "8c35172f-e3c0-4282-92d5-14171379eb43",
                                  "89d073d8-8d9b-4d79-bb1a-683f40e775d5",
                                  "3378bffb-9f6d-422f-bc86-8599df6b0302",
                                  description="NoqyIp",
                                  metadata="{\"key\":\"value\"}",
                                  request_id="3badffbb-bb4d-4cb4-92bc-1351b30247d0"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_4(self):
        response = client.send(pp.CreateTopupTransaction(
                                  "8c35172f-e3c0-4282-92d5-14171379eb43",
                                  "89d073d8-8d9b-4d79-bb1a-683f40e775d5",
                                  "3378bffb-9f6d-422f-bc86-8599df6b0302",
                                  point_expires_at="2022-05-04T16:15:12.000000+09:00",
                                  description="0r2hDkkjyUC5MdF3jmTvez1r7oKHflTg3yRRrDACZ3SJoDFOc4FG6XMaRr1ZbaCePzCyUFBLmBthEPMhsDF3SdfFgoOhPeznFIW07w8IN2EAwmcLfKZ9p3135hSMYjoXjDWfkAN1zOniEUtvV8M869X4Q",
                                  metadata="{\"key\":\"value\"}",
                                  request_id="33e48d71-94a1-4b43-a8a4-789762310ec4"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_5(self):
        response = client.send(pp.CreateTopupTransaction(
                                  "8c35172f-e3c0-4282-92d5-14171379eb43",
                                  "89d073d8-8d9b-4d79-bb1a-683f40e775d5",
                                  "3378bffb-9f6d-422f-bc86-8599df6b0302",
                                  point_amount=7224,
                                  point_expires_at="2018-01-21T16:30:22.000000+09:00",
                                  description="efnvzYKfAGkCfj1LowlfYzFtV8VCgmuvhc64Q41VMsk3HV9SjuEFE",
                                  metadata="{\"key\":\"value\"}",
                                  request_id="f367f5cd-0fd2-49dc-bddd-2bddbc908634"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_6(self):
        response = client.send(pp.CreateTopupTransaction(
                                  "8c35172f-e3c0-4282-92d5-14171379eb43",
                                  "89d073d8-8d9b-4d79-bb1a-683f40e775d5",
                                  "3378bffb-9f6d-422f-bc86-8599df6b0302",
                                  money_amount=9661,
                                  point_amount=3658,
                                  point_expires_at="2022-05-28T05:03:38.000000+09:00",
                                  description="k3ZJNJ1kPfeHmyUBjxLg5KS9jgPNBlKbT8xntNjyW66FwALRZE7mrm6nwYBTnnAXUqQ8DzeB6y8F6AUuWyNFKcgtuPtWXxrgx6Mqar83a9Gw",
                                  metadata="{\"key\":\"value\"}",
                                  request_id="0d363118-55ca-4490-9fde-44cb4f3b17d8"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_7(self):
        response = client.send(pp.CreateTopupTransaction(
                                  "8c35172f-e3c0-4282-92d5-14171379eb43",
                                  "89d073d8-8d9b-4d79-bb1a-683f40e775d5",
                                  "3378bffb-9f6d-422f-bc86-8599df6b0302",
                                  bear_point_shop_id="22c62a6d-f936-4fbe-bcc4-c414066aee97",
                                  money_amount=5542,
                                  point_amount=8630,
                                  point_expires_at="2025-07-28T16:11:19.000000+09:00",
                                  description="EW7CSk7Hj2FyRNGUZ6RxiLwLVQaBke9dq3Qqsxef8gfgi4j6MOHYOqJcRQPN0nO0Bh2GmUKxRqAyu7yhC37oKsIPC8kvoXO9Q46nQcZAJrIgsAWwbZowVhIhdT4sUzgAA8QXPMtu2odFjiuNyX9IclYbwPklHLTBDcw739U",
                                  metadata="{\"key\":\"value\"}",
                                  request_id="42e6587f-c4c9-49d1-9737-1112dea2af80"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_topup_transaction_with_check_0(self):
        response = client.send(pp.CreateTopupTransactionWithCheck(
                                  "dd0f484a-26c6-4ea5-b265-ccf10f0356d8",
                                  "ef946001-9dab-4733-9815-86a3dbaa7187"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_payment_transaction_0(self):
        response = client.send(pp.CreatePaymentTransaction(
                                  "b0c486f2-a1fb-4b9e-8d81-098bc63a1dfd",
                                  "8e329142-7ccf-472a-a978-0da86b4c3310",
                                  "b49970dc-c270-4cae-8eb5-bcd745d905a0",
                                  7451
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_payment_transaction_1(self):
        response = client.send(pp.CreatePaymentTransaction(
                                  "b0c486f2-a1fb-4b9e-8d81-098bc63a1dfd",
                                  "8e329142-7ccf-472a-a978-0da86b4c3310",
                                  "b49970dc-c270-4cae-8eb5-bcd745d905a0",
                                  7451,
                                  request_id="1b893d13-1f73-4cc9-a436-8eb249f09ba0"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_payment_transaction_2(self):
        response = client.send(pp.CreatePaymentTransaction(
                                  "b0c486f2-a1fb-4b9e-8d81-098bc63a1dfd",
                                  "8e329142-7ccf-472a-a978-0da86b4c3310",
                                  "b49970dc-c270-4cae-8eb5-bcd745d905a0",
                                  7451,
                                  products=[{"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}],
                                  request_id="b9cb8a67-8d05-41e4-9c94-9b5f34832059"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_payment_transaction_3(self):
        response = client.send(pp.CreatePaymentTransaction(
                                  "b0c486f2-a1fb-4b9e-8d81-098bc63a1dfd",
                                  "8e329142-7ccf-472a-a978-0da86b4c3310",
                                  "b49970dc-c270-4cae-8eb5-bcd745d905a0",
                                  7451,
                                  metadata="{\"key\":\"value\"}",
                                  products=[{"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}],
                                  request_id="500134d6-1ce7-49d7-859f-f4edf2372a7d"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_payment_transaction_4(self):
        response = client.send(pp.CreatePaymentTransaction(
                                  "b0c486f2-a1fb-4b9e-8d81-098bc63a1dfd",
                                  "8e329142-7ccf-472a-a978-0da86b4c3310",
                                  "b49970dc-c270-4cae-8eb5-bcd745d905a0",
                                  7451,
                                  description="8Yd6hiwD1mg8GeATVgSrzjU7WsKP8GMlVqAQ1lZX0syxgZtMHpRCsTSdpeBuZ7Y9665Q8GXKvdJGnDHLHWqugUnev3jeBoKjjw5vVAT5S05wuqpo079",
                                  metadata="{\"key\":\"value\"}",
                                  products=[{"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}],
                                  request_id="23d7b6a3-984a-4ef2-a8ee-a1eae9a62a88"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_cpm_transaction_0(self):
        response = client.send(pp.CreateCpmTransaction(
                                  "UhpfR89CAaYZvm8vZ10xKm",
                                  "eb322683-76db-4740-8a6f-557ffda711b2",
                                  9558.0
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_cpm_transaction_1(self):
        response = client.send(pp.CreateCpmTransaction(
                                  "UhpfR89CAaYZvm8vZ10xKm",
                                  "eb322683-76db-4740-8a6f-557ffda711b2",
                                  9558.0,
                                  request_id="163c7767-2b87-4cff-b1b0-c837ed968f21"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_cpm_transaction_2(self):
        response = client.send(pp.CreateCpmTransaction(
                                  "UhpfR89CAaYZvm8vZ10xKm",
                                  "eb322683-76db-4740-8a6f-557ffda711b2",
                                  9558.0,
                                  products=[{"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}],
                                  request_id="855fe96d-d3c3-421c-bf3c-c40cb3408f86"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_cpm_transaction_3(self):
        response = client.send(pp.CreateCpmTransaction(
                                  "UhpfR89CAaYZvm8vZ10xKm",
                                  "eb322683-76db-4740-8a6f-557ffda711b2",
                                  9558.0,
                                  metadata="{\"key\":\"value\"}",
                                  products=[{"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}],
                                  request_id="8fb38681-0202-4ef6-8cc9-0344d4cd7a82"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_cpm_transaction_4(self):
        response = client.send(pp.CreateCpmTransaction(
                                  "UhpfR89CAaYZvm8vZ10xKm",
                                  "eb322683-76db-4740-8a6f-557ffda711b2",
                                  9558.0,
                                  description="V3ifBy1h4l5wch3QTQh46QZtCKY5DaMpbVwP339t02uup9LBCPpKIT6WvkD76JQsZX0pyC9RTfgyh8rUUOPmwfNhDs3tuejguT6GHXuXFPpkO4DgIeM",
                                  metadata="{\"key\":\"value\"}",
                                  products=[{"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}],
                                  request_id="693e9b7b-d74c-4288-86f8-912fb9dbf3dd"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transfer_transaction_0(self):
        response = client.send(pp.CreateTransferTransaction(
                                  "990c0d99-1e68-4a98-aff9-c20456b9b4d8",
                                  "5193f23c-534c-41c3-99eb-98d91cdde67c",
                                  "0988d24e-bb95-4e52-924e-838cfc26bb9c",
                                  1210.0
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transfer_transaction_1(self):
        response = client.send(pp.CreateTransferTransaction(
                                  "990c0d99-1e68-4a98-aff9-c20456b9b4d8",
                                  "5193f23c-534c-41c3-99eb-98d91cdde67c",
                                  "0988d24e-bb95-4e52-924e-838cfc26bb9c",
                                  1210.0,
                                  request_id="de7bf065-6012-49b1-85dc-5e170eab7866"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transfer_transaction_2(self):
        response = client.send(pp.CreateTransferTransaction(
                                  "990c0d99-1e68-4a98-aff9-c20456b9b4d8",
                                  "5193f23c-534c-41c3-99eb-98d91cdde67c",
                                  "0988d24e-bb95-4e52-924e-838cfc26bb9c",
                                  1210.0,
                                  description="kFyEnT9fclavvBqj5CKGYF3ec8osD7HyQ8MJJfJTqHg3BmU4pe1GVb7NDC12Ay7rOiq87u0cAyK6Z8YyebQmuV",
                                  request_id="176f9995-7328-4b0d-ad97-9e53555e0256"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_transfer_transaction_3(self):
        response = client.send(pp.CreateTransferTransaction(
                                  "990c0d99-1e68-4a98-aff9-c20456b9b4d8",
                                  "5193f23c-534c-41c3-99eb-98d91cdde67c",
                                  "0988d24e-bb95-4e52-924e-838cfc26bb9c",
                                  1210.0,
                                  metadata="{\"key\":\"value\"}",
                                  description="Akxl0e8F432Ad2DHi",
                                  request_id="ca165efa-af1b-4ad1-8b67-7a0d3942b72c"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_exchange_transaction_0(self):
        response = client.send(pp.CreateExchangeTransaction(
                                  "7392625c-c324-488f-9f2e-934762e719de",
                                  "e8707486-77b9-4ead-8b1d-3d9b7f4f1d24",
                                  "6c6fc1a0-d69c-4edd-a0c6-4ea9f6daa25e",
                                  7.0
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_exchange_transaction_1(self):
        response = client.send(pp.CreateExchangeTransaction(
                                  "7392625c-c324-488f-9f2e-934762e719de",
                                  "e8707486-77b9-4ead-8b1d-3d9b7f4f1d24",
                                  "6c6fc1a0-d69c-4edd-a0c6-4ea9f6daa25e",
                                  7.0,
                                  request_id="66482183-2d24-450e-bcf1-a860c6fdb2e9"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_exchange_transaction_2(self):
        response = client.send(pp.CreateExchangeTransaction(
                                  "7392625c-c324-488f-9f2e-934762e719de",
                                  "e8707486-77b9-4ead-8b1d-3d9b7f4f1d24",
                                  "6c6fc1a0-d69c-4edd-a0c6-4ea9f6daa25e",
                                  7.0,
                                  description="SpUkFeya5l8vd3iTOxJcWOPF2cVP",
                                  request_id="7b72374d-f2ef-487f-add4-03cc2b2049a3"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_bulk_create_transaction_0(self):
        response = client.send(pp.BulkCreateTransaction(
                                  "cJb0gQU1kmnQXMAVwH1YSsmEinvG",
                                  "wykFEGQI",
                                  "apSSW2GUkyJj6tiDgWBIAbhrwjadhrPcHgMZ"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_bulk_create_transaction_1(self):
        response = client.send(pp.BulkCreateTransaction(
                                  "cJb0gQU1kmnQXMAVwH1YSsmEinvG",
                                  "wykFEGQI",
                                  "apSSW2GUkyJj6tiDgWBIAbhrwjadhrPcHgMZ",
                                  private_money_id="5dc222b8-4cd9-4963-afa4-224cbc899563"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_bulk_create_transaction_2(self):
        response = client.send(pp.BulkCreateTransaction(
                                  "cJb0gQU1kmnQXMAVwH1YSsmEinvG",
                                  "wykFEGQI",
                                  "apSSW2GUkyJj6tiDgWBIAbhrwjadhrPcHgMZ",
                                  description="lKwI3LMkzrPnZ94viM2DDsPafOHKFV2FrvgdkLr1VvcHDv29b2LmavjQi0hhAOkSKq4QBfRZYBO1TwArD",
                                  private_money_id="7453d0d5-7061-4a5b-b9fb-aef031222ed0"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_transaction_0(self):
        response = client.send(pp.GetTransaction(
                                  "f81be353-5be1-4388-9373-d516b7030be3"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_refund_transaction_0(self):
        response = client.send(pp.RefundTransaction(
                                  "78f85074-4347-431d-9641-192a272f5b2d"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_refund_transaction_1(self):
        response = client.send(pp.RefundTransaction(
                                  "78f85074-4347-431d-9641-192a272f5b2d",
                                  returning_point_expires_at="2021-05-10T17:59:16.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_refund_transaction_2(self):
        response = client.send(pp.RefundTransaction(
                                  "78f85074-4347-431d-9641-192a272f5b2d",
                                  description="nTXN4NJTrK2eyi0jaaMssDLSZbh1VWz5nXEZ6abx",
                                  returning_point_expires_at="2021-03-24T20:27:08.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_transaction_by_request_id_0(self):
        response = client.send(pp.GetTransactionByRequestId(
                                  "3b2a56e4-a135-4fd0-93f1-ca1070cf4bf0"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_external_transaction_0(self):
        response = client.send(pp.CreateExternalTransaction(
                                  "10431c3f-baef-43d7-82b3-60c070fa888a",
                                  "3210533e-59f1-4edd-8aaa-63196dd2d931",
                                  "0efd8102-a129-4883-bed5-6b27afb212b9",
                                  3182
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_external_transaction_1(self):
        response = client.send(pp.CreateExternalTransaction(
                                  "10431c3f-baef-43d7-82b3-60c070fa888a",
                                  "3210533e-59f1-4edd-8aaa-63196dd2d931",
                                  "0efd8102-a129-4883-bed5-6b27afb212b9",
                                  3182,
                                  request_id="e56ae0e9-c2ec-4c95-a02b-a3e6f3daec9b"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_external_transaction_2(self):
        response = client.send(pp.CreateExternalTransaction(
                                  "10431c3f-baef-43d7-82b3-60c070fa888a",
                                  "3210533e-59f1-4edd-8aaa-63196dd2d931",
                                  "0efd8102-a129-4883-bed5-6b27afb212b9",
                                  3182,
                                  products=[{"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}],
                                  request_id="3ac34c83-82fb-4902-9b89-6669bd1430eb"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_external_transaction_3(self):
        response = client.send(pp.CreateExternalTransaction(
                                  "10431c3f-baef-43d7-82b3-60c070fa888a",
                                  "3210533e-59f1-4edd-8aaa-63196dd2d931",
                                  "0efd8102-a129-4883-bed5-6b27afb212b9",
                                  3182,
                                  metadata="{\"key\":\"value\"}",
                                  products=[{"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}],
                                  request_id="1e53ce5a-d4f8-4b14-b8c0-75b2501d4549"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_external_transaction_4(self):
        response = client.send(pp.CreateExternalTransaction(
                                  "10431c3f-baef-43d7-82b3-60c070fa888a",
                                  "3210533e-59f1-4edd-8aaa-63196dd2d931",
                                  "0efd8102-a129-4883-bed5-6b27afb212b9",
                                  3182,
                                  description="lkSffZOtE1eOrCc2AexsgdtjCsb86AoVF18p8hjft9uWu35CIXFai583DVjg7T5jQYnyVRCxMoysUS0yYylFXxinkhJw909XOsjKakLWTKPGsOv7yETNsjQD8gYBaF9Ku",
                                  metadata="{\"key\":\"value\"}",
                                  products=[{"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}, {"jan_code":"abc",
         "name":"name1",
         "unit_price":100,
         "price": 100,
         "is_discounted": false,
         "other":"{}"}],
                                  request_id="4cde738e-903a-4d8a-8fbf-d80bc7441a39"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_refund_external_transaction_0(self):
        response = client.send(pp.RefundExternalTransaction(
                                  "7126c87d-3422-429a-802c-1b83ba293fbd"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_refund_external_transaction_1(self):
        response = client.send(pp.RefundExternalTransaction(
                                  "7126c87d-3422-429a-802c-1b83ba293fbd",
                                  description="87ZMM5bzHRYJGdGyamO0HIYeiK5F8tDudEQ29w0XkvaYsEqSkSMnn8xHJ5GW7Kqz9sdZV72gaMQjUyAdaKcIEBfahFXYI13JSfmDeC8Pe9RPBh09"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_0(self):
        response = client.send(pp.ListTransfers(
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_1(self):
        response = client.send(pp.ListTransfers(
                                  description="2IyWHdCVo0L6wuiLZVGsMxtMEZwwVDm1230GKrk4yPXaa3xEYXIcHfDiiJUnI0Tsj6u5riuxHUijLIuaABI2sgArcxbZnfVIXCmlxchMRVmyrqSbTNJI1BAnTkVuqk9Radndq7lYhfur4qr"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_2(self):
        response = client.send(pp.ListTransfers(
                                  transfer_types=["expire"],
                                  description="annVnY5A87oAdOlRaej9g1P8cJ0wZq7r8PA8Z"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_3(self):
        response = client.send(pp.ListTransfers(
                                  transaction_types=["exchange", "expire"],
                                  transfer_types=["coupon", "cashback", "campaign", "payment", "exchange", "expire", "transfer"],
                                  description="OTpktOG4bXOdFhP6I4yzRhSMNqRV8fRWqiwJ9eMVcMaHQPzxjyPFeXzsmbxseCj0nBT4CZLHmzhyLpzDLaHG1qb5cTGlYsBN81GZC4y28KQrORWEV6NpGJVe2WpML4WqHyv7DOcFXUhTMJjl6JPEVlnvmWrIX9dMGZe3MNdQmQXFRgk"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_4(self):
        response = client.send(pp.ListTransfers(
                                  is_modified=False,
                                  transaction_types=["expire", "topup", "payment", "transfer"],
                                  transfer_types=["transfer", "payment"],
                                  description="bFeBpruOI4zKlyBJLaYRDL32N7dr3zyhjVLOB3ic8a60rxr6zOQBm1JNGJvso6SqHW5m5ga3tzdxmMBYCBXpYgrIHbJfmmRWY9KSwnOsDkX5cQVbqvTB"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_5(self):
        response = client.send(pp.ListTransfers(
                                  private_money_id="7415d037-0f8d-4d54-a038-da98810a0c5f",
                                  is_modified=False,
                                  transaction_types=["topup", "exchange", "payment"],
                                  transfer_types=["coupon", "campaign"],
                                  description="UVYGV8dlIQWsnzcbgq5ENHx3UhUKVvCap9qZGPr0FPKn8fz4RHHhdODjmSQAxL1dnZFAcxnzcDoXFu9RvgHvQmcbi8M29l8N9upVkH4n6TL9PaKNa4a7qbzuMAzXFjnBE0yqINv3G6jxwj1xoi9kGULdl7Eo435ZmwetogKX3lVW59mXMHLkZUjLRLDWA"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_6(self):
        response = client.send(pp.ListTransfers(
                                  transaction_id="94626ec3-18da-476d-af1d-732346768606",
                                  private_money_id="3a1722c7-5cd3-4bdc-80c8-d1e79c5d63c2",
                                  is_modified=False,
                                  transaction_types=["exchange"],
                                  transfer_types=["campaign", "exchange", "coupon"],
                                  description="R8ruOkri0VamRDk531mMDMUyVx28pwhACctqRvtflvl"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_7(self):
        response = client.send(pp.ListTransfers(
                                  customer_name="xi6klUbGBA3lVSvJYRpvqSwtkITkQlzp8h7et93IUzwq8rSqmqAKWEiNkibdeosqgpu8uDmjgbSjo90IdJ7IUiVqx2PtXJ4ODtwOPDesPncrt7SfPmLadeJtnz0GznaOAQ2XRZHHRQR3eeTEZiidItLzoWvot0r7MYQfcMp3MFa2OtL0hMhk1xsX2BgyFqvyxhsXek2g0R3Efh18yFYr",
                                  transaction_id="60896f03-018f-44b6-91b5-df89e907c426",
                                  private_money_id="db151050-8d0d-41ae-976e-20872a30d2e3",
                                  is_modified=True,
                                  transaction_types=["cashback", "topup", "exchange", "payment"],
                                  transfer_types=["topup", "coupon", "payment"],
                                  description="k0pSmT7c2EO2OiMoWOYwsjZSS2sb9DhD"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_8(self):
        response = client.send(pp.ListTransfers(
                                  customer_id="5d68f926-8619-48bd-9b2e-115c61922055",
                                  customer_name="1kPdSl15J4Vv0ENIgNFJ0uqV",
                                  transaction_id="adcb67c5-305d-46a4-943d-a5b66f9f7449",
                                  private_money_id="8a4795b5-841c-468a-b476-f1e896237f6f",
                                  is_modified=True,
                                  transaction_types=["exchange", "topup", "cashback", "payment"],
                                  transfer_types=["campaign", "topup", "coupon", "payment", "expire", "exchange", "cashback", "transfer"],
                                  description="GOcJPJ5cnyRpPPbKcRgk4ReQuFiqmDuQxqLk8a7HKQ1ArdBViqswnTcJOGj5wwRTEc7cqzNoVtLKkJCHYJkRslhJitcL4h6Zq8Wf0wK1GNBjMwTi5"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_9(self):
        response = client.send(pp.ListTransfers(
                                  shop_name="g9O0623zHMEbogBtW2p12LBrYpsCJUdRwYyy18HR1WIB2XyVTqmcUEcUl2vQHP1QKmkXRyZkwAU03bGsHDPcbKIQYGMRGYNdZT5NOXVGRJoWCCJsDYHB43rWaN3YiYkwtjv5PhkLUz7t8MDFdwHpTuoOWAJRo3TnNyPEVI7Vb90f1WCgbPqo2CrgW8g7Cqykq7AIva2d6ZP95cI7vuXNaONkpGlEsUzQt477cURDidF07WxU",
                                  customer_id="90d6b638-e5dc-4de3-a294-f06ca4405e6d",
                                  customer_name="n6Bhs516ANdL6dY1QWUV6b1yYxoMRy0JKaEr12J7RH1fbiQDkzApGzFDXhMUWyaHC8KBlsuyM3WYIfPAdt2MDf0j80S5zCQ",
                                  transaction_id="1bc2b6ac-d6e8-4303-a17b-ea7beed6ad4d",
                                  private_money_id="40e7ad27-95a0-48e4-a056-706ac410c07d",
                                  is_modified=True,
                                  transaction_types=["topup", "transfer", "expire", "payment", "cashback", "exchange"],
                                  transfer_types=["exchange", "transfer"],
                                  description="rSefC13XKfyDNpXWPTFCRpNqKiLpytWc6AbSdHVevxBO5L8asoa72V4O4MN5R2V6YiIUgKZRlFj1ZzFfMogmGKPv4DmYYW9hvRMXmHVP4hwY7mJbyCGOmLkxBDQPQnLc2e69pINOB5Ejunb6fPu85kpPuneU0iDsiqvVrMTqTz0"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_10(self):
        response = client.send(pp.ListTransfers(
                                  shop_id="f1d913e3-dbc7-41f8-add7-edaf072c5191",
                                  shop_name="O5QnqCJThumSqB5F9jqFEmqLLDm1sSwrffHgtgndfBlnDfBLDa8iJvccI98gl9H0xPYS3ZRdlMA5fLrJcbJ6t02cv97SLNNGT1tev9rk1VRR7KC4CUq04MEHM0hiCiqxDgfEPQoK5Ce7Fd1WDrK9CTYCLKrUGkykKm8rcwyPyuMXkmcPZQ80O3RdZKHvTcFuHhKcSNt4ugjXLQZGRQoPO7SUPWLRAw8GoQZrCER9KTZKUDOrSefFAeGaz1ingyi",
                                  customer_id="a31a8b42-1ee9-47f0-b2ca-d13de2b0e010",
                                  customer_name="1ippW7XIkp6fnN8h2PGCgYgfanmnfDHpcpFNxi2QdCfRmH1ITlsTuWQ9BxBmAr5vJSLO2PPwMDpbMYRqLs5EufgTZL0WcjmfiwNy9SPjHDZDqcRdQtTOz9zyiOhCpZJHexReh0VyeFeiglkH9feVetMnSerICmQuLzQ9UaY2O3h0bLrR8sR",
                                  transaction_id="2f2bf178-cc04-4e2d-b7ed-1204af0f8bb2",
                                  private_money_id="2ee13c2c-f1f9-455a-bacc-05ffd87c138b",
                                  is_modified=True,
                                  transaction_types=[],
                                  transfer_types=["expire", "topup", "campaign", "exchange", "transfer", "coupon", "cashback"],
                                  description="SsMb9PBkzjZVz3TkxQNWBH7RVQpZsCKx"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_11(self):
        response = client.send(pp.ListTransfers(
                                  per_page=5275,
                                  shop_id="7df14bfb-edf4-4d60-ab88-db7c1aadc1e6",
                                  shop_name="9kNIkWPUbQ5yxcGEpE1c8Ag6UvHtAXmyBj3LShBPsQej6mNH2FkxobrS8VF7EcljkUVpPwjtbGM8MSHmC4rr4Iyc5o",
                                  customer_id="7b7c00a9-6880-4dde-8cce-dff39dc59c0c",
                                  customer_name="E9BC0OhzZqZ9aJDYmWQXNstKzxSZfoFgKzKPmRRkKdZj1p9g4ZEaz0gwZvblPk9BQM5eT9VZx0bOWgQT3zQ9YB9089Id2kxucdkxraOPazkXIrfYhYikNkTldDTIe8WzdD56geoY9SK8lZwcC7G",
                                  transaction_id="80a0c2bf-f755-4e50-8965-55dd88e44c61",
                                  private_money_id="b58a9af6-df04-40cc-91c2-c2053db988dd",
                                  is_modified=True,
                                  transaction_types=["transfer", "cashback", "expire"],
                                  transfer_types=["payment", "topup", "cashback", "campaign", "transfer"],
                                  description="Gy"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_12(self):
        response = client.send(pp.ListTransfers(
                                  page=6937,
                                  per_page=2538,
                                  shop_id="637822d4-ea75-4581-aeae-b75520bea962",
                                  shop_name="iEt4sJrSmsbBJqi58lZ7nx4jx5tC9e1nFBKlfJJAMyGpbCsIOUq6R8pxE0ttrsDojbBxLJvKVe",
                                  customer_id="2444654f-aee8-4669-b430-6ee60e5e07e4",
                                  customer_name="mwkZx3E9AJUjs9JNuRfj",
                                  transaction_id="b824e5a2-23d9-48ec-876d-4c5ea971c624",
                                  private_money_id="a191abb8-ee64-480c-8763-a9c213db9c0f",
                                  is_modified=False,
                                  transaction_types=["exchange", "payment", "topup"],
                                  transfer_types=["transfer", "cashback", "topup", "exchange", "coupon"],
                                  description="yVbOxjtvtkOKKCipZ6QYh6hlQ0el5VssCGRr0tVBSDz35LWaM1KhL7GhoIFRpCBPdQKiRRKJNWv8PdqEV05KILa5gbP5fWqLu9qGFNaPSF"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_13(self):
        response = client.send(pp.ListTransfers(
                                  to="2022-11-25T22:35:27.000000+09:00",
                                  page=7869,
                                  per_page=8064,
                                  shop_id="86ec1e85-626e-4859-b6d2-f527ea8b5534",
                                  shop_name="qK143LgJRKu8hU93g68YLtbLk0zyq2JJ9oWqIqrMteEeVz5FXtaiYjdIWPbT4nx1dfmntKt5PiIogbNcMoT1fWtriXipG5sQ3BlcHB93TOQPICAStDyEy7JbpgBFANoghecA8CpwRYaoD6MjhnXJPtQSuugYdmOZ3S7K",
                                  customer_id="ff3f2082-ddbb-4e82-95db-2181ac657bf0",
                                  customer_name="EDBvEtFEa6WMWYcA",
                                  transaction_id="7beab0fd-4634-414c-baac-6b82354e2942",
                                  private_money_id="34aa99a5-7086-4069-855b-f19d36fa3700",
                                  is_modified=False,
                                  transaction_types=["transfer", "payment", "topup", "expire", "exchange"],
                                  transfer_types=[],
                                  description="EaLOMuE0JZkBplYFtJX7VamuEbPkihQzAZaSJcFoPDdD7LysN6Ap2rVbjM2dmi9vywhawpBZ"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_14(self):
        response = client.send(pp.ListTransfers(
                                  from="2016-11-02T05:40:10.000000+09:00",
                                  to="2016-05-17T23:48:22.000000+09:00",
                                  page=4832,
                                  per_page=5917,
                                  shop_id="ec4865da-fad8-4629-9fa3-1d873139b164",
                                  shop_name="ESdE1g2e0uq3UqAOEWaX7",
                                  customer_id="d0d85111-9d06-443b-bfc8-a4dc2348749e",
                                  customer_name="iCNViEO0fZ5KvcM6gT6ijSuuQPlju2i45GEkKrMXnn9WYNOpY97GqohhFVOMFVtlchrl2VJvS04NHJz0MsvsKgmLf1YQLm7q0CVLBimRX06HUJTqJzzcdRUSmNd2YTItesfK1sWJxvHD8bLf6CqkA1JX3Kl1wQbZXxpmGJUzGMZ8LwynSwatlCg2rVCsFZuxVQGinZLgqhLqCG03Udl3Scs4xWqS3gzKvFuQ",
                                  transaction_id="775f2584-e031-4e87-9fd2-5e383bf02d4b",
                                  private_money_id="512a7bc2-18c9-48fa-acaf-d7e132a96d0f",
                                  is_modified=True,
                                  transaction_types=["transfer", "cashback", "exchange"],
                                  transfer_types=["campaign", "topup", "coupon", "cashback", "payment"],
                                  description="V3GZhhEF2g0vTScGlxgMf9Y9HCwpBISMpQNwfTSpZWp9j4pGC0GW0C1xXJXu5cGENtm3nmwwDWFFqsHS"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_0(self):
        response = client.send(pp.ListTransfersV2(
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_1(self):
        response = client.send(pp.ListTransfersV2(
                                  to="2017-06-13T16:45:48.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_2(self):
        response = client.send(pp.ListTransfersV2(
                                  from="2023-12-27T00:53:04.000000+09:00",
                                  to="2020-08-28T06:49:46.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_3(self):
        response = client.send(pp.ListTransfersV2(
                                  description="elH8FL3QDlasiwBwFMrA3OfGbj0FM14mtsnoAEna1appoLPM2Qb4AfSjHHiWq47XV6FZEAmNg837cLdVZH9b8leJkN8xfnakMrvg2VNurKHxxToybc1vn6A7GWsu06dJPCza8UpeVDyTDCbME9P9F7An549KamBQOyhjs3KNOWgvTLRnx6X",
                                  from="2018-02-25T09:17:44.000000+09:00",
                                  to="2023-12-05T06:38:12.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_4(self):
        response = client.send(pp.ListTransfersV2(
                                  transfer_types=[],
                                  description="hNWqpck0bBt62s2a4UBSmbYp3MjF3rT80Pnc6kcStCb9vJlaMnVIJl2FO04oPoN8l1BFMzD4O71gAl1g41S7etZRQQgDwwKOiTw6eYfi3fFB",
                                  from="2020-12-21T17:03:01.000000+09:00",
                                  to="2023-06-01T03:34:51.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_5(self):
        response = client.send(pp.ListTransfersV2(
                                  per_page=448,
                                  transfer_types=[],
                                  description="Jcm49gKk2LSh7BEXyozDlgS1t6DW7lUWVE04kGSu2T4pigLOOGwrEqYKrt7LlZcZ0rt3xUYT5YyJ0T8zPlORAYBSFDGi61U6tffZijic8DckXuhtx2tHi2mtI2Uv3ak",
                                  from="2018-06-10T18:58:36.000000+09:00",
                                  to="2015-11-03T21:15:12.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_6(self):
        response = client.send(pp.ListTransfersV2(
                                  prev_page_cursor_id="773ef177-5ef6-45ec-bb67-6c996270c8ec",
                                  per_page=874,
                                  transfer_types=[],
                                  description="mgxE88vVvDMEiKF95jTKsIDPMZxrqEPgwDJCuXYyULjNWb7jqTtJsoiAVNqKqvH4SWul6yeM0dqF1JzGhb7BT1Wfnxck8CHYGub0fqI93LM8Uw07T",
                                  from="2021-01-01T13:44:52.000000+09:00",
                                  to="2019-06-17T17:20:08.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_7(self):
        response = client.send(pp.ListTransfersV2(
                                  next_page_cursor_id="30d96528-3073-46d6-96d9-adc8a76f8876",
                                  prev_page_cursor_id="6db0953a-3dfe-41ee-83d0-a2aa8cd50f54",
                                  per_page=780,
                                  transfer_types=["transfer", "cashback"],
                                  description="SsttS5TNT5EeiAot6AlMIG491BLy7szXrcCwrxwaUOaN3WTDW565Q2LP9T99dTF491krtCCYrchPgN7NOjQWkLxlFsNzE7ryVMeMLpVOsNpiZExHTKlbFPCTeHBw0hxHJqyO2xATiVAF8WLSHEluazHZzUiBGMKMxxbZCGb97B2Ayr",
                                  from="2021-07-03T05:21:03.000000+09:00",
                                  to="2020-02-24T22:58:58.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_8(self):
        response = client.send(pp.ListTransfersV2(
                                  transaction_types=["expire", "exchange", "cashback"],
                                  next_page_cursor_id="34b2a855-b6a3-47e0-9c37-a6fac6547a1b",
                                  prev_page_cursor_id="0f45430e-0fea-4296-8d73-6ad894f8ff5c",
                                  per_page=923,
                                  transfer_types=["expire", "cashback"],
                                  description="YR7FpO3ovQmxQYhjL5aDL1RSTCGyigaYWgs0y22eISENTwZhbZdtcCoeIEzFJtAUJGrdB1",
                                  from="2019-04-09T15:11:07.000000+09:00",
                                  to="2020-10-27T04:07:26.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_9(self):
        response = client.send(pp.ListTransfersV2(
                                  is_modified=False,
                                  transaction_types=["expire", "cashback", "exchange", "payment", "transfer"],
                                  next_page_cursor_id="999cf08b-619f-4ded-aac4-4bd69178d3be",
                                  prev_page_cursor_id="625720eb-7ed3-4eca-8413-3a334c619d30",
                                  per_page=361,
                                  transfer_types=["payment", "coupon", "transfer", "exchange", "topup"],
                                  description="O40EhluSYb81pudryiPV7CpoKYzpRjJZmqikrvYAkbMLuDMbtLXYcqXpNCmaSs5Q5y2tP3S1wqat5qUpGsA3ZVeFAvRIYXK5QlnoLVqqKHGqFu3PMROtKIB1XgJ63Rm2NCCh6iHjACdAv5",
                                  from="2025-01-01T23:00:50.000000+09:00",
                                  to="2021-08-05T06:05:14.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_10(self):
        response = client.send(pp.ListTransfersV2(
                                  private_money_id="97dd2c4b-382f-48ea-8537-32ece84ca820",
                                  is_modified=False,
                                  transaction_types=["payment", "expire", "exchange", "topup", "cashback"],
                                  next_page_cursor_id="4dae166f-e6b8-49e9-8a2f-9f6eaa9194ce",
                                  prev_page_cursor_id="b325f029-336d-4837-ae87-9449a298bb68",
                                  per_page=540,
                                  transfer_types=[],
                                  description="ueXTQd4an9Cctr4DVWl2On198vtgXC9vTbzaUux81PtZrhZoDuKlD70uUPrcVfw2g7x5xdoWV9oC7G68Tvqqyd9SLgYn5OTjJtowcmTil47M984sTT75JMNxSb2yH6ue32GGAEoXyEnysxOb3OR7xP",
                                  from="2022-01-19T07:47:22.000000+09:00",
                                  to="2017-06-30T01:02:47.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_11(self):
        response = client.send(pp.ListTransfersV2(
                                  transaction_id="615e588a-10b5-4761-9183-8d658c08da4d",
                                  private_money_id="6d4eb27d-def0-46a6-ac2a-d358b2544f0a",
                                  is_modified=False,
                                  transaction_types=["exchange", "cashback", "transfer"],
                                  next_page_cursor_id="4bcaf79a-14ba-434f-a58f-a7ed2215dcb0",
                                  prev_page_cursor_id="5cdf6c57-4505-4d18-b2cd-a36210cc997b",
                                  per_page=980,
                                  transfer_types=["coupon", "campaign", "transfer"],
                                  description="fZnUgwSbny",
                                  from="2015-10-12T15:59:20.000000+09:00",
                                  to="2017-11-27T21:12:24.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_12(self):
        response = client.send(pp.ListTransfersV2(
                                  customer_name="4HXzv9XnJG4zoq4fSOsodJxnntu3uGLgwWWYXwryQijCCpUAky8lorVGXFfQrdrr7FNWUT6bRvZp77VLnWDnljtM2Np5yHXtJdD0ZS6wbeziJ3pqYfLWZPpvfj3jkpvAIqjydudTzGsIS4EgPW5UaIHf2UBqIOQpQH9Au01svgb6E0zKYr5FkPN6N4FL89LqT",
                                  transaction_id="e05da194-b752-4399-ab66-ea430a8d7377",
                                  private_money_id="161ae552-4026-4677-99f5-ab88e7e7b281",
                                  is_modified=False,
                                  transaction_types=["transfer", "expire", "payment", "topup"],
                                  next_page_cursor_id="72227325-94d3-406b-ade4-678ec530d09e",
                                  prev_page_cursor_id="5b60856a-6d1f-4439-bbd5-faf4c1ca6d09",
                                  per_page=475,
                                  transfer_types=["campaign", "topup", "exchange", "expire", "coupon", "transfer"],
                                  description="Mh8ZiHe2k2wmKbPTefEyIC3JZZg9ji2i5gKtP3Te4bfMqkYG4EcIF0JOf9fcKbaA4cCdTY69NzggVBTEKNlmTwwmZJAmV9vrDAJHRm",
                                  from="2020-10-13T13:55:58.000000+09:00",
                                  to="2021-10-07T10:24:23.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_13(self):
        response = client.send(pp.ListTransfersV2(
                                  customer_id="e1ab18e9-3757-42de-b0c8-960840475a19",
                                  customer_name="Qvv1ZPl2nSetVpOxvHpVo3kpmeLdzQB7hUDk6HZV6UyIsxJ9Qbc7D1Qz4VKzdFoZhbDJrPKje9yVqGYfFFqD5moMLqLJnOUXhN3KfXfSF7EHql",
                                  transaction_id="0454cea3-3730-47a6-b39d-9d775e0f2096",
                                  private_money_id="099073c5-f808-4a4b-b372-364c991bc9fe",
                                  is_modified=False,
                                  transaction_types=["cashback", "expire", "exchange", "transfer", "topup"],
                                  next_page_cursor_id="8600fca0-0878-4581-b24d-7a5fbdea2ead",
                                  prev_page_cursor_id="c28ebff0-ca03-44b0-a984-3101c1944422",
                                  per_page=638,
                                  transfer_types=["expire", "topup", "transfer"],
                                  description="g4KBIPcKxpjl3050aLMdD9kLC05ujVb7FzQiNLkg8Otpd",
                                  from="2022-12-06T18:20:01.000000+09:00",
                                  to="2019-01-29T11:47:26.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_14(self):
        response = client.send(pp.ListTransfersV2(
                                  shop_name="1BHrbkJIpjdBfr1VlJsiJKWlGlPsIAup3hzgEZ6dSv9A2Fy5rYazaGmsTDrdDx3LLalx59M9lxnoUP8tjrljRPRWEIS2PoRW6jwluxlxIVeCZZN4hqeFMGJOwN6bX1XHDWT3yjoINYnupmXXhWx0qvnZijuhs2KXiBeOo7egbWUwvgzQGOCk3N9KxcNIaPFWet2GvKxrv5Z20giCfr1",
                                  customer_id="74de8730-ef88-4640-8199-a2b51ad341cf",
                                  customer_name="KafZLH81oKUxc",
                                  transaction_id="ee383aaf-703d-4563-966b-23b8de0ab5d5",
                                  private_money_id="d1d95571-7ac7-49a5-9e2d-5813e92e4f03",
                                  is_modified=False,
                                  transaction_types=["payment", "transfer", "topup", "exchange", "expire", "cashback"],
                                  next_page_cursor_id="04eee3ff-e0f2-4eae-9776-1c7c718294b4",
                                  prev_page_cursor_id="501d9948-c06a-4044-9d09-e8776089cf7d",
                                  per_page=524,
                                  transfer_types=["exchange", "cashback", "expire", "payment", "topup"],
                                  description="tLrIckvqYOC5I6FGJx8IX4B6skKQxHnu3f4Gp6dq6y6w3QrweTYBOCBx4La4bw1sDaiWJENBC5IUlgAIZrl01Kn5nLaXzGrG4ElStBEcZG1JVHpXX61F9B7wsfJB26OBELBodFmKHTomZMzoa16",
                                  from="2018-02-25T12:40:37.000000+09:00",
                                  to="2024-02-27T12:57:53.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_transfers_v2_15(self):
        response = client.send(pp.ListTransfersV2(
                                  shop_id="a1b50714-8206-4c8a-8f0b-d9a58cae8b35",
                                  shop_name="rjXCqz5NX7PfkYiQKBljogq1EcoWtiaPEFxUoTLJwxbQ619x6fbnxareaSjEnjwlRVexKyZQdD2CmvPMxTyVQVUaY",
                                  customer_id="7275dea1-6104-497a-a8dc-b023291eb6e8",
                                  customer_name="8AIQoACCoxfLTyklbbNjnLqoU1P93vrPJjJb804RbegX5C",
                                  transaction_id="8f9bf369-a6ca-4a0f-905e-77c6fcaede99",
                                  private_money_id="4f16a8c8-2c51-4d3d-9285-295c696b3ff9",
                                  is_modified=True,
                                  transaction_types=["payment", "transfer", "exchange"],
                                  next_page_cursor_id="e4956707-a6fa-4fbe-941e-e7f8af9664fa",
                                  prev_page_cursor_id="f263fbe8-065b-4df3-8ea2-cbbffb4842d6",
                                  per_page=137,
                                  transfer_types=["expire", "topup", "coupon", "cashback"],
                                  description="0QU0sl60nG0",
                                  from="2024-10-16T03:36:50.000000+09:00",
                                  to="2018-03-23T00:30:50.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_0(self):
        response = client.send(pp.CreateOrganization(
                                  "BbTIiKXtA3DzKfLaDdYFr7",
                                  "0VbPdDlWqj",
                                  ["f4abf392-a323-4eb1-b782-e6080f40e620", "91c2a6bc-678e-4646-9efb-df25cc661742"],
                                  "D7eGSPtEKW@qZ4N.com",
                                  "V6aNc8xqXo@n27k.com"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_1(self):
        response = client.send(pp.CreateOrganization(
                                  "BbTIiKXtA3DzKfLaDdYFr7",
                                  "0VbPdDlWqj",
                                  ["f4abf392-a323-4eb1-b782-e6080f40e620", "91c2a6bc-678e-4646-9efb-df25cc661742"],
                                  "D7eGSPtEKW@qZ4N.com",
                                  "V6aNc8xqXo@n27k.com",
                                  contact_name="BiHfVP3LAUmuBelzU2RRBMvj2eDz4kLdHGFGQAF53I6uOAH4KvUdSXT5keoaLMxcToBCpXXmjkx0yTkVS1DT4W28DnBT6ePlMex7On91t2oHxwInFWI9er7FMY1nlxuu937qGaSxft1T5gWrnIxC6quMRwUNBtwa45p9Dfi0admkON2oK2SiIiKYtfgVS1O6y60"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_2(self):
        response = client.send(pp.CreateOrganization(
                                  "BbTIiKXtA3DzKfLaDdYFr7",
                                  "0VbPdDlWqj",
                                  ["f4abf392-a323-4eb1-b782-e6080f40e620", "91c2a6bc-678e-4646-9efb-df25cc661742"],
                                  "D7eGSPtEKW@qZ4N.com",
                                  "V6aNc8xqXo@n27k.com",
                                  bank_account_holder_name=" ",
                                  contact_name="prNiepuqdCjaLz6pyi01xNXpFSnVYgaSNegxc6Jqemjzm5NDlKHFZioHFHNojxtMJKbyDyUP41tx1LnejUamrQuS5VBbmnSbfnmLYsLCM0tWQqBxpw0wWnKzMmuEy9RJOv"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_3(self):
        response = client.send(pp.CreateOrganization(
                                  "BbTIiKXtA3DzKfLaDdYFr7",
                                  "0VbPdDlWqj",
                                  ["f4abf392-a323-4eb1-b782-e6080f40e620", "91c2a6bc-678e-4646-9efb-df25cc661742"],
                                  "D7eGSPtEKW@qZ4N.com",
                                  "V6aNc8xqXo@n27k.com",
                                  bank_account="1",
                                  bank_account_holder_name="\\",
                                  contact_name="6NjI10Mk6WZ1Lze44deBXSEZeolLwErcATB7yTjgWPTFFPE6VvkYunlqCxWB9uJ9I98jRlGIbhhpnrO7iCC2jnZ"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_4(self):
        response = client.send(pp.CreateOrganization(
                                  "BbTIiKXtA3DzKfLaDdYFr7",
                                  "0VbPdDlWqj",
                                  ["f4abf392-a323-4eb1-b782-e6080f40e620", "91c2a6bc-678e-4646-9efb-df25cc661742"],
                                  "D7eGSPtEKW@qZ4N.com",
                                  "V6aNc8xqXo@n27k.com",
                                  bank_account_type="saving",
                                  bank_account="63",
                                  bank_account_holder_name="ｦ",
                                  contact_name="vTr2zVxg0PUwTX2xrtnZMpGjLPZsjKxNSM9kMHsy2GZlHRWZqW3qXADg6Bx6Z4o7psDIz5zXrEcIr7Xh9sMSSd6i4GefzQ1ndzACYyDuIgGlepb5PDOdZ4sqvrz4CxbiN1wEg2eVCK5gq"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_5(self):
        response = client.send(pp.CreateOrganization(
                                  "BbTIiKXtA3DzKfLaDdYFr7",
                                  "0VbPdDlWqj",
                                  ["f4abf392-a323-4eb1-b782-e6080f40e620", "91c2a6bc-678e-4646-9efb-df25cc661742"],
                                  "D7eGSPtEKW@qZ4N.com",
                                  "V6aNc8xqXo@n27k.com",
                                  bank_branch_code="731",
                                  bank_account_type="saving",
                                  bank_account="690203",
                                  bank_account_holder_name="7",
                                  contact_name="hLrLvudgECQ91XNGKD7jWRiDMPqz7lKXUQ3vS2zorGqMxFyWyiOkBya0UBf0SI2YpInhwEx5g3qbPIw2gVOsc5AbzZ6jrVndY8"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_6(self):
        response = client.send(pp.CreateOrganization(
                                  "BbTIiKXtA3DzKfLaDdYFr7",
                                  "0VbPdDlWqj",
                                  ["f4abf392-a323-4eb1-b782-e6080f40e620", "91c2a6bc-678e-4646-9efb-df25cc661742"],
                                  "D7eGSPtEKW@qZ4N.com",
                                  "V6aNc8xqXo@n27k.com",
                                  bank_branch_name="t2jJH75GjGG5AaKAig9LbFOzbXxkTWz0PU9USoI4XyR7",
                                  bank_branch_code="",
                                  bank_account_type="saving",
                                  bank_account="12460",
                                  bank_account_holder_name="ﾜ",
                                  contact_name="BBeDcZyQS4SL0cbhF1Nyvax9xHoSbg7WV7MRkiga7m4cYhumakP4BrFX9AVdSFCUxdQclC3kJKXDyQR8V81RNwVgZLI9at8Pe1HIMcSNaVKuZn3Kjom7IYRjDfhrdizVDJfSDSCJkZIuFXDO4C9Evz1vY9W3YEcpFGpftosCDYeniHu6W34R5bIgndMC4FBhKHd0zvFWklXhhC30O2OKhzuEcyb6Ge6tj3fniCW4HWUvAI5O77AGjP9F"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_7(self):
        response = client.send(pp.CreateOrganization(
                                  "BbTIiKXtA3DzKfLaDdYFr7",
                                  "0VbPdDlWqj",
                                  ["f4abf392-a323-4eb1-b782-e6080f40e620", "91c2a6bc-678e-4646-9efb-df25cc661742"],
                                  "D7eGSPtEKW@qZ4N.com",
                                  "V6aNc8xqXo@n27k.com",
                                  bank_code="8770",
                                  bank_branch_name="MrYXSDNclOn3cfYfSrx3sSNw5W2mEAOYP5uS35Fzk0mroxmZpiJVFI6KkVcL",
                                  bank_branch_code="",
                                  bank_account_type="saving",
                                  bank_account="",
                                  bank_account_holder_name="0",
                                  contact_name="2V1BprY8n4XQfTxMZ166foiSNVHWNf8LoOuCznV0jHXAHWv4kpcQI9XwQFFcZeXO0rFxOxQEn39x7xbZvD2lm40AJZfqT2SLOIcavWoHCXWnJy98N748eFaOKazD9pMd8KaZS2P9jt"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_organization_8(self):
        response = client.send(pp.CreateOrganization(
                                  "BbTIiKXtA3DzKfLaDdYFr7",
                                  "0VbPdDlWqj",
                                  ["f4abf392-a323-4eb1-b782-e6080f40e620", "91c2a6bc-678e-4646-9efb-df25cc661742"],
                                  "D7eGSPtEKW@qZ4N.com",
                                  "V6aNc8xqXo@n27k.com",
                                  bank_name="8lDYP3FIib0dSMbhwt1I3siYVW0",
                                  bank_code="",
                                  bank_branch_name="Wx5FYmVCSnGIf",
                                  bank_branch_code="851",
                                  bank_account_type="saving",
                                  bank_account="4",
                                  bank_account_holder_name="｢",
                                  contact_name="hcew1Rib2hWkiy3eQ3cD1x5tusO5CU44fBO9SYTYTKFiRjhy5vujI1aWb2wRbvzeN6hAfytT6ua0b0MtT01YwXkxuCShBnrvbktB1OAWdLAFvW0U8WFXkC0Dj88Za80GrCFK4WRRl7i8NqrbKPZ6YXHebk7PZAAKNvL6kwwhRIkU1WXH32u1tkagdyU6xFoWsCep6fsnKO3YmW4UTbvMz3oEylBLHgsi5bAPRsofzoXKNr"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_0(self):
        response = client.send(pp.ListShops(
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_1(self):
        response = client.send(pp.ListShops(
                                  per_page=1395
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_2(self):
        response = client.send(pp.ListShops(
                                  page=2626,
                                  per_page=8820
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_3(self):
        response = client.send(pp.ListShops(
                                  external_id="FV7h70B69umKtHx6DUS9YammZIrq0",
                                  page=403,
                                  per_page=7170
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_4(self):
        response = client.send(pp.ListShops(
                                  email="ePvLCH642o@q091.com",
                                  external_id="b",
                                  page=8748,
                                  per_page=5001
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_5(self):
        response = client.send(pp.ListShops(
                                  tel="0474180432",
                                  email="7bOYUV0eW2@Ms2b.com",
                                  external_id="USl9VUw",
                                  page=6566,
                                  per_page=3565
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_6(self):
        response = client.send(pp.ListShops(
                                  address="4dgFFQn2HUg2kpCNwqzLWHmbqUKDGrwFzAkT5eIICvjkcnPwpbd54rIwrjzmIAG2zKYR4VOU2U90KPKyydAhdJGsrSgXefpvmy7iiYSRaE00gmGaY6hxnaI8M5nLVLKMh9NIjWwYpyjJmfkW9Ss2GnbQVbckZGYTiB6nBecATKq8DJXC1vK2k3POJhLJrRSc8",
                                  tel="0470814-9424",
                                  email="MnUhG53m7w@xkhL.com",
                                  external_id="XKvn0wkItYHCBxO",
                                  page=6270,
                                  per_page=9967
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_7(self):
        response = client.send(pp.ListShops(
                                  postal_code="600-7850",
                                  address="w4SkAOJH0wlobYRLH0zjNwEfODpv4HsuCAKwZI0hC5x8RpAJfE6gZuPi8Rft7jNaQaxaYHUnUE37waOA2yCA6la45ULR20BWoBJTCWvvFaxGZEUNXKhDkyPVPe7rEDzKrwCFgK8sPk7Ap8UCHTSW4RjTmRLckDFM3iGXbQePXmQHdgFtb2qxiOW15lnFg7I2hBlVkCQd9CTLLuhGxUj0H0lG0Rlx",
                                  tel="03460291235",
                                  email="YPa9QreUyy@uwOC.com",
                                  external_id="zvmHcXjV3",
                                  page=3175,
                                  per_page=7757
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_8(self):
        response = client.send(pp.ListShops(
                                  name="V1YbtUZsFI4VB7aK3TswmhqrziqfYQFfkVXIrgPFlaoKz9PEEjeQM8a7Iz64TW2fzj6trZ9ZIPnlqwMZ5dpE4IxcrINN3R1H5snpnSjcyLjVT7JhYWuoNfDzpEytzNWwzUqi4Bo0B9DZvSyFUoDZNTw2AUlbN9Adw9vWb7RGq1SDXedfsNZVOQEmvDsTvGzejAANJCmetmdy",
                                  postal_code="2600849",
                                  address="o4v9K095ArgmPEGVZLHMFpZ13vrQRIPhwg4D0mlKN4yClCuJl3fE4q7ecxdvCpt1EHPMnSAXXwbbvGLV12YWDEGEqoPv7YDqVD7ZYyckktFcXNb3GayTc0ihEkFdevdxebO3mAP2JjkMY97JNBkvEBwFOrgRLdaNam7aHLekMYToo2tKAbjRkqo3Owx8kM3dX250bZZnWYTZtsDThKoSjolmHJTP0xx2LzitH1EJyTgvj",
                                  tel="0946-536882",
                                  email="GXqoqI0sMi@GBT5.com",
                                  external_id="zPtiuFLkRqb2jTsK37IybOK",
                                  page=6722,
                                  per_page=368
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_9(self):
        response = client.send(pp.ListShops(
                                  private_money_id="ab18b1be-5620-4422-a37a-5bf76e0d6aa9",
                                  name="ZFHXGNl9EVZ9N0CcEpwWHkKGvjDiTlO91q7znAnbWUoZybJF9uvZDU5jcBYqQvnqrmPQsi8Esn1nnvAwyoy1cB2jgUFoLl3Vc5WhG6Me03jvnCWxNNLFoDRWHkmCfQs9edqyW9Yqv5ltM9lxJG2e90hhmncBucNF7Rd4Qr7u50eKVVxQsW8KMM1FRVZ2k1yleMebuZmB7kSq5ps0H3qdb7Ese8O2h0ebr9EI4f6rnEx",
                                  postal_code="0809974",
                                  address="up24DGKA3EPSWZIL4xog6jwZZbA3fOD5aKTMJWsYRIeOtpTkpbpS1k6kI5e1W7Ab7EedoewKyMdbABKjyYEAk9a2VUBm4LlqRsAHsrQTDhhnaf4XwXcM6OCoU799COTt1Hdi72jAZ2uATWZyGaOllqBCKo4onI7nAJdMBEDmoOSEZU9fqozSw0vpq5vehhwfhcgINvWtdghG4LvuCVPx",
                                  tel="0688-163-7182",
                                  email="EM5aod87Wc@Awab.com",
                                  external_id="16Yne7ysY6W9duLR6dFJ0M7XC",
                                  page=446,
                                  per_page=5978
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_shops_10(self):
        response = client.send(pp.ListShops(
                                  organization_code="510-5-I-1-wq6-up-yoi5YM78q7TT",
                                  private_money_id="a23efc3b-ca93-4180-b63b-7355d35c63dc",
                                  name="BQ9nt19rcZzhMQq2FeaQ0f1sdcvAcoK",
                                  postal_code="8443991",
                                  address="dU1Fc9ACCy2hRgpnvPr6d51fJfdDBE0AC9L6WjiFkCAypwtAzCwVDnmJnQkzHL0TBY7ZRIAOcSpyQmRWnZcYBcm0l7HIUTLOUM5UuK7GUvopLmpxYuu8r5wciuVJn7zIvMVXphFxW8qJkdd90DYVv",
                                  tel="09373018",
                                  email="kcM1Va5duZ@Bfpi.com",
                                  external_id="gy5sSHWn2Pp0dMKudJNDquXHfzKqsIH3Q",
                                  page=7486,
                                  per_page=7890
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_0(self):
        response = client.send(pp.CreateShop(
                                  "4qJjk82ELWFyLra2uhJwiBHWcrs2wF8JWz8tUsmJkGxvHEmVWg15M"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_1(self):
        response = client.send(pp.CreateShop(
                                  "4qJjk82ELWFyLra2uhJwiBHWcrs2wF8JWz8tUsmJkGxvHEmVWg15M",
                                  organization_code="-p"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_2(self):
        response = client.send(pp.CreateShop(
                                  "4qJjk82ELWFyLra2uhJwiBHWcrs2wF8JWz8tUsmJkGxvHEmVWg15M",
                                  shop_external_id="LEepbNUAb3pU2q3smevIrkL0t",
                                  organization_code="SK0LYU8X89j1jYV-"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_3(self):
        response = client.send(pp.CreateShop(
                                  "4qJjk82ELWFyLra2uhJwiBHWcrs2wF8JWz8tUsmJkGxvHEmVWg15M",
                                  shop_email="zmPd0n8ytl@pRxs.com",
                                  shop_external_id="wx1OEb3JS2pJ4LHSOI12",
                                  organization_code="-0VSMv5pIElI9hwx5u0S-Q047y--e812"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_4(self):
        response = client.send(pp.CreateShop(
                                  "4qJjk82ELWFyLra2uhJwiBHWcrs2wF8JWz8tUsmJkGxvHEmVWg15M",
                                  shop_tel="03-8651792",
                                  shop_email="mvOhogzVHI@JChj.com",
                                  shop_external_id="R0vtUp",
                                  organization_code="H4y5D2-PX1gO0331"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_5(self):
        response = client.send(pp.CreateShop(
                                  "4qJjk82ELWFyLra2uhJwiBHWcrs2wF8JWz8tUsmJkGxvHEmVWg15M",
                                  shop_address="jGv1dI1wjUD3iXOHUoFDRdN8y9yH3iLurZaNv5Ltmz4ldyo3eRP1CbNYwktdZUoXY0Odfmzu8dxeeqbw4pYC5D0h6BMM3mSEv6l1WrxnUEzwW1nXi6563uGkAxVHp0jfXVZaOPLZZSIwty0l",
                                  shop_tel="098-619233",
                                  shop_email="CfMbJosIy8@k5bV.com",
                                  shop_external_id="qAk",
                                  organization_code="-kB-9JJn5"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_6(self):
        response = client.send(pp.CreateShop(
                                  "4qJjk82ELWFyLra2uhJwiBHWcrs2wF8JWz8tUsmJkGxvHEmVWg15M",
                                  shop_postal_code="6413945",
                                  shop_address="qRTrQba2ll7syA4HXpkfQmd8i9LyTXzdMMhgcgzxZvfbOVg6HQlC5YSTVVYtKEKtXQrDtYqZ0kXqMbV69nWZSqj",
                                  shop_tel="0570-989720",
                                  shop_email="G1yBiDTbKd@eqLx.com",
                                  shop_external_id="3qGPqNXpwdTYekpaLbWHIhzALMVNBn",
                                  organization_code="2U-9D8K1G--Lc9Q0642Z-l3"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_0(self):
        response = client.send(pp.CreateShopV2(
                                  "Hs57yk0GCEoKqumLqCPc9penXQ6kwdBv1i5QJHpWkkiefej3vZymGgUoIj7RmjQ7Ov8aI9WvkiljrG2Yqk8nW1vjaOYj9QzWrsuKlYxNvIBEJcxmIqmfvv0RBqoE8hcjRjpnm4XEgC8kK4G1UEINJLi545PkGfEK1p9vscRkRxbRMqdQ8SjfjYwD"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_1(self):
        response = client.send(pp.CreateShopV2(
                                  "Hs57yk0GCEoKqumLqCPc9penXQ6kwdBv1i5QJHpWkkiefej3vZymGgUoIj7RmjQ7Ov8aI9WvkiljrG2Yqk8nW1vjaOYj9QzWrsuKlYxNvIBEJcxmIqmfvv0RBqoE8hcjRjpnm4XEgC8kK4G1UEINJLi545PkGfEK1p9vscRkRxbRMqdQ8SjfjYwD",
                                  can_topup_private_money_ids=["9d240fa1-a22e-4ea2-815f-693fa7cb4902", "af041dfd-fc06-4e44-9053-1eeccfe8bbdd", "76656a31-a817-42e1-905d-15cfc3001c8b", "61405d75-e1b1-4c41-b741-5f1179059120", "70436457-7e48-4424-b6ac-ce9a06253549", "a729a031-5721-40ba-b73f-bc14ee6107fc", "0e72a4ec-ce2d-4c19-8aea-d91d7aa5f1c7", "d5e1dc76-f0f6-401e-b7a1-f57654edd1c9", "1a3ade7a-82dc-41d1-9176-817c72949559"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_2(self):
        response = client.send(pp.CreateShopV2(
                                  "Hs57yk0GCEoKqumLqCPc9penXQ6kwdBv1i5QJHpWkkiefej3vZymGgUoIj7RmjQ7Ov8aI9WvkiljrG2Yqk8nW1vjaOYj9QzWrsuKlYxNvIBEJcxmIqmfvv0RBqoE8hcjRjpnm4XEgC8kK4G1UEINJLi545PkGfEK1p9vscRkRxbRMqdQ8SjfjYwD",
                                  private_money_ids=["a63b1767-7d30-47bb-bf98-d2a0390993cf", "071604b1-2444-4d18-ae63-2311203a23b9"],
                                  can_topup_private_money_ids=["4a92de0b-a653-4cb0-9880-f5b164912c8b", "642bab1b-143d-4311-bbda-e04b969286ff", "9c5d6197-9faf-4453-bd30-22f20cc66a01", "0d543960-0a36-40aa-99bf-dfc41976fe47", "1e449477-487c-4ef2-8152-f475494d7f68", "70dbd75c-93cb-427f-8909-e969bee3b6ad"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_3(self):
        response = client.send(pp.CreateShopV2(
                                  "Hs57yk0GCEoKqumLqCPc9penXQ6kwdBv1i5QJHpWkkiefej3vZymGgUoIj7RmjQ7Ov8aI9WvkiljrG2Yqk8nW1vjaOYj9QzWrsuKlYxNvIBEJcxmIqmfvv0RBqoE8hcjRjpnm4XEgC8kK4G1UEINJLi545PkGfEK1p9vscRkRxbRMqdQ8SjfjYwD",
                                  organization_code="-618sK8L5i21V-tpC1cc",
                                  private_money_ids=["8c490516-a65f-4168-89b9-f78869f5fed1", "a6b5b490-43e6-4ec9-8bd5-e17a620fde6f", "57396170-cdef-4f58-be0d-998fc158cf1a", "77eb29d3-53c3-43aa-8819-0126389c9c4e", "179616e8-51a8-4dbf-8e3c-c209e5b1d478", "7d0de150-82e5-4f8c-bba5-aeb1daaf8bc5", "663f6908-f74e-4777-b1d0-752ede2b7720", "59c7a214-a134-4cba-9e43-f7c1a0443723", "b88ab827-221c-4d16-ab6a-140273bc5b64", "b66634ac-55bd-483b-bbfb-170d0770fff0"],
                                  can_topup_private_money_ids=["9b076296-638c-44f3-b81f-0358d834504d", "01ec7d72-d541-4be3-9e25-3972f8719adc", "4dbfaf96-7510-4212-9a5d-2671dd1a8ef4", "3d5f6834-ad05-45d8-a5ca-5907ff4a0da3", "ed2a9293-f4b7-4519-a48c-0dd5316d7906"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_4(self):
        response = client.send(pp.CreateShopV2(
                                  "Hs57yk0GCEoKqumLqCPc9penXQ6kwdBv1i5QJHpWkkiefej3vZymGgUoIj7RmjQ7Ov8aI9WvkiljrG2Yqk8nW1vjaOYj9QzWrsuKlYxNvIBEJcxmIqmfvv0RBqoE8hcjRjpnm4XEgC8kK4G1UEINJLi545PkGfEK1p9vscRkRxbRMqdQ8SjfjYwD",
                                  external_id="S6pjX",
                                  organization_code="t-hIlC-qLH7--C91iFvGR-F-2rU",
                                  private_money_ids=["0d7207a8-8466-4d4c-bcbb-63e40c0b3c62", "3cb926ba-abde-4193-a52b-8aab6ad489ae", "0b4ac12a-2d9f-47a9-a60e-d86b2a1291ab", "794469f3-c2f4-45c6-baac-e81be6c8bf70", "f974b2af-ae7d-4469-9176-dca1713b53b5", "c4721777-9ecc-462e-8f9e-1d79edc2369f", "01c7aea1-7955-4860-aa6e-16469e5be9b9", "a0c90752-4068-4496-88ea-d17d6742da6a", "20f36176-ae44-48ab-bca6-51513e999a71"],
                                  can_topup_private_money_ids=["5b2f2057-573e-4a8e-9978-c0319c05096b", "fd22c986-70fb-4d92-9305-64b081c4fa07", "ef9d3947-0d2b-4675-ba4a-1ac23ba0974e", "33717bb5-c127-432a-adbe-4d42004fd13d", "7796381f-995a-4dd4-b50b-4c5f657000cb"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_5(self):
        response = client.send(pp.CreateShopV2(
                                  "Hs57yk0GCEoKqumLqCPc9penXQ6kwdBv1i5QJHpWkkiefej3vZymGgUoIj7RmjQ7Ov8aI9WvkiljrG2Yqk8nW1vjaOYj9QzWrsuKlYxNvIBEJcxmIqmfvv0RBqoE8hcjRjpnm4XEgC8kK4G1UEINJLi545PkGfEK1p9vscRkRxbRMqdQ8SjfjYwD",
                                  email="jups3VAzrB@b0oL.com",
                                  external_id="Iz7JS",
                                  organization_code="Y-fsm-YucS-Lvv--49AM-9-Mp-WvVp--",
                                  private_money_ids=["bf848c84-81ab-413f-91c0-e180b8c3417d"],
                                  can_topup_private_money_ids=["3234e448-1db7-4995-8dd7-d13b977af696", "90c1c663-eec4-485c-b8a7-ebbca9091cde", "6f381351-9953-449a-924f-f9450aee7f7c", "dbc451d9-37fc-4117-b414-ad4b72e3c3fc", "208ee46b-ea49-434d-ad82-43d08e063253", "04fd42df-6dc3-4cb5-b707-413ff0b1d039"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_6(self):
        response = client.send(pp.CreateShopV2(
                                  "Hs57yk0GCEoKqumLqCPc9penXQ6kwdBv1i5QJHpWkkiefej3vZymGgUoIj7RmjQ7Ov8aI9WvkiljrG2Yqk8nW1vjaOYj9QzWrsuKlYxNvIBEJcxmIqmfvv0RBqoE8hcjRjpnm4XEgC8kK4G1UEINJLi545PkGfEK1p9vscRkRxbRMqdQ8SjfjYwD",
                                  tel="062680665",
                                  email="JczMKE61Q2@5fJS.com",
                                  external_id="dOs3lTy1oRSq9ZfY7RZvdZlP7JFjKgxsr",
                                  organization_code="Wbki-8-h3TeW-3Za4TLW94i-K1",
                                  private_money_ids=["0511ff3a-3bea-4f85-917c-7c54d04d3886"],
                                  can_topup_private_money_ids=["14e7f4f6-679a-4e27-82f3-d6839a20eb40", "1e7aaf5f-288f-4f75-b468-6e022d29719a", "43e717b5-e7e2-4aaf-ad69-340ff3d22beb", "cfaab963-db3b-46b7-9072-bda431ab17b0", "92c794ef-7055-4a33-8cf9-8e98b3232a71", "5707485f-e2a9-4341-a5e5-7f3f2ca3bb2e", "97624bb2-8f8e-447d-a1b4-e62eb6861fb7", "2981f5db-3232-41b0-a109-00053ea1e5ca"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_7(self):
        response = client.send(pp.CreateShopV2(
                                  "Hs57yk0GCEoKqumLqCPc9penXQ6kwdBv1i5QJHpWkkiefej3vZymGgUoIj7RmjQ7Ov8aI9WvkiljrG2Yqk8nW1vjaOYj9QzWrsuKlYxNvIBEJcxmIqmfvv0RBqoE8hcjRjpnm4XEgC8kK4G1UEINJLi545PkGfEK1p9vscRkRxbRMqdQ8SjfjYwD",
                                  address="QjCIcQOQwoYJnYF2r9ZVHQmfttjosm8aKrRP004Au2abbryOcaqd2dpBVmk8t2ovdGcbv5t0slHntXFtINAfqeAo9VWWTIfnsIVQuCpcthuzAzIMsxKjmsgmIeIXvnVUjwypCtWUandEhypMtRzOpkMFvb7oYQyavJZ6FcuWVPQdJ10nsruvkw0y8D3PVkD",
                                  tel="021307-730",
                                  email="S5VdVlTdpY@dI4b.com",
                                  external_id="Bbt7RRsBO",
                                  organization_code="Nyavfsc-w1-g-JK7",
                                  private_money_ids=["4a09806b-66be-498a-bacb-d7e74003c12b", "40601ff4-79a3-40aa-b58a-c904ddfefa1f", "b73a1ebc-dfd2-4bcd-b05f-58acdcde37de", "24e8d9b2-4b6e-4a34-8ad5-bd591c87a7e1", "985844e6-c242-43cc-95c2-4312d1e828c4", "9c621482-c3c3-420e-a0d9-b9e58e2119cb"],
                                  can_topup_private_money_ids=["a7c6d3e1-1edc-4f56-a2fd-7b18e3b312ba", "8d0475b2-ac19-4710-a9fb-83dbd394da5c", "c0237257-a519-4c7d-a60a-6e521d1f28ac", "3afde48b-49f9-4319-a5d1-015eff1770b2", "7ccffd0c-1834-4638-be7b-4c2036688a66", "db066efc-ac6a-4fbd-92c7-b225383be9ee", "1c580075-723c-40c9-8e7c-7daf82809dd1", "9347214b-ca77-47d1-9b40-a4fc8c99ac9a", "a261156f-f03d-418a-be1e-b58cec5535b2", "0e1f7161-94bd-4e2d-b980-c1b8ad7f7d6b"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_shop_v2_8(self):
        response = client.send(pp.CreateShopV2(
                                  "Hs57yk0GCEoKqumLqCPc9penXQ6kwdBv1i5QJHpWkkiefej3vZymGgUoIj7RmjQ7Ov8aI9WvkiljrG2Yqk8nW1vjaOYj9QzWrsuKlYxNvIBEJcxmIqmfvv0RBqoE8hcjRjpnm4XEgC8kK4G1UEINJLi545PkGfEK1p9vscRkRxbRMqdQ8SjfjYwD",
                                  postal_code="8849795",
                                  address="JI29l5ETLaqJjrVNuKqYcFO7qYoj52TIT2JrQIk1FHRycsXQbNJfDN20yBzVLFlkAKkBXaQLLYIGTpj5eGAh8anknYUz6m6Kpm",
                                  tel="01263-006",
                                  email="WX5RqoT22j@bQFU.com",
                                  external_id="lex7wdFVux0PbGDntM1akvUSB",
                                  organization_code="--82x---ekJ-8c02XeMZ5kQs0",
                                  private_money_ids=["ff53517c-de4e-4cb5-b2a3-1f7376683f9c", "7d6419f5-4291-48c3-babb-69f9960f7af1", "43b28049-9dec-442d-9855-1eba20290e38", "72835081-74ef-4a06-b432-c162d6fd8112", "1bb082bd-efab-4e6c-985d-5bd9a2e73a25", "1884f700-55d9-46d3-bd90-6cc68f244f02"],
                                  can_topup_private_money_ids=["b11abcdb-bc08-490b-9488-4ea55e196972", "65c8db01-d20b-4427-85c0-58a777d71f00", "836c135f-6445-4125-b7be-f59de9dc937d", "4b9d91e3-8247-4a30-9c92-006b1b147865", "a8de67ce-14ff-4461-b6af-72a6f8b586d7", "8bedac0c-0731-4447-a9b2-d05b56c90b51", "5ba865c4-6027-4040-8822-81812cac8b3c"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_shop_0(self):
        response = client.send(pp.GetShop(
                                  "6a610e81-8db2-47a8-9abe-57efaf5c43cd"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_0(self):
        response = client.send(pp.UpdateShop(
                                  "b9411136-79c2-483a-8a25-1cf3edfe68a2"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_1(self):
        response = client.send(pp.UpdateShop(
                                  "b9411136-79c2-483a-8a25-1cf3edfe68a2",
                                  can_topup_private_money_ids=["a4b2fdb0-467e-4a5f-b6ab-9f4b22104548"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_2(self):
        response = client.send(pp.UpdateShop(
                                  "b9411136-79c2-483a-8a25-1cf3edfe68a2",
                                  private_money_ids=["9e395b84-6e67-4884-aaa4-6dfadc48eb99", "3188d907-7043-4e4f-b0e6-08bda57e1953", "8f5dcafc-6c75-463e-844e-3465f0eaf69b", "51ee378b-e735-4599-b3ca-ab53ac690b4f", "bad92dca-cd0e-4e40-af99-b6304e7a09c1", "388ee2b7-91a3-4b6c-80bf-0420bb2d3228", "452f2752-d36b-4115-a612-45fa568fd7e0"],
                                  can_topup_private_money_ids=["ec54b7ed-d99e-4d06-ad46-c1e2f8a5c4ae", "2c22a7de-52e8-4cf4-a3da-69a4cde24fa1", "817ced69-52a9-47c3-b473-f1f605305474"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_3(self):
        response = client.send(pp.UpdateShop(
                                  "b9411136-79c2-483a-8a25-1cf3edfe68a2",
                                  external_id="0fZ1Xg3OABwkASi4XBf",
                                  private_money_ids=["7f91ce05-a703-4d5f-b07d-5db7b1bd855f", "a73e7724-9b86-40e7-8d85-1f6e554a02c8", "e72d07c4-8877-4512-9180-e384eff753b7", "6cced340-d2c8-4639-a464-208ad338798c", "5a8471e9-0929-4476-8f70-497d175e8b01", "f1ca187d-5467-4d97-9f7d-55dc592ee172", "3be25c92-9800-470a-9162-8bdab65989ba"],
                                  can_topup_private_money_ids=["f2585cb1-8f13-40a1-8c3b-de6fc5bda19c", "0f7f962f-8156-4164-af1d-614469f81c91", "d31bec6b-17f3-4211-88d1-6f48fbc54306", "6e588eba-50eb-4540-bb23-af1d23220c8c", "0dfabd26-f16a-4edd-be51-610ea6681f3e", "593e0b01-7b83-4eb1-817b-0e1769e71e6b", "6d468459-be5d-49f9-a231-3db35ebd6208", "9b9ec60a-9a3e-4136-9506-a3092827e3ef", "894eebcf-1f95-4cae-9f23-0e0a9b8c8ef8", "dfbeace5-f9d0-476f-a755-af269fd95202"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_4(self):
        response = client.send(pp.UpdateShop(
                                  "b9411136-79c2-483a-8a25-1cf3edfe68a2",
                                  email="PpcFoVfZx3@nV0l.com",
                                  external_id="nhAQfGWoip0PChvtgy",
                                  private_money_ids=["990b724f-a673-40b1-8faf-1e55692a12bd", "aff8d441-6718-4bf1-beac-7ad89bd97a23", "1bffcae4-0deb-445f-b207-6f32ade8c19c", "4c3e9297-de8f-489d-b88f-016417c301af"],
                                  can_topup_private_money_ids=["71f301a7-9fc2-4505-b09c-3e58c4dc5a3f", "1d71affe-b425-41c6-a01c-2844b651353d"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_5(self):
        response = client.send(pp.UpdateShop(
                                  "b9411136-79c2-483a-8a25-1cf3edfe68a2",
                                  tel="0694-790-376",
                                  email="YX7Q7xmMVF@dBMm.com",
                                  external_id="WE86V18hjSR",
                                  private_money_ids=["e5f15037-26bd-4c9b-910f-eaeb7b3195fa", "e48acfb6-47a8-460c-b964-98d0c2ef1767", "e0c2c56c-4f23-4e0f-b6c3-8bb9b3e589b8", "7696a089-bd78-44fd-acb7-e630dc24f90a", "080cd922-910e-49b9-88fe-3db9910ac47d", "f858485f-1377-4b04-bcec-0886b1258e70", "a39dff17-0b4a-49b8-bf57-4151929151e1", "ab2ad06d-5c2b-4857-a744-c3a308f0fe11", "13b05967-0f13-4961-baf4-7c0a4a4b6b41", "ac9dd168-e30d-4db9-822d-9e080f0893ef"],
                                  can_topup_private_money_ids=["e27107fd-aa3d-45c7-83e9-49482bb0aff7", "38dc8701-cfc2-42eb-a4fb-895744e62b72", "b6bf6bff-4453-490b-b3c7-8dec884791ba", "5108b575-57aa-47be-aadf-19986e988971", "681521a2-75d8-4ec5-aeb8-364d02141dd8", "83a229c4-cdbf-4d56-98a3-17b09daf71da", "0b53d940-1393-4cb8-8d5a-cd327da964df"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_6(self):
        response = client.send(pp.UpdateShop(
                                  "b9411136-79c2-483a-8a25-1cf3edfe68a2",
                                  address="g2YIuIdISx7iUXqysFbw1XdVSz82280oV6FIendieQcPCz6fd9dNhikXZZRr6q4n3fvkpL57c03iSt6njZXPSciMkv9iLanKfi5z6HuD48bqR1tVmd7L5bsiQLczCujbnQrk8NbT7XgDJo1Be5gzPgUG6pbQAKqrR7hezmGA4YUx0U1eQ7E4c1gMRNtBUkciPe3AtzLD1DIP1bIbcUZq9qIT6cyh5W2yU7R2KN5",
                                  tel="02149586",
                                  email="wMUu8AsNI0@DKte.com",
                                  external_id="iQ6NJqPWxLuI56QrftoF9piWzvO1zYOPAZWK",
                                  private_money_ids=["0221fe1f-014f-4c1c-8463-a7aa9543fb80", "99957c86-ed08-4999-9863-45fd29746ad8", "6165688c-3cf7-418d-bcf2-ab314a93c9b4", "76e3e5a5-d197-4d4f-b2f9-d7eee4251173", "06e691ff-8a6a-48dc-98ad-a9db6c6f642f"],
                                  can_topup_private_money_ids=["a5a07a03-72a9-425f-9724-8d04da4d5acd", "82c90dc6-17aa-45b9-b820-b45d0a87a422", "e6c8e348-68f0-4f67-a9c0-6ab41629d6dc", "ae2225a3-56f1-4f13-a3aa-1f14fd540a8a", "122a8aaa-a2ee-456f-a25d-02d9247b48b1", "100df831-cc9d-4085-9932-7377370a0fd7", "ee2e8db4-e51d-42d9-b0c5-58b462b6df40"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_7(self):
        response = client.send(pp.UpdateShop(
                                  "b9411136-79c2-483a-8a25-1cf3edfe68a2",
                                  postal_code="513-4208",
                                  address="HIdRYFExA7EAwXSL7TK5QJej3u3qLdku3FjHUx39hUXqAPzcpibtIc3MPEuTdyRPFiuYctBHLHa",
                                  tel="001-21435",
                                  email="5AnCT9a0c8@8mnl.com",
                                  external_id="RwwFIH2itPRFsGZhcvKsCatz",
                                  private_money_ids=["52a68121-afa4-4c25-a935-7f8dc97717f6"],
                                  can_topup_private_money_ids=["c8e8f716-5133-4a9a-a53c-566646f04f59", "89dcfdae-9e8a-4768-a6d3-17f72304d01c", "70411f27-08d4-495f-9279-d7278a0b6b60", "cdd4dd85-41b0-47ba-ae52-d333af55ab54", "c7c7e740-fd41-4d95-b7c6-699b8d390ec4", "7a889fec-9afe-4085-a4f8-02a73cc882b0", "b79b3bdc-b544-493d-b73f-4a2c334c4b7d", "e0a1308e-1639-4027-a1c2-042d9ad52fe5", "ea0d487a-98f5-4d4b-8add-1d7258655ae6"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_shop_8(self):
        response = client.send(pp.UpdateShop(
                                  "b9411136-79c2-483a-8a25-1cf3edfe68a2",
                                  name="Q4hzhRl6eVhv3kW8n5JLmlabdig52nDR8lIhqmrEJNuduntCdBU1d3KSiRVLOeAIP7ws13kIhWj9lKpKPcoHUugh3Ry45NOL7anGqkYevIA86",
                                  postal_code="4018953",
                                  address="O01O29ZBgivFxNkcxUHobcQ6yDlmdGpOYiA94ZSbNImM0ySWJoIv1wK4hjUjq",
                                  tel="045379-7077",
                                  email="6RtXIyqLmB@VXQR.com",
                                  external_id="N41rzT8",
                                  private_money_ids=["dd45ea58-3a30-4bfe-b311-d87ca16f7731", "78460da1-8379-47b0-abd7-7f43fb71f7ef", "1739c66a-01ee-45a0-8886-a3fd28bad9b3", "05112efa-130c-4cd7-8b61-31d4309c15e7", "cb631974-92a8-4b6c-b1b5-1b015eba68be", "8bb9eb3a-60e8-4f1b-ad96-ba565d1db18f", "866ccb34-e3ae-4bc4-b62e-8a69e2664438", "b6f39ba5-0890-40dd-a1f4-cf59e5601394", "9afa0d57-58e7-4bfd-8dfc-153c1de5c420", "c36a2586-7f59-4d63-bb50-54fd59693878"],
                                  can_topup_private_money_ids=["d4f9315e-ade0-4e3e-a796-182e1dd27041", "93b5c271-b1d1-4e96-bb63-bab4fb62d857", "94727ab9-e64e-45c0-a6e8-5a46b8230bb6", "5fc27f28-8088-4f78-ba1c-76752fe0fdfe", "af8d7781-57ab-4ff8-857b-d0b420afbcb3", "2af853b5-60d1-4db9-9f4e-48e88d53bf04"]
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_moneys_0(self):
        response = client.send(pp.GetPrivateMoneys(
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_moneys_1(self):
        response = client.send(pp.GetPrivateMoneys(
                                  per_page=4415
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_moneys_2(self):
        response = client.send(pp.GetPrivateMoneys(
                                  page=1061,
                                  per_page=6867
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_moneys_3(self):
        response = client.send(pp.GetPrivateMoneys(
                                  organization_code="YFa3XxeC--Ht4-m3x",
                                  page=8391,
                                  per_page=6328
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_organization_summaries_0(self):
        response = client.send(pp.GetPrivateMoneyOrganizationSummaries(
                                  "21bac8ca-1b76-485a-b729-4e4804255da4"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_organization_summaries_1(self):
        response = client.send(pp.GetPrivateMoneyOrganizationSummaries(
                                  "21bac8ca-1b76-485a-b729-4e4804255da4",
                                  page=2301
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_organization_summaries_2(self):
        response = client.send(pp.GetPrivateMoneyOrganizationSummaries(
                                  "21bac8ca-1b76-485a-b729-4e4804255da4",
                                  per_page=6093,
                                  page=1396
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_organization_summaries_3(self):
        response = client.send(pp.GetPrivateMoneyOrganizationSummaries(
                                  "21bac8ca-1b76-485a-b729-4e4804255da4",
                                  from="2020-06-07T16:47:20.000000+09:00",
                                  to="2022-10-31T13:15:36.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_organization_summaries_4(self):
        response = client.send(pp.GetPrivateMoneyOrganizationSummaries(
                                  "21bac8ca-1b76-485a-b729-4e4804255da4",
                                  from="2022-09-20T20:18:15.000000+09:00",
                                  to="2019-06-28T02:05:47.000000+09:00",
                                  page=7042
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_organization_summaries_5(self):
        response = client.send(pp.GetPrivateMoneyOrganizationSummaries(
                                  "21bac8ca-1b76-485a-b729-4e4804255da4",
                                  from="2024-05-12T07:49:13.000000+09:00",
                                  to="2022-12-31T11:36:12.000000+09:00",
                                  per_page=4703,
                                  page=6170
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_summary_0(self):
        response = client.send(pp.GetPrivateMoneySummary(
                                  "caacb859-1da3-45ca-9474-28bcd584f1ca"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_summary_1(self):
        response = client.send(pp.GetPrivateMoneySummary(
                                  "caacb859-1da3-45ca-9474-28bcd584f1ca",
                                  to="2021-03-05T06:23:44.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_private_money_summary_2(self):
        response = client.send(pp.GetPrivateMoneySummary(
                                  "caacb859-1da3-45ca-9474-28bcd584f1ca",
                                  from="2022-12-02T14:45:31.000000+09:00",
                                  to="2019-12-21T08:44:18.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_0(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "3dd5dbbb-acd6-4cd8-9eef-201dfe4ec7f2"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_1(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "3dd5dbbb-acd6-4cd8-9eef-201dfe4ec7f2",
                                  per_page=2033
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_2(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "3dd5dbbb-acd6-4cd8-9eef-201dfe4ec7f2",
                                  page=4941,
                                  per_page=855
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_3(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "3dd5dbbb-acd6-4cd8-9eef-201dfe4ec7f2",
                                  to="2018-12-09T03:52:57.000000+09:00",
                                  page=4796,
                                  per_page=8886
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_4(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "3dd5dbbb-acd6-4cd8-9eef-201dfe4ec7f2",
                                  from="2021-04-17T14:32:55.000000+09:00",
                                  to="2024-02-21T16:08:00.000000+09:00",
                                  page=1423,
                                  per_page=2816
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_5(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "3dd5dbbb-acd6-4cd8-9eef-201dfe4ec7f2",
                                  is_modified=False,
                                  from="2020-04-26T21:30:15.000000+09:00",
                                  to="2018-02-26T14:04:03.000000+09:00",
                                  page=9849,
                                  per_page=638
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_6(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "3dd5dbbb-acd6-4cd8-9eef-201dfe4ec7f2",
                                  type="exchange",
                                  is_modified=True,
                                  from="2025-02-08T16:56:46.000000+09:00",
                                  to="2023-11-18T05:47:44.000000+09:00",
                                  page=7488,
                                  per_page=9691
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_7(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "3dd5dbbb-acd6-4cd8-9eef-201dfe4ec7f2",
                                  receiver_customer_id="36628072-cfbb-42ad-81a6-0a9a6f7f116f",
                                  type="payment",
                                  is_modified=False,
                                  from="2018-09-30T11:40:02.000000+09:00",
                                  to="2024-05-02T00:49:45.000000+09:00",
                                  page=4656,
                                  per_page=3870
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_customer_transactions_8(self):
        response = client.send(pp.ListCustomerTransactions(
                                  "3dd5dbbb-acd6-4cd8-9eef-201dfe4ec7f2",
                                  sender_customer_id="ebedc360-3476-4085-967c-31d84c9c6eb0",
                                  receiver_customer_id="788ecd65-e898-41a0-84a8-ca344d67ac60",
                                  type="payment",
                                  is_modified=False,
                                  from="2022-05-19T08:06:22.000000+09:00",
                                  to="2017-11-23T17:19:46.000000+09:00",
                                  page=1089,
                                  per_page=5608
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_bulk_transaction_0(self):
        response = client.send(pp.GetBulkTransaction(
                                  "fae99420-711d-4ded-beed-4a40b5386e4b"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bulk_transaction_jobs_0(self):
        response = client.send(pp.ListBulkTransactionJobs(
                                  "f8aab015-3cdf-444a-b021-8b54c6052ba9"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bulk_transaction_jobs_1(self):
        response = client.send(pp.ListBulkTransactionJobs(
                                  "f8aab015-3cdf-444a-b021-8b54c6052ba9",
                                  per_page=2736
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_bulk_transaction_jobs_2(self):
        response = client.send(pp.ListBulkTransactionJobs(
                                  "f8aab015-3cdf-444a-b021-8b54c6052ba9",
                                  page=4290,
                                  per_page=9783
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_cashtray_0(self):
        response = client.send(pp.CreateCashtray(
                                  "4a1bb881-1e4e-4c0a-9a52-ee45e70d930a",
                                  "1da8ee01-1b98-43ba-a6f7-814c3ec40c2f",
                                  9297.0
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_cashtray_1(self):
        response = client.send(pp.CreateCashtray(
                                  "4a1bb881-1e4e-4c0a-9a52-ee45e70d930a",
                                  "1da8ee01-1b98-43ba-a6f7-814c3ec40c2f",
                                  9297.0,
                                  expires_in=5705
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_cashtray_2(self):
        response = client.send(pp.CreateCashtray(
                                  "4a1bb881-1e4e-4c0a-9a52-ee45e70d930a",
                                  "1da8ee01-1b98-43ba-a6f7-814c3ec40c2f",
                                  9297.0,
                                  description="HfZeBTc6JdVgTUSfsoPLDJmAEbG81s8ooyav8d8Gq5F6hWjwa0XDnyxTAdvDORrWHnNFjD3bVehq8wEboXCkKDiulncVShHel0fE1yzDwY4QYv1HUmONhCWtxXTG88XjTvz06nJxJLnPjDAzHdtJ0kr6hAzxFwibIfDYx0ha3zV03OjMJB5DkcLG",
                                  expires_in=7666
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_cashtray_0(self):
        response = client.send(pp.GetCashtray(
                                  "6cc88e85-5c5e-447b-a978-48630d6e34b3"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_cancel_cashtray_0(self):
        response = client.send(pp.CancelCashtray(
                                  "b09e0831-a86b-484a-8b16-8079df027ad0"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_cashtray_0(self):
        response = client.send(pp.UpdateCashtray(
                                  "1dd7a73d-94e6-4b7a-b896-c48ccede5013"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_cashtray_1(self):
        response = client.send(pp.UpdateCashtray(
                                  "1dd7a73d-94e6-4b7a-b896-c48ccede5013",
                                  expires_in=8979
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_cashtray_2(self):
        response = client.send(pp.UpdateCashtray(
                                  "1dd7a73d-94e6-4b7a-b896-c48ccede5013",
                                  description="El6DTFYrZpGB7fKcm1AFnWpg44n0obm94Y52q5QLhYxlqTbYEVJwrsMtiQlB6Cbbhi4qLdUWjH7",
                                  expires_in=2752
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_cashtray_3(self):
        response = client.send(pp.UpdateCashtray(
                                  "1dd7a73d-94e6-4b7a-b896-c48ccede5013",
                                  amount=6735.0,
                                  description="lB7bbC8hXtOzBRyiSar21W9DJpWOIHuqT7P26Sn0Z2sohXH4TwqIWxDz08aq",
                                  expires_in=201
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_0(self):
        response = client.send(pp.CreateCampaign(
                                  "hSXbkXYZx4oY1W7w7780wYhx485VuUVjcPSnlzmD1IlPNzflD9qUXVJFYkHD69BFqkybO",
                                  "9397f8a0-f1cb-49c3-9992-bc221e6d3b13",
                                  "2016-07-03T13:49:43.000000+09:00",
                                  "2022-12-27T09:41:01.000000+09:00",
                                  9698,
                                  "external-transaction"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_1(self):
        response = client.send(pp.CreateCampaign(
                                  "hSXbkXYZx4oY1W7w7780wYhx485VuUVjcPSnlzmD1IlPNzflD9qUXVJFYkHD69BFqkybO",
                                  "9397f8a0-f1cb-49c3-9992-bc221e6d3b13",
                                  "2016-07-03T13:49:43.000000+09:00",
                                  "2022-12-27T09:41:01.000000+09:00",
                                  9698,
                                  "external-transaction",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_2(self):
        response = client.send(pp.CreateCampaign(
                                  "hSXbkXYZx4oY1W7w7780wYhx485VuUVjcPSnlzmD1IlPNzflD9qUXVJFYkHD69BFqkybO",
                                  "9397f8a0-f1cb-49c3-9992-bc221e6d3b13",
                                  "2016-07-03T13:49:43.000000+09:00",
                                  "2022-12-27T09:41:01.000000+09:00",
                                  9698,
                                  "external-transaction",
                                  dest_private_money_id="4fc37250-0d13-4d8f-9b02-2ceffdb80802",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_3(self):
        response = client.send(pp.CreateCampaign(
                                  "hSXbkXYZx4oY1W7w7780wYhx485VuUVjcPSnlzmD1IlPNzflD9qUXVJFYkHD69BFqkybO",
                                  "9397f8a0-f1cb-49c3-9992-bc221e6d3b13",
                                  "2016-07-03T13:49:43.000000+09:00",
                                  "2022-12-27T09:41:01.000000+09:00",
                                  9698,
                                  "external-transaction",
                                  max_total_point_amount=58,
                                  dest_private_money_id="1489b4e5-c308-48ac-ad54-80bd5a4f2c08",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_4(self):
        response = client.send(pp.CreateCampaign(
                                  "hSXbkXYZx4oY1W7w7780wYhx485VuUVjcPSnlzmD1IlPNzflD9qUXVJFYkHD69BFqkybO",
                                  "9397f8a0-f1cb-49c3-9992-bc221e6d3b13",
                                  "2016-07-03T13:49:43.000000+09:00",
                                  "2022-12-27T09:41:01.000000+09:00",
                                  9698,
                                  "external-transaction",
                                  max_point_amount=2939,
                                  max_total_point_amount=6347,
                                  dest_private_money_id="aee125d6-62ac-4624-967f-8cd23b9fe52b",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_5(self):
        response = client.send(pp.CreateCampaign(
                                  "hSXbkXYZx4oY1W7w7780wYhx485VuUVjcPSnlzmD1IlPNzflD9qUXVJFYkHD69BFqkybO",
                                  "9397f8a0-f1cb-49c3-9992-bc221e6d3b13",
                                  "2016-07-03T13:49:43.000000+09:00",
                                  "2022-12-27T09:41:01.000000+09:00",
                                  9698,
                                  "external-transaction",
                                  exist_in_each_product_groups=False,
                                  max_point_amount=7677,
                                  max_total_point_amount=9224,
                                  dest_private_money_id="ea99efd5-4b33-4e28-9a6f-d3514f0b949f",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_6(self):
        response = client.send(pp.CreateCampaign(
                                  "hSXbkXYZx4oY1W7w7780wYhx485VuUVjcPSnlzmD1IlPNzflD9qUXVJFYkHD69BFqkybO",
                                  "9397f8a0-f1cb-49c3-9992-bc221e6d3b13",
                                  "2016-07-03T13:49:43.000000+09:00",
                                  "2022-12-27T09:41:01.000000+09:00",
                                  9698,
                                  "external-transaction",
                                  minimum_number_for_combination_purchase=1453,
                                  exist_in_each_product_groups=True,
                                  max_point_amount=9830,
                                  max_total_point_amount=7352,
                                  dest_private_money_id="5fa8f4f5-e450-4cc6-87cb-ea6274f7f9ac",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_7(self):
        response = client.send(pp.CreateCampaign(
                                  "hSXbkXYZx4oY1W7w7780wYhx485VuUVjcPSnlzmD1IlPNzflD9qUXVJFYkHD69BFqkybO",
                                  "9397f8a0-f1cb-49c3-9992-bc221e6d3b13",
                                  "2016-07-03T13:49:43.000000+09:00",
                                  "2022-12-27T09:41:01.000000+09:00",
                                  9698,
                                  "external-transaction",
                                  applicable_shop_ids=["0f29a82c-31e2-4696-a639-f68c4718df62"],
                                  minimum_number_for_combination_purchase=4061,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=3519,
                                  max_total_point_amount=5946,
                                  dest_private_money_id="1c235de6-1dc7-4462-8e8b-a5325c80eeda",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_8(self):
        response = client.send(pp.CreateCampaign(
                                  "hSXbkXYZx4oY1W7w7780wYhx485VuUVjcPSnlzmD1IlPNzflD9qUXVJFYkHD69BFqkybO",
                                  "9397f8a0-f1cb-49c3-9992-bc221e6d3b13",
                                  "2016-07-03T13:49:43.000000+09:00",
                                  "2022-12-27T09:41:01.000000+09:00",
                                  9698,
                                  "external-transaction",
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["a9a948a9-f96f-48f4-b3e3-08171f38fb87", "70602255-c41c-4e94-a102-128e256c8e81"],
                                  minimum_number_for_combination_purchase=8378,
                                  exist_in_each_product_groups=True,
                                  max_point_amount=6815,
                                  max_total_point_amount=7916,
                                  dest_private_money_id="27b3d2bd-1d1b-47ff-adfc-db332e6a15a9",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_9(self):
        response = client.send(pp.CreateCampaign(
                                  "hSXbkXYZx4oY1W7w7780wYhx485VuUVjcPSnlzmD1IlPNzflD9qUXVJFYkHD69BFqkybO",
                                  "9397f8a0-f1cb-49c3-9992-bc221e6d3b13",
                                  "2016-07-03T13:49:43.000000+09:00",
                                  "2022-12-27T09:41:01.000000+09:00",
                                  9698,
                                  "external-transaction",
                                  applicable_days_of_week=[5, 5, 3, 0, 1],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["ac7ae648-0926-483d-a88f-f9d47e0b8fa9", "3ecf7cfa-d534-4c48-bb5d-b662cfab2e7d", "ac0a905a-4106-412d-a49c-5dd916f58533", "780962f3-9bef-4406-ada6-3cce1eaff0ec", "9cd40832-f129-4e43-9a3c-ffb690d821e8", "03688280-466f-48bf-9445-dc0de3830cf7", "74e62407-dc0a-4bee-bb4d-7af4e34a0fd5"],
                                  minimum_number_for_combination_purchase=7631,
                                  exist_in_each_product_groups=True,
                                  max_point_amount=263,
                                  max_total_point_amount=8277,
                                  dest_private_money_id="a14d0cd5-9fdf-4849-ae17-99712391212d",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_10(self):
        response = client.send(pp.CreateCampaign(
                                  "hSXbkXYZx4oY1W7w7780wYhx485VuUVjcPSnlzmD1IlPNzflD9qUXVJFYkHD69BFqkybO",
                                  "9397f8a0-f1cb-49c3-9992-bc221e6d3b13",
                                  "2016-07-03T13:49:43.000000+09:00",
                                  "2022-12-27T09:41:01.000000+09:00",
                                  9698,
                                  "external-transaction",
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["57fa748f-c77b-4bf8-a279-4f559a6066ac", "ee3c0814-e1e3-409f-8890-9e91079d175a", "963e25ef-df22-453d-bd2d-cc06e313f0b1", "4a02c913-2eb4-43cd-9191-4f6592f1bb40"],
                                  minimum_number_for_combination_purchase=5398,
                                  exist_in_each_product_groups=True,
                                  max_point_amount=4263,
                                  max_total_point_amount=4718,
                                  dest_private_money_id="34e1cdc5-ebc9-4b95-94b9-183af9b7562d",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_11(self):
        response = client.send(pp.CreateCampaign(
                                  "hSXbkXYZx4oY1W7w7780wYhx485VuUVjcPSnlzmD1IlPNzflD9qUXVJFYkHD69BFqkybO",
                                  "9397f8a0-f1cb-49c3-9992-bc221e6d3b13",
                                  "2016-07-03T13:49:43.000000+09:00",
                                  "2022-12-27T09:41:01.000000+09:00",
                                  9698,
                                  "external-transaction",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[5, 5, 4, 4, 2, 0, 3, 3],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["573afe16-c75c-40bf-aa0f-61b25cd8dde8", "72c5577c-512e-41a2-ba65-7e945f60e8c3", "26e7b8d2-13b5-49ae-97ea-2112a14d1a95", "93946f42-e742-4bf2-900d-ca9e8044a2e2", "e49cd5c1-d753-46a4-bd22-ae1b4d20becd", "0a2faed0-5280-4293-b24a-13e2840af447"],
                                  minimum_number_for_combination_purchase=4721,
                                  exist_in_each_product_groups=True,
                                  max_point_amount=8571,
                                  max_total_point_amount=8648,
                                  dest_private_money_id="a2215396-8496-45cf-ac27-00b751a9c1e2",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_12(self):
        response = client.send(pp.CreateCampaign(
                                  "hSXbkXYZx4oY1W7w7780wYhx485VuUVjcPSnlzmD1IlPNzflD9qUXVJFYkHD69BFqkybO",
                                  "9397f8a0-f1cb-49c3-9992-bc221e6d3b13",
                                  "2016-07-03T13:49:43.000000+09:00",
                                  "2022-12-27T09:41:01.000000+09:00",
                                  9698,
                                  "external-transaction",
                                  subject="money",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[0, 0, 0, 0, 6, 3],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["79ef492c-aa96-4b33-99e1-f08e23c98983", "d3826820-30b0-47e8-999b-b987f6cfa644", "4315c418-bd40-4e28-b155-a247e92eba7d", "fa40931c-5b66-48a1-8828-4d6a41724030", "dac630c4-524c-4904-bbbf-cdeb787f09b1", "90c0e679-a4b8-4c62-a0c3-eb5a78ef670b", "5d79e483-0c37-4945-ad90-96af2207cf03", "bd51dc8e-8edd-4d08-9347-250a7594cc24", "4a119de6-b68a-4e90-9475-597279f9f190", "994ecfbf-fae4-4722-80c9-371e2c8e9218"],
                                  minimum_number_for_combination_purchase=4457,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=603,
                                  max_total_point_amount=83,
                                  dest_private_money_id="52b6ad94-ebb2-405a-903d-bbda778e0db1",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_13(self):
        response = client.send(pp.CreateCampaign(
                                  "hSXbkXYZx4oY1W7w7780wYhx485VuUVjcPSnlzmD1IlPNzflD9qUXVJFYkHD69BFqkybO",
                                  "9397f8a0-f1cb-49c3-9992-bc221e6d3b13",
                                  "2016-07-03T13:49:43.000000+09:00",
                                  "2022-12-27T09:41:01.000000+09:00",
                                  9698,
                                  "external-transaction",
                                  is_exclusive=False,
                                  subject="money",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["c70c6d9b-f4d8-40e6-9921-5b865c05ec20", "c1dab468-f1e5-4dd4-bfe0-e5bb599d3000", "7ea37253-f4a1-4a34-9b5e-2eb6ddd2e7f8", "8fdb132d-9088-4eeb-848b-600179f176ec", "539bfa6f-1a53-4786-9c82-6158fc9de1ef", "a3386c1c-e3e9-4f19-a672-74bbf53f7155", "05e4e49e-fd68-418f-adac-3ecfd4df80e4", "bddbde47-09ba-45f6-a914-ff11f7376649", "c00f2937-19bf-429e-aeec-d97d9def8129"],
                                  minimum_number_for_combination_purchase=8214,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=5864,
                                  max_total_point_amount=7361,
                                  dest_private_money_id="435f769c-f7c6-4c85-86bf-61875c7db916",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_14(self):
        response = client.send(pp.CreateCampaign(
                                  "hSXbkXYZx4oY1W7w7780wYhx485VuUVjcPSnlzmD1IlPNzflD9qUXVJFYkHD69BFqkybO",
                                  "9397f8a0-f1cb-49c3-9992-bc221e6d3b13",
                                  "2016-07-03T13:49:43.000000+09:00",
                                  "2022-12-27T09:41:01.000000+09:00",
                                  9698,
                                  "external-transaction",
                                  point_expires_in_days=4194,
                                  is_exclusive=True,
                                  subject="all",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["816d204d-500f-4f54-924e-2a23485bad62", "4cb82522-addd-4f58-9b4d-e38fb407b5d6", "d4ab6673-bcde-489c-a47e-b193d8e48cc4", "3d334c0f-a33d-4b25-8d52-85b18a7dcd92", "df56f1c4-4c00-4968-a9fd-6366d876ea61"],
                                  minimum_number_for_combination_purchase=5463,
                                  exist_in_each_product_groups=True,
                                  max_point_amount=806,
                                  max_total_point_amount=2003,
                                  dest_private_money_id="6b00ca42-7438-4611-b95f-50159240f389",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_15(self):
        response = client.send(pp.CreateCampaign(
                                  "hSXbkXYZx4oY1W7w7780wYhx485VuUVjcPSnlzmD1IlPNzflD9qUXVJFYkHD69BFqkybO",
                                  "9397f8a0-f1cb-49c3-9992-bc221e6d3b13",
                                  "2016-07-03T13:49:43.000000+09:00",
                                  "2022-12-27T09:41:01.000000+09:00",
                                  9698,
                                  "external-transaction",
                                  point_expires_at="2022-06-19T13:12:46.000000+09:00",
                                  point_expires_in_days=8894,
                                  is_exclusive=True,
                                  subject="all",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[],
                                  applicable_days_of_week=[],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["b714c233-7683-4f0e-a7b1-838a1f875ce4", "98d26dff-05fa-4541-987f-03cfdd176e0a", "49326c39-2ebe-4dc0-8dde-685d879a3097", "0cac4f67-9a7d-48cf-8e80-3e2ea5205369", "82d74175-ed70-460b-985a-b77fbb2312b5", "347ed3b4-662f-4dbd-aaf0-660867308024"],
                                  minimum_number_for_combination_purchase=5128,
                                  exist_in_each_product_groups=True,
                                  max_point_amount=658,
                                  max_total_point_amount=8831,
                                  dest_private_money_id="b2d3ff74-48cf-492e-9446-18fc8933f6ba",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_16(self):
        response = client.send(pp.CreateCampaign(
                                  "hSXbkXYZx4oY1W7w7780wYhx485VuUVjcPSnlzmD1IlPNzflD9qUXVJFYkHD69BFqkybO",
                                  "9397f8a0-f1cb-49c3-9992-bc221e6d3b13",
                                  "2016-07-03T13:49:43.000000+09:00",
                                  "2022-12-27T09:41:01.000000+09:00",
                                  9698,
                                  "external-transaction",
                                  status="disabled",
                                  point_expires_at="2018-05-24T01:11:38.000000+09:00",
                                  point_expires_in_days=2468,
                                  is_exclusive=False,
                                  subject="all",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[5, 5],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["ff00abb2-20c8-4dbf-bae2-48f89b2a0c44", "f4e13b17-c84e-4b1b-a52d-d66657a2abd5", "14f5d222-a815-48a2-82fa-946cd3b9033c", "db0fca54-15b5-4aa4-b910-4b0325607696"],
                                  minimum_number_for_combination_purchase=5186,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=3094,
                                  max_total_point_amount=6773,
                                  dest_private_money_id="ebe0f72b-2ea2-43ff-9de0-204286f50f87",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_17(self):
        response = client.send(pp.CreateCampaign(
                                  "hSXbkXYZx4oY1W7w7780wYhx485VuUVjcPSnlzmD1IlPNzflD9qUXVJFYkHD69BFqkybO",
                                  "9397f8a0-f1cb-49c3-9992-bc221e6d3b13",
                                  "2016-07-03T13:49:43.000000+09:00",
                                  "2022-12-27T09:41:01.000000+09:00",
                                  9698,
                                  "external-transaction",
                                  description="a1xAnk8hKguFdNmhATvOs4O5es9RysxVi2i9PIy6lzS8bN2BwjgrGIbqwDnIjyWXiGWSIwTvls7uVbVcLZTKn9VzAD1OwSECacELfsRywkBfLKeQZCcnrIWv2yz8LSlisVx05",
                                  status="enabled",
                                  point_expires_at="2019-03-02T14:53:39.000000+09:00",
                                  point_expires_in_days=8937,
                                  is_exclusive=True,
                                  subject="money",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[6],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["21599a03-b70f-47de-9feb-b0fb806ccc23", "c710ccaa-234f-4b46-82cb-b3dd15dce703", "f95b0971-3208-4091-a819-9e3ce979ae10", "e5ad365c-bf0f-4ba5-ba2b-849b49ca9dee", "edc65023-c6bd-43d8-b05d-25c7fd88ae79", "8db40f60-86b0-4099-9cde-cfce27c973d3", "1d97ffa5-fea6-4080-95c2-0015bf6d5e84", "ba7a9ee9-18e5-45ce-b5ee-2c3e926feebf", "b185bd55-f65f-4f70-92f9-011724750b8f", "4a9127e5-8b78-47af-96b3-2e3c78141390"],
                                  minimum_number_for_combination_purchase=4765,
                                  exist_in_each_product_groups=True,
                                  max_point_amount=5499,
                                  max_total_point_amount=7611,
                                  dest_private_money_id="266d9847-36c8-4e8a-9cfd-6b2b4d3b7d2c",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_create_campaign_18(self):
        response = client.send(pp.CreateCampaign(
                                  "hSXbkXYZx4oY1W7w7780wYhx485VuUVjcPSnlzmD1IlPNzflD9qUXVJFYkHD69BFqkybO",
                                  "9397f8a0-f1cb-49c3-9992-bc221e6d3b13",
                                  "2016-07-03T13:49:43.000000+09:00",
                                  "2022-12-27T09:41:01.000000+09:00",
                                  9698,
                                  "external-transaction",
                                  bear_point_shop_id="bd58283d-96a2-46f3-bfab-893497d3dd28",
                                  description="HIjKL4O9y2C0EZfIM2PcCNqGBww07eXG8K8c0KBD4XFaUl8Txc14moDERSDA5SkkvkeE8KYRPrLdgOJx4C4hoZuqlUgN7VLpBDd71h8KLpWyuVQFiKjxkJa6VPfLkZcBcb3e3A88wrpUmnfOy8AzIXbsRE1GtsQvu",
                                  status="disabled",
                                  point_expires_at="2023-05-29T15:48:11.000000+09:00",
                                  point_expires_in_days=1480,
                                  is_exclusive=True,
                                  subject="money",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[1, 4, 0, 4, 0, 0, 4, 2],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=[],
                                  minimum_number_for_combination_purchase=7576,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=2248,
                                  max_total_point_amount=7884,
                                  dest_private_money_id="64867a38-3047-4860-90c6-eb6df718a203",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_campaigns_0(self):
        response = client.send(pp.ListCampaigns(
                                  "c3853c08-a29f-4461-ac6e-bf1ab73bef93"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_campaigns_1(self):
        response = client.send(pp.ListCampaigns(
                                  "c3853c08-a29f-4461-ac6e-bf1ab73bef93",
                                  per_page=7566
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_campaigns_2(self):
        response = client.send(pp.ListCampaigns(
                                  "c3853c08-a29f-4461-ac6e-bf1ab73bef93",
                                  page=5561,
                                  per_page=7150
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_list_campaigns_3(self):
        response = client.send(pp.ListCampaigns(
                                  "c3853c08-a29f-4461-ac6e-bf1ab73bef93",
                                  is_ongoing=False,
                                  page=7051,
                                  per_page=1500
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_get_campaign_0(self):
        response = client.send(pp.GetCampaign(
                                  "7b17eefe-31f8-48e2-b9c2-d79f8d72a555"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_0(self):
        response = client.send(pp.UpdateCampaign(
                                  "5c18fb9f-5f04-44bd-83f6-deb97cbc0e8f"
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_1(self):
        response = client.send(pp.UpdateCampaign(
                                  "5c18fb9f-5f04-44bd-83f6-deb97cbc0e8f",
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_2(self):
        response = client.send(pp.UpdateCampaign(
                                  "5c18fb9f-5f04-44bd-83f6-deb97cbc0e8f",
                                  max_total_point_amount=2086,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_3(self):
        response = client.send(pp.UpdateCampaign(
                                  "5c18fb9f-5f04-44bd-83f6-deb97cbc0e8f",
                                  max_point_amount=2515,
                                  max_total_point_amount=6079,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_4(self):
        response = client.send(pp.UpdateCampaign(
                                  "5c18fb9f-5f04-44bd-83f6-deb97cbc0e8f",
                                  exist_in_each_product_groups=False,
                                  max_point_amount=672,
                                  max_total_point_amount=4179,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_5(self):
        response = client.send(pp.UpdateCampaign(
                                  "5c18fb9f-5f04-44bd-83f6-deb97cbc0e8f",
                                  minimum_number_for_combination_purchase=2482,
                                  exist_in_each_product_groups=True,
                                  max_point_amount=6744,
                                  max_total_point_amount=7779,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_6(self):
        response = client.send(pp.UpdateCampaign(
                                  "5c18fb9f-5f04-44bd-83f6-deb97cbc0e8f",
                                  applicable_shop_ids=["06346c0b-3a42-4968-951d-15b869925802", "4e45b237-e94d-4d77-a10a-02ae1b9ae866", "be7ad7b5-ee83-4cfc-969a-1f8064ed675f"],
                                  minimum_number_for_combination_purchase=2656,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=3525,
                                  max_total_point_amount=1807,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_7(self):
        response = client.send(pp.UpdateCampaign(
                                  "5c18fb9f-5f04-44bd-83f6-deb97cbc0e8f",
                                  applicable_time_ranges=[],
                                  applicable_shop_ids=["3370aab9-5aa9-4a98-a927-59441c638d02", "590bda9a-9049-4c17-9496-11f01d70959f", "23027628-0f99-44d5-813d-5f60f34222a8", "b3557d55-3235-4e0b-8dce-56a17516730e", "ded55bca-b1b8-4e04-8f4a-be0e86f8c4ac", "2ea919fb-98a1-4af9-949a-bfd4caa658c3", "af27d12f-346e-488c-803a-bb01338d87dd", "095bcc03-5d0f-49f8-8dd7-d5d5cab470d7", "b36398c4-9236-49a0-b1d7-688fd9be731b", "b18fe113-27f3-4c13-9259-aff89c2113dc"],
                                  minimum_number_for_combination_purchase=5241,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=6679,
                                  max_total_point_amount=7478,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_8(self):
        response = client.send(pp.UpdateCampaign(
                                  "5c18fb9f-5f04-44bd-83f6-deb97cbc0e8f",
                                  applicable_days_of_week=[6, 5, 5, 2, 6, 1, 0, 0, 3],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["51f011a2-9d7d-44df-b515-bcf09e3a4042", "db342444-0a5f-4880-8bef-d6a3d1dddb42"],
                                  minimum_number_for_combination_purchase=6639,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=5592,
                                  max_total_point_amount=7624,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_9(self):
        response = client.send(pp.UpdateCampaign(
                                  "5c18fb9f-5f04-44bd-83f6-deb97cbc0e8f",
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[3, 4],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=[],
                                  minimum_number_for_combination_purchase=3885,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=8130,
                                  max_total_point_amount=8517,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_10(self):
        response = client.send(pp.UpdateCampaign(
                                  "5c18fb9f-5f04-44bd-83f6-deb97cbc0e8f",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[3, 0, 6, 5, 6],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["7769127d-5b7d-4969-b4d6-4b3aaf4b073a", "a32adbf9-ff9a-485f-91f9-2e68b052898e", "dceda51c-6951-4180-b607-8cb64640da03", "c3079aad-6eca-4cbc-a1d2-ca48768a1da8", "4a9c3baa-8c34-4d1b-8599-2f4a307248a6", "5bd01d46-25a1-410f-bfc1-deb23cac5fa6", "1d5e0719-e7c8-49e5-9209-2015c890f2f0", "e563a1ca-b7bc-42dd-a07e-abee603be61b", "b7c9a8e7-b7e9-4c41-8f1d-42bac0f4b34c", "47c5b7cb-d5ab-4d24-8552-ebd1875302d9"],
                                  minimum_number_for_combination_purchase=5544,
                                  exist_in_each_product_groups=True,
                                  max_point_amount=778,
                                  max_total_point_amount=5356,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_11(self):
        response = client.send(pp.UpdateCampaign(
                                  "5c18fb9f-5f04-44bd-83f6-deb97cbc0e8f",
                                  subject="all",
                                  amount_based_point_rules=[],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[0, 5, 4, 2, 6, 3],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=[],
                                  minimum_number_for_combination_purchase=3541,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=6006,
                                  max_total_point_amount=5948,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_12(self):
        response = client.send(pp.UpdateCampaign(
                                  "5c18fb9f-5f04-44bd-83f6-deb97cbc0e8f",
                                  is_exclusive=False,
                                  subject="all",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[5, 0, 6],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["db603ef5-ec24-4ab6-bb5b-96432154b86c"],
                                  minimum_number_for_combination_purchase=6666,
                                  exist_in_each_product_groups=True,
                                  max_point_amount=615,
                                  max_total_point_amount=1932,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_13(self):
        response = client.send(pp.UpdateCampaign(
                                  "5c18fb9f-5f04-44bd-83f6-deb97cbc0e8f",
                                  point_expires_in_days=7434,
                                  is_exclusive=True,
                                  subject="all",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[1, 0, 4, 0, 3],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["3699b63a-6cfc-481c-8a2f-11c7c0a99274", "4991d132-d4be-4683-8286-2b7425753d45", "7f11c148-7b71-4488-837f-32318d12473b", "e29b04b6-eb66-4e5c-b6a8-4768d44ebef7", "61ae2ac7-2fcb-4e93-a316-c8ae87bd6840", "45da792a-fbbc-461f-96be-57a6799b6cca"],
                                  minimum_number_for_combination_purchase=4266,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=7023,
                                  max_total_point_amount=5035,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_14(self):
        response = client.send(pp.UpdateCampaign(
                                  "5c18fb9f-5f04-44bd-83f6-deb97cbc0e8f",
                                  point_expires_at="2019-01-08T16:08:31.000000+09:00",
                                  point_expires_in_days=2895,
                                  is_exclusive=True,
                                  subject="all",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[0, 4, 2, 1],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=[],
                                  minimum_number_for_combination_purchase=9260,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=4443,
                                  max_total_point_amount=6548,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_15(self):
        response = client.send(pp.UpdateCampaign(
                                  "5c18fb9f-5f04-44bd-83f6-deb97cbc0e8f",
                                  status="enabled",
                                  point_expires_at="2016-05-04T19:21:54.000000+09:00",
                                  point_expires_in_days=5648,
                                  is_exclusive=False,
                                  subject="all",
                                  amount_based_point_rules=[],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[2, 5],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["100d81c0-5ed2-4b4b-b767-a4190ebf2e6a", "a83ae063-92be-4975-b72f-5160cee390d8", "bdc95d0d-4824-4ce9-b3c8-59efdde7c02e", "6a99374f-18ce-4cf9-83d1-44d369feefdd", "20cee13f-651c-4743-bbba-38649be7da7f", "e59f3b5d-32ee-4c94-b1ee-b235908477d2", "2884cc1f-fa1a-4f05-9eb4-d8cd6af1f925", "1f141c24-ea76-4560-b1be-e25a888c9504"],
                                  minimum_number_for_combination_purchase=3619,
                                  exist_in_each_product_groups=True,
                                  max_point_amount=5013,
                                  max_total_point_amount=4001,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_16(self):
        response = client.send(pp.UpdateCampaign(
                                  "5c18fb9f-5f04-44bd-83f6-deb97cbc0e8f",
                                  description="wzW1BwcgqWRw",
                                  status="disabled",
                                  point_expires_at="2020-10-27T22:49:35.000000+09:00",
                                  point_expires_in_days=1640,
                                  is_exclusive=True,
                                  subject="all",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[],
                                  applicable_days_of_week=[6],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["ef8d9db6-b7c9-4f32-9131-552fbcbc613e", "321ae656-9b3b-4af2-953f-bba5844e656c", "74bbc4c5-f72f-4c9c-bcfd-9676922daf38", "cd7d1339-e9de-4c15-9a8e-861888c431e9", "c2bbbd92-974b-400f-b31d-4d231e52c6ed", "449ac204-451d-4749-8a26-5439dbb3ef5e", "7f1b32fb-ac5c-4483-b867-2484cdd0cee0"],
                                  minimum_number_for_combination_purchase=4284,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=3883,
                                  max_total_point_amount=7554,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_17(self):
        response = client.send(pp.UpdateCampaign(
                                  "5c18fb9f-5f04-44bd-83f6-deb97cbc0e8f",
                                  event="topup",
                                  description="C6b9GHnKhOVpZ22QdsQzmCv7uu4Rjwow4W4aGUIB4qVpi1k96TCsR73B2bexyRN0FeOCSJogTcgW7JfMU6IYfBtccsX3p8MbaRzWjD73tkWoZfrij",
                                  status="disabled",
                                  point_expires_at="2023-03-27T08:38:09.000000+09:00",
                                  point_expires_in_days=8838,
                                  is_exclusive=False,
                                  subject="all",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[3, 1],
                                  applicable_time_ranges=[],
                                  applicable_shop_ids=["7939f88c-35f5-4478-b1b7-8ff87c256373", "292192a2-d8ae-42a1-8718-4cb2e74a59d0", "32e55926-a538-4ace-be15-6b2396c8bec8", "d514d511-90e4-4231-ba17-ec5f2191ce71", "e1ff2835-1bad-4c2a-8450-3089bb2ebb19"],
                                  minimum_number_for_combination_purchase=9960,
                                  exist_in_each_product_groups=True,
                                  max_point_amount=9340,
                                  max_total_point_amount=6893,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_18(self):
        response = client.send(pp.UpdateCampaign(
                                  "5c18fb9f-5f04-44bd-83f6-deb97cbc0e8f",
                                  priority=7596,
                                  event="payment",
                                  description="b7khqKO2grICJ7LBsNWsoYv0b92XjZd0NON96uPiCYdqDlkhjTTWacSGd1Ya6bcSmRUgmDSYsob",
                                  status="enabled",
                                  point_expires_at="2017-10-25T17:06:35.000000+09:00",
                                  point_expires_in_days=7877,
                                  is_exclusive=True,
                                  subject="all",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[6, 4, 5, 1, 2],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["3398e8bd-624e-45dd-b50e-6e83dcdc9b85", "bae96617-556f-4b40-8a32-8c4b30cfe527", "2284070b-6480-462e-be52-a6e63834056c", "f5f1ed6c-4650-4ce8-ba0d-0e046ca34783"],
                                  minimum_number_for_combination_purchase=525,
                                  exist_in_each_product_groups=True,
                                  max_point_amount=7242,
                                  max_total_point_amount=4692,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_19(self):
        response = client.send(pp.UpdateCampaign(
                                  "5c18fb9f-5f04-44bd-83f6-deb97cbc0e8f",
                                  ends_at="2016-12-13T13:06:31.000000+09:00",
                                  priority=9938,
                                  event="external-transaction",
                                  description="VSxMYqAMB3z7nYDPr6v1pzhOG",
                                  status="disabled",
                                  point_expires_at="2022-12-25T22:44:06.000000+09:00",
                                  point_expires_in_days=2709,
                                  is_exclusive=True,
                                  subject="all",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[5, 1, 2, 2, 2, 0, 0, 4, 0, 2],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["df582fec-03ce-4787-9dac-77f0187c6aa2", "f898220b-b8f9-4820-b0da-6c9c056627a7", "b11c524a-44e3-4d9f-a401-e84ad1e324a5"],
                                  minimum_number_for_combination_purchase=4817,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=4928,
                                  max_total_point_amount=5556,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_20(self):
        response = client.send(pp.UpdateCampaign(
                                  "5c18fb9f-5f04-44bd-83f6-deb97cbc0e8f",
                                  starts_at="2018-07-06T15:00:47.000000+09:00",
                                  ends_at="2025-06-25T10:45:02.000000+09:00",
                                  priority=8048,
                                  event="topup",
                                  description="LjiqoFOy0PauDUzQJHv35u8yGCDJa6aC74rTxWfCwEKDMnpJpUsLCEv",
                                  status="disabled",
                                  point_expires_at="2020-11-11T17:40:58.000000+09:00",
                                  point_expires_in_days=5066,
                                  is_exclusive=True,
                                  subject="all",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[3, 2],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["fa26b2a7-7998-4a77-948c-93344d39f24b"],
                                  minimum_number_for_combination_purchase=8244,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=2729,
                                  max_total_point_amount=428,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_update_campaign_21(self):
        response = client.send(pp.UpdateCampaign(
                                  "5c18fb9f-5f04-44bd-83f6-deb97cbc0e8f",
                                  name="wTMx8PhpwY9OTgl1UdTEKAKTzPQ2mddzIkVSCtNgph4Xr4NX9akc3yfBNyYBrqsFCdy3y5yLxQcFq3NQfpfiHlgVOL06dsRBI3R18iUITXpoq3XP6S2ynL0a3MdjSU5UcPqyE00Q0ne7IW8CRyqMqsKRjNs7IO9XZuR4mD9qikMK68q9bXEOEYX09g2gt0TcGcMgfwTyN8FZyngJPJDTwjGiz81MTFl8QMs1XbRUQ4AO3IcYZVNfIa8",
                                  starts_at="2018-08-19T07:07:32.000000+09:00",
                                  ends_at="2025-03-31T15:38:31.000000+09:00",
                                  priority=1645,
                                  event="payment",
                                  description="4IJ4In53FcbpNdQNOLVbSTXMcUJsxNvH1rlxLDR7jop3McwecvRm9LutEMLUlbzffGUj96Ga7YQTMCtzl0Gi9oZVn7GccW1e4oyCbm7wGNTiH5fGjY5om32PvDVPPtW0LofmKptstKtv31sJqRT58uqFrKIR12MX7OZ7sspYAIKXrHC690H3VM",
                                  status="enabled",
                                  point_expires_at="2021-09-05T02:57:05.000000+09:00",
                                  point_expires_in_days=5891,
                                  is_exclusive=False,
                                  subject="all",
                                  amount_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "subject_more_than_or_equal": 1000,
          "subject_less_than": 5000
        }],
                                  product_based_point_rules=[{
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }, {
          "point_amount": 5,
          "point_amount_unit": "percent",
          "product_code": "4912345678904",
          "is_multiply_by_count": true,
          "required_count": 2
        }],
                                  applicable_days_of_week=[5, 6, 4, 4, 2, 1],
                                  applicable_time_ranges=[{
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }, {
          "from": "12:00",
          "to": "23:59"
        }],
                                  applicable_shop_ids=["6bba0aef-b613-44a9-802f-8929b39ea37e", "e1cd37db-0139-4c33-9f22-952e56832826", "32ed220b-d27e-4668-bbce-4931c09c9d0a", "f2613597-8b92-46fa-8f13-48c9eb0bc7b6", "99c18b2b-d588-4b69-8feb-41682b36b722", "e27c916c-0f3c-4764-b63e-8d408fc1802d", "1aabeab1-5c41-4283-b099-6960f87e28fa"],
                                  minimum_number_for_combination_purchase=5737,
                                  exist_in_each_product_groups=False,
                                  max_point_amount=6044,
                                  max_total_point_amount=9105,
                                  applicable_account_metadata={
          "key": "sex",
          "value": "male"
        }
        ))
        self.assertNotEqual(response.status_code, 400)

    def test_request_user_stats_0(self):
        response = client.send(pp.RequestUserStats(
                                  "2019-10-03T17:25:58.000000+09:00",
                                  "2024-03-08T00:13:04.000000+09:00"
        ))
        self.assertNotEqual(response.status_code, 400)

