// DO NOT EDIT: File is generated by code generator.

import {
  Client,
  VERSION,
  Request,
  Method,
  Response,
  CreateOrganization,
  Organization,
  UpdateWebhook,
  CreateWebhook,
  OrganizationWorkerTaskWebhook,
  DeleteWebhook,
  ListWebhooks,
  PaginatedOrganizationWorkerTaskWebhook,
} from '../index';

import * as util from './util';

const client = new Client("~/.pokepay/test-config.ini");

test('testCreateOrganization', async () => {
  const code: string = "test-org" + util.randomString(6);
  const name: string = "テスト組織" + util.randomString(4);
  const private_money_ids: string[] = ["4b138a4c-8944-4f98-a5c4-96d3c1c415eb"];
  const issuer_admin_user_email: string = util.randomString(6) + "@pokepay-tests.jp";
  const member_admin_user_email: string = util.randomString(6) + "@pokepay-tests.jp";
  const response: Organization = <Organization>(await client.send(new CreateOrganization({
    code: code,
    name: name,
    private_money_ids: private_money_ids,
    issuer_admin_user_email: issuer_admin_user_email,
    member_admin_user_email: member_admin_user_email,
  }))).object;
  expect(code).toBe(response.code);
  expect(name).toBe(response.name);
})
test('testCreateOrganizationWithMetadata', async () => {
  const code: string = "test-org" + util.randomString(6);
  const name: string = "テスト組織" + util.randomString(4);
  const private_money_ids: string[] = ["4b138a4c-8944-4f98-a5c4-96d3c1c415eb"];
  const issuer_admin_user_email: string = util.randomString(6) + "@pokepay-tests.jp";
  const member_admin_user_email: string = util.randomString(6) + "@pokepay-tests.jp";
  const bank_code: string = "1234";
  const bank_name: string = util.randomString(4) + "銀行";
  const bank_branch_code: string = "123";
  const bank_branch_name: string = util.randomString(4) + "支店";
  const bank_account_type: string = "saving";
  const bank_account: string = "1234567";
  const bank_account_holder_name: string = "ﾌｸｻﾞﾜﾕｷﾁ";
  const contact_name: string = "佐藤清";
  const response: Organization = <Organization>(await client.send(new CreateOrganization({
    code: code,
    name: name,
    private_money_ids: private_money_ids,
    issuer_admin_user_email: issuer_admin_user_email,
    member_admin_user_email: member_admin_user_email,

    "bank_code": bank_code,
    "bank_name": bank_name,
    "bank_branch_code": bank_branch_code,
    "bank_branch_name": bank_branch_name,
    "bank_account_type": bank_account_type,
    "bank_account": bank_account,
    "bank_account_holder_name": bank_account_holder_name,
    "contact_name": contact_name,}))).object;
  expect(code).toBe(response.code);
  expect(name).toBe(response.name);
})
