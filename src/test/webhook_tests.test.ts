// DO NOT EDIT: File is generated by code generator.

import {
  Client,
  VERSION,
  Request,
  Method,
  Response,
  UpdateWebhook,
  CreateWebhook,
  OrganizationWorkerTaskWebhook,
  DeleteWebhook,
  ListWebhooks,
  PaginatedOrganizationWorkerTaskWebhook,
} from '../index';

import * as util from './util';

const client = new Client("~/.pokepay/test-config.ini");

test('test0', async () => {
  const list: PaginatedOrganizationWorkerTaskWebhook = <PaginatedOrganizationWorkerTaskWebhook>(await client.send(new ListWebhooks())).object;
  for (let row of list.rows) {
    <OrganizationWorkerTaskWebhook>(await client.send(new DeleteWebhook({
      webhook_id: row.id,
    }))).object;
  }
  const webhook1: OrganizationWorkerTaskWebhook = <OrganizationWorkerTaskWebhook>(await client.send(new CreateWebhook({
    task: "bulk_shops",
    url: "http://localhost/bulk_shops",
  }))).object;
  expect("coilinc").toBe(webhook1.organization_code);
  expect("bulk_shops").toBe(webhook1.task);
  expect("http://localhost/bulk_shops").toBe(webhook1.url);
  expect(true).toBe(webhook1.is_active);
  expect("application/json").toBe(webhook1.content_type);
  const webhook2: OrganizationWorkerTaskWebhook = <OrganizationWorkerTaskWebhook>(await client.send(new CreateWebhook({
    task: "process_user_stats_operation",
    url: "http://localhost/process_user_stats_operation",
  }))).object;
  expect("coilinc").toBe(webhook2.organization_code);
  expect("process_user_stats_operation").toBe(webhook2.task);
  expect("http://localhost/process_user_stats_operation").toBe(webhook2.url);
  expect(true).toBe(webhook2.is_active);
  expect("application/json").toBe(webhook2.content_type);
  const list2: PaginatedOrganizationWorkerTaskWebhook = <PaginatedOrganizationWorkerTaskWebhook>(await client.send(new ListWebhooks())).object;
  expect(2).toBe(list2.count);
  expect(webhook2.id).toBe(list2.rows[0].id);
  expect(webhook1.id).toBe(list2.rows[1].id);
  const update_response: OrganizationWorkerTaskWebhook = <OrganizationWorkerTaskWebhook>(await client.send(new UpdateWebhook({
    webhook_id: webhook1.id,

    "is_active": false,}))).object;
  expect(webhook1.id).toBe(update_response.id);
  expect(webhook1.organization_code).toBe(update_response.organization_code);
  expect(webhook1.task).toBe(update_response.task);
  expect(webhook1.url).toBe(update_response.url);
  expect(webhook1.content_type).toBe(update_response.content_type);
  expect(false).toBe(update_response.is_active);
})
