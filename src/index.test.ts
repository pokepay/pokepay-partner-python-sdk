// DO NOT EDIT: File is generated by code generator.

import axios from 'axios';
import { Client, VERSION, Request, Method, Response, UserStatsOperationServiceUnavailable, UnpermittedAdminUser, InvalidParameters, PartnerRequestAlreadyDone, PartnerRequestExpired, PartnerDecryptionFailed, PartnerClientNotFound, BadRequest, PaginatedOrganizations, PaginatedCoupons, CouponDetail, Coupon, PaginatedOrganizationWorkerTaskWebhook, OrganizationWorkerTaskWebhook, AccountTransferSummary, AccountTransferSummaryElement, PaginatedCampaigns, Campaign, PaginatedPrivateMoneys, PaginatedBills, PaginatedShops, PaginatedAccountBalance, PaginatedAccountDetails, PaginatedAccountWithUsers, PaginatedAccounts, PaginatedTransfersV2, PaginatedTransfers, PaginatedTransactionV2, PaginatedTransaction, Banks, Bank, BankRegisteringInfo, UserDevice, UserStatsOperation, PrivateMoneySummary, PaginatedPrivateMoneyOrganizationSummaries, PrivateMoneyOrganizationSummary, OrganizationSummary, Product, ExternalTransactionDetail, ExternalTransaction, Transfer, AccountWithoutPrivateMoneyDetail, PaginatedBulkTransactionJob, BulkTransactionJob, BulkTransaction, ShopWithAccounts, ShopWithMetadata, TransactionDetail, Transaction, Organization, PrivateMoney, User, CashtrayAttempt, CashtrayWithResult, Cashtray, CpmToken, PaginatedChecks, Check, Bill, AccountBalance, AccountDeleted, ShopAccount, AccountDetail, AccountWithUser, Account, AdminUserWithShopsAndPrivateMoneys, Pagination, Echo, Pong, UpdateCoupon, GetCoupon, CreateCoupon, ListCoupons, CreateBankTopupTransaction, CreateBank, ListBanks, ActivateUserDevice, GetUserDevice, CreateUserDevice, UpdateWebhook, DeleteWebhook, CreateWebhook, ListWebhooks, RequestUserStats, UpdateCampaign, GetCampaign, CreateCampaign, ListCampaigns, UpdateCashtray, GetCashtray, CancelCashtray, CreateCashtray, ListBulkTransactionJobs, GetBulkTransaction, ListCustomerTransactions, GetPrivateMoneySummary, GetPrivateMoneyOrganizationSummaries, GetPrivateMoneys, UpdateShop, GetShop, CreateShopV2, CreateShop, ListShops, CreateOrganization, ListOrganizations, ListTransfersV2, ListTransfers, GetExternalTransactionByRequestId, RefundExternalTransaction, CreateExternalTransaction, GetTransactionByRequestId, RefundTransaction, GetTransaction, BulkCreateTransaction, CreateExchangeTransaction, CreateTransferTransaction, CreateCpmTransaction, CreatePaymentTransaction, CreateTopupTransactionWithCheck, CreateTopupTransaction, ListTransactionsV2, CreateTransaction, ListTransactions, GetCpmToken, UpdateCheck, GetCheck, CreateCheck, ListChecks, UpdateBill, CreateBill, ListBills, GetShopAccounts, CreateCustomerAccount, GetCustomerAccounts, GetAccountTransferSummary, UpdateCustomerAccount, ListAccountExpiredBalances, ListAccountBalances, UpdateAccount, GetAccount, DeleteAccount, CreateUserAccount, ListUserAccounts, GetUser, SendEcho, GetPing } from "./index";

const client = new Client("~/.pokepay/test-config.ini");

jest.setTimeout(30000);

test('Check VERSION', async () => {
  expect(VERSION).not.toBe(null);
});

test('Check GetPing | 0', async () => {
  let status = 400;
  try {
    const response: Response<Pong> = await client.send(new GetPing());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check SendEcho | 0', async () => {
  let status = 400;
  try {
    const response: Response<Echo> = await client.send(new SendEcho({
      message: "DgdY"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetUser | 0', async () => {
  let status = 400;
  try {
    const response: Response<AdminUserWithShopsAndPrivateMoneys> = await client.send(new GetUser());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListUserAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountDetails> = await client.send(new ListUserAccounts({
      user_id: "f7badafa-54a1-4511-b337-e4aa1c1fe652"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListUserAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountDetails> = await client.send(new ListUserAccounts({
      user_id: "f7badafa-54a1-4511-b337-e4aa1c1fe652",
      per_page: 5145
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListUserAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountDetails> = await client.send(new ListUserAccounts({
      user_id: "f7badafa-54a1-4511-b337-e4aa1c1fe652",
      page: 7996,
      per_page: 3122
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new CreateUserAccount({
      user_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988",
      private_money_id: "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new CreateUserAccount({
      user_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988",
      private_money_id: "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new CreateUserAccount({
      user_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988",
      private_money_id: "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d",
      external_id: "FBMnn24Y00BddIYIaGsnHTfyj3vGhpYs6lE3PVx",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserAccount | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new CreateUserAccount({
      user_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988",
      private_money_id: "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d",
      name: "hCRcEAVa4JmfjoJZ9ajsO39BqxPDSP5BpfA0dYcuMmHpa4aDHWm32hBFhI0DxRhz83lKq4Wp1hKlNvpHM0s7Dd9Uu6qWqC0qUtLag9adxARTcCtKjz1M2kusM3cVDMOGMtpxWNvKR6Gcp6PWCiNymBaUIu6lQIyVNDYRttS46oTXBYnbHbMuAdnXANiixumuncg7egxc7L05i8jkZ1Waa",
      external_id: "h6AAgB9jXehhbgs",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check DeleteAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDeleted> = await client.send(new DeleteAccount({
      account_id: "ce348e12-e7ee-4579-a9c8-94dd3d6c2f3d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check DeleteAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountDeleted> = await client.send(new DeleteAccount({
      account_id: "ce348e12-e7ee-4579-a9c8-94dd3d6c2f3d",
      cashback: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new GetAccount({
      account_id: "e2f27231-d218-406e-b371-622b2afd45f7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "f687016b-d0b3-46f2-8833-e8985291851f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "f687016b-d0b3-46f2-8833-e8985291851f",
      can_transfer_topup: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "f687016b-d0b3-46f2-8833-e8985291851f",
      status: "pre-closed",
      can_transfer_topup: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "f687016b-d0b3-46f2-8833-e8985291851f",
      is_suspended: true,
      status: "active",
      can_transfer_topup: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "0adcc451-9f5b-4fe8-8803-fd1118c34c95"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "0adcc451-9f5b-4fe8-8803-fd1118c34c95",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "0adcc451-9f5b-4fe8-8803-fd1118c34c95",
      expires_at_to: "2020-10-07T18:59:38.000000Z",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "0adcc451-9f5b-4fe8-8803-fd1118c34c95",
      expires_at_from: "2020-09-07T21:25:03.000000Z",
      expires_at_to: "2022-05-06T04:41:55.000000Z",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "0adcc451-9f5b-4fe8-8803-fd1118c34c95",
      per_page: 3844,
      expires_at_from: "2022-07-13T08:37:39.000000Z",
      expires_at_to: "2022-05-05T20:55:29.000000Z",
      direction: "asc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "0adcc451-9f5b-4fe8-8803-fd1118c34c95",
      page: 677,
      per_page: 5673,
      expires_at_from: "2021-09-28T23:27:27.000000Z",
      expires_at_to: "2020-10-21T06:08:14.000000Z",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "e82d7cf3-7ec5-43b0-a747-7fff9e012434"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "e82d7cf3-7ec5-43b0-a747-7fff9e012434",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "e82d7cf3-7ec5-43b0-a747-7fff9e012434",
      expires_at_to: "2020-03-19T18:01:03.000000Z",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "e82d7cf3-7ec5-43b0-a747-7fff9e012434",
      expires_at_from: "2022-12-28T17:18:58.000000Z",
      expires_at_to: "2023-10-07T04:30:21.000000Z",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "e82d7cf3-7ec5-43b0-a747-7fff9e012434",
      per_page: 9557,
      expires_at_from: "2023-08-29T00:06:37.000000Z",
      expires_at_to: "2020-05-27T19:21:15.000000Z",
      direction: "asc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "e82d7cf3-7ec5-43b0-a747-7fff9e012434",
      page: 4163,
      per_page: 2955,
      expires_at_from: "2021-01-23T23:18:48.000000Z",
      expires_at_to: "2021-06-11T20:14:34.000000Z",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "7d5c2b5b-43f9-4a5f-97c7-ebbfeb9ae161"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "7d5c2b5b-43f9-4a5f-97c7-ebbfeb9ae161",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "7d5c2b5b-43f9-4a5f-97c7-ebbfeb9ae161",
      external_id: "N9eZjSIQORsTn19Lt83IRfp6apsZzwHUgb2q",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "7d5c2b5b-43f9-4a5f-97c7-ebbfeb9ae161",
      account_name: "rLtRpMZnFJMuPuuYDxHZdnikAchiJbVP3ZTnJxIJTqpbj9hQa29LtqbzIUCtrgI5GH6wQi2f3OojTDEk0fitYgKzfXu0N7ZPQ6Ey6Tu3BU56A0DovC2AWlgsj8AO1bqHH9NHpqZwH1tkpyNDcuWxfr4xKRRC5UPfddKJfLPJmxAhDpkltxfpGBgKzLBWMCYifXDXPCbHnT3R8fCd8115VzfSNwUPij0JCeKaErwIngTct5VctC",
      external_id: "ahSG576Yk",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 4', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "7d5c2b5b-43f9-4a5f-97c7-ebbfeb9ae161",
      status: "pre-closed",
      account_name: "67hNuqsd2aOEu5ugI0fcKmGRUw7sMhCFW8ODbHkZSUPXBsmObvn",
      external_id: "UjDTSSciw",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetAccountTransferSummary | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountTransferSummary> = await client.send(new GetAccountTransferSummary({
      account_id: "0de2a38c-c7bc-4b5d-be03-229e54b13590"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetAccountTransferSummary | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountTransferSummary> = await client.send(new GetAccountTransferSummary({
      account_id: "0de2a38c-c7bc-4b5d-be03-229e54b13590",
      transfer_types: ["use-coupon", "topup", "refund-payment", "refund-exchange-outflow"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetAccountTransferSummary | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountTransferSummary> = await client.send(new GetAccountTransferSummary({
      account_id: "0de2a38c-c7bc-4b5d-be03-229e54b13590",
      to: "2021-11-24T19:26:35.000000Z",
      transfer_types: ["refund-campaign", "campaign-topup"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetAccountTransferSummary | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountTransferSummary> = await client.send(new GetAccountTransferSummary({
      account_id: "0de2a38c-c7bc-4b5d-be03-229e54b13590",
      from: "2022-12-02T02:52:24.000000Z",
      to: "2024-02-07T22:36:01.000000Z",
      transfer_types: ["refund-payment", "refund-exchange-inflow", "refund-coupon", "exchange-inflow"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "8fd6266d-a71c-4830-9cd3-391d4cc8aba3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "8fd6266d-a71c-4830-9cd3-391d4cc8aba3",
      email: "p2RluFOAxJ@TKKl.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "8fd6266d-a71c-4830-9cd3-391d4cc8aba3",
      tel: "00555265714",
      email: "cJlnsa7zuy@1tus.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "8fd6266d-a71c-4830-9cd3-391d4cc8aba3",
      external_id: "dw",
      tel: "071-69745487",
      email: "fKkMLwrBpO@RQ9L.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "8fd6266d-a71c-4830-9cd3-391d4cc8aba3",
      status: "suspended",
      external_id: "lnKRmCd4n",
      tel: "045-981479",
      email: "qpn3W7S36l@34SS.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "8fd6266d-a71c-4830-9cd3-391d4cc8aba3",
      is_suspended: false,
      status: "active",
      external_id: "W72gqSjd8QPzbjt0rt7UmerReZGbvGgvA",
      tel: "09215911045",
      email: "P1AnQALadF@sAzg.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "8fd6266d-a71c-4830-9cd3-391d4cc8aba3",
      created_at_to: "2022-07-27T22:59:50.000000Z",
      is_suspended: true,
      status: "pre-closed",
      external_id: "tuXgZDedIJqTHGgnOhGiwZBj5AvHdO2Atfc",
      tel: "0129-664-818",
      email: "3sP8V6IT9V@FC5b.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "8fd6266d-a71c-4830-9cd3-391d4cc8aba3",
      created_at_from: "2021-03-24T19:42:09.000000Z",
      created_at_to: "2020-09-24T18:38:11.000000Z",
      is_suspended: true,
      status: "active",
      external_id: "PASw8jPQ0hMJ4nPgNJOUuVI3xkUSOX0vTgyFK1F",
      tel: "002-97-992",
      email: "exAarzlUll@rgsQ.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "8fd6266d-a71c-4830-9cd3-391d4cc8aba3",
      per_page: 6435,
      created_at_from: "2022-12-18T13:21:30.000000Z",
      created_at_to: "2022-10-28T02:45:21.000000Z",
      is_suspended: true,
      status: "active",
      external_id: "YeKIbZQuPYAKNLvTyMcIYl",
      tel: "079352848",
      email: "Pv9LO3MtPy@t1wT.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "8fd6266d-a71c-4830-9cd3-391d4cc8aba3",
      page: 8687,
      per_page: 8494,
      created_at_from: "2024-02-11T20:15:48.000000Z",
      created_at_to: "2023-10-06T20:45:00.000000Z",
      is_suspended: true,
      status: "active",
      external_id: "Yk",
      tel: "004073-175",
      email: "ncONv8Kje2@pUTW.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "c454fa7a-8121-47c1-8460-3b4e2ea6762c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "c454fa7a-8121-47c1-8460-3b4e2ea6762c",
      external_id: "e87oi"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "c454fa7a-8121-47c1-8460-3b4e2ea6762c",
      account_name: "kJDB6ZsUUsk6umIdkjysmBoCy1Ud1e5PrxfXmPZX1VlVfqebv0ckwSJ4e9e0pY47yGoAwg28Msl4sq96mAewFZHEg2RF0uEHwK5Jbwu9JRSn5a7ymUxn4mfvD7ycun86BZW4IWD5GZy4J15w0ovSrq2HjQnZoVWhOdLDSpe9mEjTApY38vZyrfHaX2ePxiTIXh",
      external_id: "26BicGgC0Q3onqPmyIzFPAF7SEHME8DlS2m5Kv5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "c454fa7a-8121-47c1-8460-3b4e2ea6762c",
      user_name: "bgTWsj7MinGr0IGEeLzU5ms0HjwVmUqLVvuFmzvx3MioePO7gkONNAjBCYm4KWEpCDEdkn0OKxjITuRCVadPy2BbYSAUfNgtCT3aJmzxxuQUVBryDZD3LHlYNS3c0MUvvhZyFdpqg4zFLwpBAFUZ73GCZjYfwcSTcjOL0y0KRT0zFenF09DVyQoaELlrJk6MRPKi62IzWH",
      account_name: "emhQ0CqvNNBrhyRg9xxzNXJhnMZrEqyRqPCGzbSmOoYCMUQNjvF4AYLzd022rwQVNfYYCfZZWpAcyBWwWi1DgvTt4hTTZowFPycMflfcbIeOIKes05558vbabHcGuqU0Zpo5LBba7yo5q8iSiTBSZQPeDSY9S36TscHpgaN0j8ZeP1HDPDTHzzRIdW",
      external_id: "jKy82N74m"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "31ecb769-3144-4a83-95a2-b72406deb863"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "31ecb769-3144-4a83-95a2-b72406deb863",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "31ecb769-3144-4a83-95a2-b72406deb863",
      created_at_to: "2020-05-06T02:02:55.000000Z",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "31ecb769-3144-4a83-95a2-b72406deb863",
      created_at_from: "2023-03-17T16:04:05.000000Z",
      created_at_to: "2024-03-19T06:01:45.000000Z",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "31ecb769-3144-4a83-95a2-b72406deb863",
      per_page: 4823,
      created_at_from: "2023-07-22T08:29:37.000000Z",
      created_at_to: "2020-07-29T13:51:14.000000Z",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "31ecb769-3144-4a83-95a2-b72406deb863",
      page: 4360,
      per_page: 8484,
      created_at_from: "2022-04-08T21:42:45.000000Z",
      created_at_to: "2023-03-08T17:36:02.000000Z",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      upper_limit_amount: 3460,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      lower_limit_amount: 3003,
      upper_limit_amount: 2795,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      shop_id: "a9696cec-9a6a-4ba0-b1b1-beff32bea9d1",
      lower_limit_amount: 6740,
      upper_limit_amount: 874,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      shop_name: "kgNdosrcsbqXkWqVhxkWkSbCcQV2KWKaXCJgJ38wW32AKvILX828FihWZQyqSbK0FMXzQI3K0upT8cYYAuEa7VHyo1Pr6ZXG8JSWzel5X6ggilnbIikjMsDtvgyHs8kX",
      shop_id: "52fbc519-17e0-450f-a1fb-f1be62dd6c3d",
      lower_limit_amount: 6587,
      upper_limit_amount: 4324,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      created_to: "2021-06-15T05:13:23.000000Z",
      shop_name: "tCOu5vNtx3bBib1BS1IIGWD4mpTYqNNFPcbcfJ8JMK49acl",
      shop_id: "cbef9865-d3d6-4852-b37c-6b70d28869e3",
      lower_limit_amount: 868,
      upper_limit_amount: 2036,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      created_from: "2020-05-14T12:28:11.000000Z",
      created_to: "2024-03-24T00:30:45.000000Z",
      shop_name: "tmURvImdniels4ZrQj5DbpL3fJFTwwcn9WP3m8VyuReCXx5WTYs7Yv5KDLwBcz7zjgazophuiC1VR8XiXW8JGdOuAk94khcXRAwlFr4tlYuwMI02c6YHU8uGe8qGN",
      shop_id: "1d2bbcf6-f616-4187-946d-ee24a6e9495d",
      lower_limit_amount: 7489,
      upper_limit_amount: 7853,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      description: "tH06f3cpkGDNNhHR4jcwCrCwplpzKOK41muEKIO2q9f6dQ5BvDAnz25uvrmGGKjRYVWTh4n3trK0bvzHyQJ1u0mKrSXl5b4zkBhHXIiOwN14umNbs9HzTMzg2AFGgoFwChMKyFjnp6NWuVTvukHEJJxjvwAaSkrlPscgFZA7kgmnQGh0g7x",
      created_from: "2022-02-22T17:09:50.000000Z",
      created_to: "2023-09-23T15:25:45.000000Z",
      shop_name: "0gjIfqsy3qqeO2uL3gmJXocI00jDfhi9n",
      shop_id: "fd3b47eb-2dfc-4487-99fb-f6af6952f0dc",
      lower_limit_amount: 5451,
      upper_limit_amount: 8442,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      organization_code: "-X-9",
      description: "AWVHYRkMJaQT0YWfQtgxVhq9RVZQG6j5A2pjVon4uuDqic8AnsoXtmv8LerXQe8LjF8Q6qvpD5ZbBwXFvQ1skGDixXFJczCMVyjlRecAjobCopZKVFLb9UiV0XEm",
      created_from: "2022-09-10T23:11:39.000000Z",
      created_to: "2021-02-13T02:56:52.000000Z",
      shop_name: "9iB2syyuELfawMoOZtkTktpas3rTKhS7CSUreJUtTC5W6xtdNcZmGzg6LOAwdB03Wi69g5bppku3R9lJVdDaUu8gKI7uxlsX8tJT",
      shop_id: "f599f724-1dd6-4f25-8e9a-8231f2b0485f",
      lower_limit_amount: 3970,
      upper_limit_amount: 9367,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      private_money_id: "76cb48ab-1022-4981-b43e-d1c122a753f6",
      organization_code: "iTiTkm9kUT0GB-p9y-O3MH-3KR--",
      description: "5Urh2rbZx2aArvrKFEW0caD1nqOzKQjZCyx1Ep4V",
      created_from: "2021-03-17T00:57:33.000000Z",
      created_to: "2020-10-18T20:14:57.000000Z",
      shop_name: "mGgvgI7YgVKC9RfQiSpTWZrd0hVSBtTuiSKN3fmfJoVUvvyWz4acD4YN59s59xIWG",
      shop_id: "bf8dab2c-ba87-45bf-8275-e96a11ee4fe3",
      lower_limit_amount: 7962,
      upper_limit_amount: 7066,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      bill_id: "FFrrXyLyM",
      private_money_id: "967b698e-4ccf-4173-a274-e440aeed4465",
      organization_code: "e-rUFv-xFCvH54G51-",
      description: "t7Q5BMcC1v73v60y8DMLWrlnr061xWZsz",
      created_from: "2020-09-12T06:07:45.000000Z",
      created_to: "2022-03-16T12:50:50.000000Z",
      shop_name: "ogogHitDMic7XGDhIwoiIw8buBfBCDG7j4DoWkpZIbqBi9TROGFtlR9rLj2Y1ER9gKdUSrcKHlFd3Ur1MCMIUROIYftW7",
      shop_id: "851944d1-637b-4de0-a2cd-9d8271642a8f",
      lower_limit_amount: 5132,
      upper_limit_amount: 1439,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      per_page: 7626,
      bill_id: "bzCAj1GsSv",
      private_money_id: "c24c2166-3189-461c-987e-f204c0bb4a9f",
      organization_code: "T1--v-G724-7qs-0fqD1J46-L",
      description: "z7mGpF3omDB92rueqlmfnAfu7erS3gFr3FTdQ8rwckpkfwdxwxZ95sfTG55oAI4VCG4sTwcYeFwcP7ZmLygXYRtjxN2aIco6xNkWo0aYr1y1KHCmQGL0IM3EaCDd87kJG01a7GOWj7LV4v5yot",
      created_from: "2020-03-03T04:15:12.000000Z",
      created_to: "2022-03-06T13:34:32.000000Z",
      shop_name: "Rj2vkjikjfOo5Zy9zD8cfycxdjXF6cmwiKvevzAx7rHin0MHYFpvhqZUg2yG4Wo0L4evFZLjpsodOQD43fZ5T5bk20dIuBp2e25agSXyEGick",
      shop_id: "40f3ab70-3e8b-4265-9c7d-d67a288d4ce5",
      lower_limit_amount: 4023,
      upper_limit_amount: 7414,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      page: 873,
      per_page: 3868,
      bill_id: "ltNB5ed",
      private_money_id: "d153fbea-8674-44b1-b5b7-49135a97ff9c",
      organization_code: "",
      description: "9wlEEj2gZC8ckmFOzWRdKb11QTIHM0x5oJQ4O2Nwel4rHJTDGFvqXggC9Tcy7ogKmUw0VnsFyzfyt6Bg95FB1a7IFTBkW9tPubyeqITUoc54HWI6lY3NxA2Qq6LVyn2dOGJj5BoyL1MgjctfisL",
      created_from: "2024-03-27T07:23:33.000000Z",
      created_to: "2023-01-07T18:05:13.000000Z",
      shop_name: "o4aorO",
      shop_id: "272f828f-a7a0-4ef7-86af-8b824979cc72",
      lower_limit_amount: 2925,
      upper_limit_amount: 1053,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 0', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "9a5387ae-5073-455d-b2b6-f5c50f9210c4",
      shop_id: "f41d19fb-7d26-4d80-abfa-9dc49d937f4c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 1', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "9a5387ae-5073-455d-b2b6-f5c50f9210c4",
      shop_id: "f41d19fb-7d26-4d80-abfa-9dc49d937f4c",
      description: "nAr7NHvMDZLOk3Kn6N9IKA2DQ0UDl0RkGXqQRpkGArTGUPugetKJLdESdgB4DMlPhuAgx6J23S5a4KJH2dJnXOeAy8xYgmSSWd6nFdHza9f0TF30iljDxgSpyfoekUtY"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 2', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "9a5387ae-5073-455d-b2b6-f5c50f9210c4",
      shop_id: "f41d19fb-7d26-4d80-abfa-9dc49d937f4c",
      amount: 1581.0,
      description: "6dyRqDXbojqilSXXfgL13rI1kMYSkzLYWcqyBEPqq6jXoMPoI5dYhtAEAC8MN1MIRbysguh0xXqdkQK8VG"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 0', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "825a4ce6-af48-4f92-92de-d87acb01778b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 1', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "825a4ce6-af48-4f92-92de-d87acb01778b",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 2', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "825a4ce6-af48-4f92-92de-d87acb01778b",
      description: "lBqoPAVuBC2EUluqb81O3ZagKE8LcCa8bz2nHShe5EoHVudmx1iMacSt3whWHQ5cbR62EyfrAyRxoXmZ8au8D4esSHy55WYfHfvN0QEBe9OUmuQoNyAxdh",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 3', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "825a4ce6-af48-4f92-92de-d87acb01778b",
      amount: 2260.0,
      description: "5YfaNVM2xjqlPxxy8RqwFWTQ1hvVt9bN2zIxNZx4eE9mHPjq6XCvYjxbcuNA5AOQHru6gAXocPu4UpOUbFxl1xg8SX1voG8Gydqo4fQ7D47J36mgyKf2pLnur36TYPgxIzfeirgwWnuJKugM3OQh2JHBnxbiEM0oFGnnvKX9mW4mLerHweV6yDq",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      is_onetime: false,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      description: "MFu",
      is_onetime: true,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      issuer_shop_id: "6d9c9d8c-24ed-43b2-9001-703ddd0eae48",
      description: "Y5rxBRsFTy",
      is_onetime: false,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      created_to: "2020-03-16T19:15:17.000000Z",
      issuer_shop_id: "f502dcf6-9aee-4325-a5af-1c77ca1cba62",
      description: "d4rNZJsCq7",
      is_onetime: false,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      created_from: "2020-01-22T06:25:49.000000Z",
      created_to: "2020-10-06T06:24:16.000000Z",
      issuer_shop_id: "ba8a1508-dfb7-4061-83a0-f9726dfada77",
      description: "2NKYH12xH",
      is_onetime: true,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      expires_to: "2022-02-19T08:35:27.000000Z",
      created_from: "2021-08-15T09:13:42.000000Z",
      created_to: "2023-10-19T16:42:25.000000Z",
      issuer_shop_id: "6f3fc2c9-4477-4213-942c-62c057d20078",
      description: "vxk",
      is_onetime: true,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      expires_from: "2022-04-09T10:57:33.000000Z",
      expires_to: "2021-01-21T20:17:59.000000Z",
      created_from: "2024-01-21T15:48:46.000000Z",
      created_to: "2021-01-02T23:52:54.000000Z",
      issuer_shop_id: "7367f459-8e42-4c7d-84d1-5fe958c47652",
      description: "yVTR",
      is_onetime: true,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      organization_code: "czNdwQ9LziqjK5MdQ1lZ",
      expires_from: "2021-12-11T12:27:57.000000Z",
      expires_to: "2023-03-30T19:25:50.000000Z",
      created_from: "2022-10-18T18:39:55.000000Z",
      created_to: "2021-03-07T21:43:35.000000Z",
      issuer_shop_id: "661adf80-6e58-4a56-82b9-c0c18253251c",
      description: "2ESq",
      is_onetime: true,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      private_money_id: "932ec6c0-848e-4ed6-954b-42c077bd6eba",
      organization_code: "1GN9Jq",
      expires_from: "2022-09-08T05:18:03.000000Z",
      expires_to: "2023-08-04T01:00:24.000000Z",
      created_from: "2020-11-07T01:30:52.000000Z",
      created_to: "2023-05-08T07:12:05.000000Z",
      issuer_shop_id: "329f1bf6-2a79-439f-928a-0c903705051d",
      description: "A5j20",
      is_onetime: true,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      per_page: 6132,
      private_money_id: "14118789-fbb4-43a9-9a19-073123317c07",
      organization_code: "pnjZ8xWKeN3WKGyHXCKDfS0",
      expires_from: "2023-09-29T07:06:08.000000Z",
      expires_to: "2022-01-29T19:33:22.000000Z",
      created_from: "2023-12-09T06:55:43.000000Z",
      created_to: "2021-08-21T04:38:03.000000Z",
      issuer_shop_id: "22019b92-0fec-40f8-8af4-c98a125420c3",
      description: "8sS34enF",
      is_onetime: true,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      page: 7930,
      per_page: 841,
      private_money_id: "e3f3e62a-e5e8-41c9-8de2-12fb81470a74",
      organization_code: "E1tQOM",
      expires_from: "2023-03-26T11:24:36.000000Z",
      expires_to: "2020-03-21T15:23:58.000000Z",
      created_from: "2021-08-14T22:15:16.000000Z",
      created_to: "2021-10-15T14:33:16.000000Z",
      issuer_shop_id: "8cf982df-e1aa-450a-82d5-030cdf1dbddb",
      description: "hD0",
      is_onetime: true,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "0c559969-8af7-4312-81a2-01c5077d7bf6",
      money_amount: 2799.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 1', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "0c559969-8af7-4312-81a2-01c5077d7bf6",
      money_amount: 9718.0,
      description: "L7L6kZ3KaNub1zwaCdHgj8ik3dmsSURUNaSg6OcHEmOeQFO3Ox8qDzSQ0YVNC6SfrLsEgbwDrafzykU4qQWwEl9RBh7JkqQ2DDr8e6Qf8fK7SBxethCuCr4dB"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 2', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "0c559969-8af7-4312-81a2-01c5077d7bf6",
      money_amount: 7635.0,
      is_onetime: true,
      description: "WzD3agMTAvZtCm"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 3', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "0c559969-8af7-4312-81a2-01c5077d7bf6",
      money_amount: 4741.0,
      usage_limit: 2153,
      is_onetime: true,
      description: "HOBHoLHZ5Hyso5u9Osjia9h3ovwp1QqOYhJfTJv94bnDyHKg7jf7TRBDusrb62imeaN035TYhQYVT"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 4', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "0c559969-8af7-4312-81a2-01c5077d7bf6",
      money_amount: 8254.0,
      expires_at: "2021-06-05T15:58:48.000000Z",
      usage_limit: 1119,
      is_onetime: false,
      description: "7JBIT98Ea3vOiHnJbC3RzxMsGYTRQVbbDGQ3KFvfr7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 5', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "0c559969-8af7-4312-81a2-01c5077d7bf6",
      money_amount: 7170.0,
      point_expires_at: "2022-05-11T04:27:16.000000Z",
      expires_at: "2020-10-24T22:32:34.000000Z",
      usage_limit: 2455,
      is_onetime: false,
      description: "qfZGa8VmM7LxaafZsEiZ4h1kUtLESZUqCMHUv6WI9WlLqAjFFVtovIA3w7if4YoZJ6xmZ8N4p4uCNZaugRp11iMcrfILoN8ZP7287JaoYb8spv1FcaYx8c7c37K2BoQEomxqdvzxKVxdoit0nsRdkY0a6T9IRy95uKnYj6aDVb"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 6', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "0c559969-8af7-4312-81a2-01c5077d7bf6",
      money_amount: 8499.0,
      point_expires_in_days: 2336,
      point_expires_at: "2020-01-23T21:13:39.000000Z",
      expires_at: "2023-01-13T06:28:01.000000Z",
      usage_limit: 45,
      is_onetime: true,
      description: "Dkr4zFWttvA7t4NS9wkdOXwioDpfXuzoNbRpuKefj9znX2XonFzQcO5QEOmdgUm73I2kFchNQksZB6ByT3lVRQ7O823WFeXCsADfveWv5SetJLuZcB6tdcwibyPvTHbjOWbqqVGNOP2f7Fm"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 7', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "0c559969-8af7-4312-81a2-01c5077d7bf6",
      money_amount: 7691.0,
      bear_point_account: "287e75c0-8ee3-4e8d-a3ae-f57c1623aa16",
      point_expires_in_days: 1207,
      point_expires_at: "2022-03-03T03:45:28.000000Z",
      expires_at: "2023-12-06T02:16:58.000000Z",
      usage_limit: 6616,
      is_onetime: true,
      description: "M3Y5XPxnjFhfkfYgvABxRhjV7rXm6F6onhtgkbe1I3fnSrA"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 8', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "0c559969-8af7-4312-81a2-01c5077d7bf6",
      money_amount: 873.0,
      point_amount: 8141.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 9', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "0c559969-8af7-4312-81a2-01c5077d7bf6",
      money_amount: 2928.0,
      point_amount: 5102.0,
      description: "QgQNZWqLAFAWqZBqyjs43AAjNChMERBnJER6lOBQBwAgsTow2Z3Uka1wds9TY9Bp5VDJiBPB1XeTNJcIKtWyeNc1zzlxW2hgOK8NI225RAsUHuuLFS4058hKDGnyjbxrF6zxkmTZedVWeLbSdWlORFkWxf1fgII7vrhxHZrO"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 10', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "0c559969-8af7-4312-81a2-01c5077d7bf6",
      money_amount: 9285.0,
      point_amount: 1020.0,
      is_onetime: true,
      description: "6HNdDlfIrfFFwUdXhpSi4j72IcAx"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 11', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "0c559969-8af7-4312-81a2-01c5077d7bf6",
      money_amount: 5914.0,
      point_amount: 8116.0,
      usage_limit: 8887,
      is_onetime: true,
      description: "eIzYlwiQaQGyn4Age91Y1cWNDBnv9RrzZK5kL8kuH9QZjAoA9Wjz3xWF4fJVtnG3Avmta20vIgud6F1UgGMHbk2IRflsvwuZxk0nQmXMvg0FcWUrBHOSV7LC2s46hfsRF0YKxTClCMK7WZ9OzNLNkjfoAuPSksHUuef"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 12', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "0c559969-8af7-4312-81a2-01c5077d7bf6",
      money_amount: 2203.0,
      point_amount: 1446.0,
      expires_at: "2021-08-27T12:40:33.000000Z",
      usage_limit: 5357,
      is_onetime: true,
      description: "yTlB8Y7jnhE6v0ICVfZpB32LWZFMYYNQ77hNnDgeQkP6BrHNLW2TjgwJkClYsxYjLV6mNckmXWb6cDTOBEvT1fZYocBrtgwRLixenA1GWqf2JPqamqpbbuSj1PURjYRasH9ARntTDK9f1O2csoG3F55uy56fVMl4ovKtbbNMLWzz4xf72"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 13', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "0c559969-8af7-4312-81a2-01c5077d7bf6",
      money_amount: 3947.0,
      point_amount: 9708.0,
      point_expires_at: "2022-11-26T07:13:31.000000Z",
      expires_at: "2022-08-28T18:06:55.000000Z",
      usage_limit: 3877,
      is_onetime: true,
      description: "yikvXSu1xVqKMzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHsxk71kIOiSHcZ37iojnk7j2j33qMA4N2evwLBNS7QyCEhtgNDuAnxydB9u3o7ZMeTosoRh4S0mExQI1uCwHXvSS9xqXNJMeqv2rRxx8SeYgA5RTAZIE0d3whSKLF4xWXCgQOdSsQVPrApoltrz"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 14', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "0c559969-8af7-4312-81a2-01c5077d7bf6",
      money_amount: 5978.0,
      point_amount: 8381.0,
      point_expires_in_days: 3234,
      point_expires_at: "2021-08-28T11:13:11.000000Z",
      expires_at: "2022-05-11T05:10:00.000000Z",
      usage_limit: 2755,
      is_onetime: true,
      description: "aDUv1CsWTy6z2FdXbfXavW2Hw"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 15', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "0c559969-8af7-4312-81a2-01c5077d7bf6",
      money_amount: 7568.0,
      point_amount: 5089.0,
      bear_point_account: "8e458efe-91de-4e56-8fd6-ded7b78bb2c7",
      point_expires_in_days: 4176,
      point_expires_at: "2022-08-11T22:13:10.000000Z",
      expires_at: "2023-08-14T23:25:27.000000Z",
      usage_limit: 8958,
      is_onetime: false,
      description: "jTir1eeHpnGAvFN5uVHKI7mM3plgJR5fwzKIFQcpGZZVlRU03Fa2F6PUopGrOCi"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 16', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "0c559969-8af7-4312-81a2-01c5077d7bf6",
      point_amount: 5080.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 17', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "0c559969-8af7-4312-81a2-01c5077d7bf6",
      point_amount: 8483.0,
      description: "VQZjHwhb9lV9sTjbq8Wo22UU1er3T1gBtfr20CiDsCwyLdW5AzEeQbE5VhNxjrtNh84WLuHKWoYQpDLtJyiWbDVy6Ss7attO0KDvZ2PuoFKU33PYYZTEIyRndmm72c26Cd6B3OB7swghUIdkqUOY2HAI87h7tC8vMnTzjNmFWDzLZEPN"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 18', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "0c559969-8af7-4312-81a2-01c5077d7bf6",
      point_amount: 4256.0,
      is_onetime: true,
      description: "7HQXwymFrbXYvN3cal4RO9jT63dRDxKNVoewLoaJggIMA5wXB3CTdPu3I6Gb57N6Bfk723xgVJhWc2FLmu9RV4wTQ1eFfFoOmA6KgKFTgUMIqeaKPydQtxKkPEiJ9F7s09s2D07ZJtROtnJy"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 19', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "0c559969-8af7-4312-81a2-01c5077d7bf6",
      point_amount: 1018.0,
      usage_limit: 9142,
      is_onetime: false,
      description: "sPnpU0js5rsIZ4cWpER3UtPkG2eq1I6SZr9Xo8DUROCVDxPSk72x92MmliF75MFhbZKuKGU7dTPisUgKnCVzFujd5tp1lylHobnm6HycWppeO"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 20', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "0c559969-8af7-4312-81a2-01c5077d7bf6",
      point_amount: 7133.0,
      expires_at: "2022-06-04T15:16:23.000000Z",
      usage_limit: 3859,
      is_onetime: false,
      description: "5c4bSqVBGp3Ank6BTTvgxHzzgdLIxgPMdYrCUsTg7mFBD5JyTl3OSbQF6o9LFFmkiVCdqahnfY1HR9DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasCH56gnyuHFpFsNPJmzuH1GHYOOmiUvKwyiQYSSoPK3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 21', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "0c559969-8af7-4312-81a2-01c5077d7bf6",
      point_amount: 3592.0,
      point_expires_at: "2021-12-12T20:43:54.000000Z",
      expires_at: "2023-07-01T08:56:21.000000Z",
      usage_limit: 7002,
      is_onetime: true,
      description: "rmU0unMptspEioBBqGcJLaXcepDTPRHElLNQrvWUnk17KWAioiFIGH7shpxz5S2r82nr4Cha"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 22', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "0c559969-8af7-4312-81a2-01c5077d7bf6",
      point_amount: 3235.0,
      point_expires_in_days: 7859,
      point_expires_at: "2021-10-09T15:20:28.000000Z",
      expires_at: "2021-05-30T10:43:02.000000Z",
      usage_limit: 2714,
      is_onetime: false,
      description: "IOlQ3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 23', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "0c559969-8af7-4312-81a2-01c5077d7bf6",
      point_amount: 9496.0,
      bear_point_account: "34eae6da-7543-4461-b8ec-e55f6565865a",
      point_expires_in_days: 4222,
      point_expires_at: "2021-12-13T04:22:05.000000Z",
      expires_at: "2022-03-28T07:48:36.000000Z",
      usage_limit: 9914,
      is_onetime: false,
      description: "mAFAIeN7EOzXnRCcbLOsMiN4tjoxBAROpiRc0j39oPNkDTFwGmGihF"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new GetCheck({
      check_id: "76f6c609-4f7a-46b2-bbdc-601fe6a71ffa"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "ad7098b0-8589-4167-9ac1-af2aa6982850"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 1', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "ad7098b0-8589-4167-9ac1-af2aa6982850",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 2', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "ad7098b0-8589-4167-9ac1-af2aa6982850",
      bear_point_account: "3cc26d66-07d7-4d44-ae53-ac7f3db8f5aa",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 3', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "ad7098b0-8589-4167-9ac1-af2aa6982850",
      point_expires_in_days: 2314,
      bear_point_account: "45c0ba17-d7f0-4865-8df3-50719a631a8a",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 4', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "ad7098b0-8589-4167-9ac1-af2aa6982850",
      point_expires_at: "2020-11-21T04:59:27.000000Z",
      point_expires_in_days: 1013,
      bear_point_account: "4f151408-3dc4-48c2-9b9c-6781efd7a710",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 5', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "ad7098b0-8589-4167-9ac1-af2aa6982850",
      expires_at: "2021-11-01T08:44:22.000000Z",
      point_expires_at: "2024-03-28T07:52:21.000000Z",
      point_expires_in_days: 8198,
      bear_point_account: "3ad09d4e-6ed7-41d0-82c0-7bfbe6b8ea70",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 6', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "ad7098b0-8589-4167-9ac1-af2aa6982850",
      usage_limit: 2515,
      expires_at: "2020-09-15T17:25:20.000000Z",
      point_expires_at: "2021-05-11T07:45:14.000000Z",
      point_expires_in_days: 6226,
      bear_point_account: "360d72a7-cff4-4c65-a074-da84f3b42d26",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 7', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "ad7098b0-8589-4167-9ac1-af2aa6982850",
      is_onetime: false,
      usage_limit: 2578,
      expires_at: "2023-04-27T16:53:26.000000Z",
      point_expires_at: "2023-02-17T02:29:48.000000Z",
      point_expires_in_days: 6966,
      bear_point_account: "90acf756-34b0-493c-8903-cb2286f701d5",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 8', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "ad7098b0-8589-4167-9ac1-af2aa6982850",
      description: "1H2quyHwM52367FRSK6ZN3dPGJYhssMJ1c81K9V4u",
      is_onetime: false,
      usage_limit: 3447,
      expires_at: "2022-04-18T08:33:37.000000Z",
      point_expires_at: "2022-01-24T12:16:02.000000Z",
      point_expires_in_days: 3767,
      bear_point_account: "e1f2f846-689c-4b60-998d-24ac3a4a995c",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 9', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "ad7098b0-8589-4167-9ac1-af2aa6982850",
      point_amount: 5575.0,
      description: "MQEbIhSKLSxcJDAAH0jwIPbMhYlMMXruKsOetb8P3w3wpAlq46MRFhBa1KSFCImukjAtQPb0UOTifX7KrzTtAdseC51TTzGU05VTqLiAQDTT40IDYkIvu0sCcHMaDTHEOIiZjdOoQxmayWcgZvBQ",
      is_onetime: false,
      usage_limit: 7765,
      expires_at: "2024-01-02T06:03:23.000000Z",
      point_expires_at: "2020-06-28T23:46:44.000000Z",
      point_expires_in_days: 2604,
      bear_point_account: "9ca65ee9-643d-4248-9bf6-1a20cb39bc80",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 10', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "ad7098b0-8589-4167-9ac1-af2aa6982850",
      money_amount: 9742.0,
      point_amount: 7372.0,
      description: "f0xr0YedjAtAhk4Q5ZEYWHc6DIDKem3xaXPio",
      is_onetime: false,
      usage_limit: 7227,
      expires_at: "2020-07-23T10:39:57.000000Z",
      point_expires_at: "2020-07-02T02:49:18.000000Z",
      point_expires_in_days: 7920,
      bear_point_account: "a20db4b0-1889-4bf1-b978-6130784154e9",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCpmToken | 0', async () => {
  let status = 400;
  try {
    const response: Response<CpmToken> = await client.send(new GetCpmToken({
      cpm_token: "yrfJOMPlYYA9d24g2qlkQe"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      description: "W1v6Ot04JjRtKJ3Y50yRgOZb7LyYKRMPV8lVcOO1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      types: ["exchange_outflow", "cashback"],
      description: "P1XNaA4tMwkt9CEIs7P52Qn8Ps6rGg4gxhQEPHlDMgzo7RyqyjDQCvIVLohtP7YX7LIJvkHIDHAM5JdvPW8u4K9jehE0FIX2d1fsIJRaq4cseT3Jr8x9EZ1qV"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      is_modified: true,
      types: ["payment", "exchange_inflow", "cashback"],
      description: "a8eDKBhpNX1jWPk8Z43B0y0B9mfs2NjGqIbT9OwqnkaPpwID0eLyZpFNZ79bus52pNLLPoSL84SGwACEhVooVmB4cFvbTIGcXWAqG4BSfipEZMFGhk16I7iXigWOnUAkBWGfv1h3SdKWf7Mk6qxlTgasH11ZahWwt0KCw4FDQO05q"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      private_money_id: "7cdea4cc-02d4-45f1-bec7-1ec424873215",
      is_modified: true,
      types: ["payment", "exchange_inflow", "expire", "cashback", "topup"],
      description: "aFv4VsaDUMga8HPHLfj8VAxLQCn6DppPY7uZKs5wMf3MBYDCuFCMBOgtd28MFakoJp4sttlPyu0hLTf3LV1FvqM27O2bqybT3XFSWXNEvBDebROkI568yn"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      organization_code: "8",
      private_money_id: "51efbe83-e424-4e59-adbf-731bc32e71e4",
      is_modified: false,
      types: ["payment", "exchange_outflow"],
      description: "GtyZiVBFtaHsVEu5jHLt1IIKsQ450xUM6O5hfI4vi32RsgmtpDzruBR2bpCJbWCsF1XOMwOMfbCbRi8MeoObjQBbD5vivOmPF0WWyAe43BTjYiVtdGDmgs4Vk2VUx2tI5N4bIOpNtWwRJ7taFGOOZNR9womkOYYXss1h0acoAUmABE9DWtANH45sfx8Sg9q1O"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      transaction_id: "2IQSAJ6",
      organization_code: "-YolA58m-Vc-996y5l-456i9u3-B--Y-",
      private_money_id: "8d7c5ca2-1c5b-49b4-a9fd-e6608c86a76e",
      is_modified: true,
      types: ["exchange_outflow", "expire", "payment"],
      description: "JwtxMbsrynFzleqVzZvPQrwaZ5xfzumz05DAlrcpN"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      terminal_id: "127e7540-96e5-4f7a-b8dc-87d48d84ec94",
      transaction_id: "usjLCX",
      organization_code: "49qc-l--BI-H6-GT9-L",
      private_money_id: "250f2664-b994-46e1-9663-b4a682ae5034",
      is_modified: true,
      types: ["topup", "payment", "exchange_outflow"],
      description: "wC2bbOKrqEv"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      customer_name: "HSmLf6gZqSXb2Lr55RtyiRtGJ1HUxolj1KPz6vAaVd6Sg4zOt2LPb0nLBvCfu5QWsdUnRrH9KHVuXFGKt4lw9lRVMCAhIxweHf4mhVFw56RKDemCYdfHK",
      terminal_id: "554841a2-5c5d-40f9-9cb6-edbb11405deb",
      transaction_id: "RZ",
      organization_code: "-S",
      private_money_id: "a189e694-0fe7-4bca-82be-412da43728cc",
      is_modified: false,
      types: ["exchange_inflow", "cashback", "exchange_outflow", "expire", "payment"],
      description: "iVmOaSDg31Umvi1k0xZepHVlU5UCBk1mC260SZIPf7lUxpBEwOCUnBV1wl8i3xQfqNGTjhBSpAIG2GVjRLCF7S26"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      customer_id: "740986f9-9270-4fd4-ba4d-1f3b7366d47d",
      customer_name: "xe5LQXN3tfMMeaiTEdRlgPRLO6iu4xB9p9hHVjuFskSUixLpvflY8MFYZJvlfPZ9XRs2Dj",
      terminal_id: "33d7d9bc-ca3c-4085-9565-c396835f9116",
      transaction_id: "8FZcru468",
      organization_code: "436qXf",
      private_money_id: "b827d131-f8e8-44ac-977f-3ab363c948a2",
      is_modified: true,
      types: ["exchange_inflow", "exchange_outflow", "payment", "cashback"],
      description: "pn04JUSx27eVHz2wOx9gOffBCzdPD5lY5ruzs73QnlHzwGBVLp2Vmg3eprOU7ktZcHWsZTpEtZX9770nlSO8H2DCl6imPJgn2XjYsZUpQvLebh65Hdtxmvs4SwxRthVVayjO1th3s3e6fayZ2E32vm3RMvvWttu1PJb3d04IfskzbRh2KXD"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      shop_id: "14db71eb-d419-4c4a-87f1-7879db1dae31",
      customer_id: "7508f855-4d79-48d0-9202-02e1456064c7",
      customer_name: "VkyMSdmemZcovbEUc9TiM3DTSa7pJlo8JS6mIVfCl8O6XTpGUPEJOaNnRanlNyuKHWuXq7zEzVgAAIhzrVmMQ7zQf4j1Xlnx61iQEXBdwXQXBx9CjvSgZke3VuPIIBeUSxLQqoj9SXP9EgDJcoagTJNb42JvVKNsj3zA7Dw0uibv6O0nFaLFwVLIZnC6rDyYuuG1XnlSI",
      terminal_id: "947dcad6-b494-4d8e-a186-59bba1e99598",
      transaction_id: "CTCoBzc3Po",
      organization_code: "4--",
      private_money_id: "f12b7a31-7c67-44b6-8061-dfdb0ed7789e",
      is_modified: true,
      types: ["exchange_inflow", "cashback", "topup", "expire", "payment", "exchange_outflow"],
      description: "SVes0LvRpIOKLgAa2m76DTKceEBbKe1QbzWrTYvHigdBYvKVDdotVdsHD1HarFGRZ0Q28LywVGUz2sIRxtNbAYMzHePlwRHJLPebYCA3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      per_page: 5618,
      shop_id: "93cc8961-0be2-42f0-a8fc-6d79e7879700",
      customer_id: "a0cd1f40-75ea-47d8-9033-dca08d56be14",
      customer_name: "xuhhy9uGRsNNOdzmZ5nbPQzPRirLmp7HiQajpl09d6QIiaL",
      terminal_id: "2d0db3db-49b5-44e3-b49e-6b3a1ad5452b",
      transaction_id: "G",
      organization_code: "6-JN0rZ1",
      private_money_id: "159e73eb-0f0e-4777-9f43-0fe93746b7a8",
      is_modified: true,
      types: ["cashback", "topup"],
      description: "KrJ8u3JtJHw13BJLqURa9CDG8z1r52NxmvSo3IMgKOG9RqgqLtsxscDVj4qDxwlIsjYdDsgNzWfMVY"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      page: 6534,
      per_page: 1781,
      shop_id: "19e2330f-35a5-4b11-95a1-7846a4aa801b",
      customer_id: "8ef4fe9c-f14f-409f-bed2-e3692e979fa1",
      customer_name: "KaN1GSBkTmsnETZgON7wI25XD4LDGgtc1eHQx1a38fcy9G2ru7CIugZBUKc64A8KJDFHDE0sPhVLSmxr0FU3DnW6KqsDEeelMkJvsg1mQveiZolVhKjCQVZwzstz19XaUt7HUg2vBtQ3icUlEOMImvGy37aG3VpRlqKVbLVJ59qzi8HFxZtC5ypm8TU2Y6m10oaz",
      terminal_id: "edc2ff9c-ab4f-4860-a9ee-af5313107cc4",
      transaction_id: "VBA",
      organization_code: "-i2w",
      private_money_id: "2a08cf43-9371-4f9d-9738-2e20581ed95d",
      is_modified: false,
      types: ["exchange_outflow", "expire", "topup", "payment"],
      description: "qfNGAkbzmAIScfq8JbwsUjFhr3NwoEyag2SfuJiolnAr0O5BazmKqHUlvI3TLRDU2wR06BrqE4xR4GA8B6QEvmEtQTqfIDfhF08aWAgYKgMRg4eijui0x4AzukqXii06wz9NdLnaFp0d8NnYZXWwwP"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      to: "2021-07-02T12:39:43.000000Z",
      page: 3516,
      per_page: 7278,
      shop_id: "af783fd9-07c7-4624-95c5-4b56bf820e7e",
      customer_id: "b29580f2-dd5b-474f-8d34-162f5f1e7464",
      customer_name: "j0diMGxwkBMFBNKhTrrGkGVnz7dW1L5JRcqWGZoB7J2SLBuVTFPFKYeglUQAESlFenRvUgW2C0Pk55puUaBmR66mDvQf3SzEAz6sFhOXUyleHUBygYLLJFfbbjnOxn1Ii4QyBabDj1sJ7k6dP6L13ja9VovumOjMgFfs83kBzSot4H9G2QRAYPymeRfFOHsPVjb9UCbPcYx5YXiYOW0oa5SUOR88F7Ubd6EIlmfbIWBj",
      terminal_id: "a54a3b85-64bf-4571-b1be-520303da5e2c",
      transaction_id: "3aM3MFSn6",
      organization_code: "X-3---5adV-8-5EhX-5G6e0W--",
      private_money_id: "48a17295-3b32-420e-9846-9687732fbdd3",
      is_modified: true,
      types: ["payment"],
      description: "c6v3uyZaCEMZ2Ju8UbXHSU9E0Qlg3gebvAwjzG8UYapgA4DXNtjsg9PgQkXqYPn4dGIxCAVXu8wP"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      from: "2021-08-09T05:40:52.000000Z",
      to: "2022-02-04T13:27:41.000000Z",
      page: 3166,
      per_page: 185,
      shop_id: "5e7a6a52-e2af-48e0-9839-f147fe8d0d77",
      customer_id: "168946bc-2354-46ed-b145-f1e17b934e40",
      customer_name: "DH0runisLVA8D7RtvLwRN8QmXijHIyMGxrgTxrmP2c2b7AqdqrRaU4tsNqOUthYSxSa5qYfKcdpEzIZoGgQ8JT7nM2XSRS8qzeJVaY",
      terminal_id: "1e976d00-3695-4575-bc61-411cfc392bbb",
      transaction_id: "2",
      organization_code: "8h----6-SEv--I7f5-U2--f",
      private_money_id: "360352e4-81e0-4d47-811b-6debf0e91354",
      is_modified: false,
      types: ["cashback"],
      description: "ZEgx5wET5OvQdZofRUOUAciXVcpzKCMcrOD6Emk2wkp2iXzqZDQWG9JIPYO9QhKjYAAaW"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransaction({
      shop_id: "7d0c35ee-368e-4367-b1b9-7450d58a908a",
      customer_id: "03b55bbd-4b51-4d0a-a651-09f86bc0644b",
      private_money_id: "3e4e52d2-8a22-4bf6-858b-12737d17e30e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransaction({
      shop_id: "7d0c35ee-368e-4367-b1b9-7450d58a908a",
      customer_id: "03b55bbd-4b51-4d0a-a651-09f86bc0644b",
      private_money_id: "3e4e52d2-8a22-4bf6-858b-12737d17e30e",
      description: "f3mWAEHwNafuFelOU7xCAyi0eUz4xXH5OLhVoB1lIuiOfxpiSD0ualUMr1aiXbRr0Yt6Ont0eqhymEV4KDx3FmD9kbbli1vOnH69EFivIjA6JEHCCuKlnfNVTWFTkh4YZxFDhr8QjYlB42oGAhylpmFOwCdKPABZdrgh98"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransaction({
      shop_id: "7d0c35ee-368e-4367-b1b9-7450d58a908a",
      customer_id: "03b55bbd-4b51-4d0a-a651-09f86bc0644b",
      private_money_id: "3e4e52d2-8a22-4bf6-858b-12737d17e30e",
      point_expires_at: "2020-12-19T08:10:59.000000Z",
      description: "RslDBuoJSIFUrTRne91u8KmONYXCce6NgXmM6SU8mT9N7YdoyhvIOK96oQgvpt3OE4bGWfPwqWxwC3DU0ZYNIFrYHkTuOzrywGRNkAeSHinr7X7r9y8K62vZdczxzKDF7OzztIRdIBCYTSHrtKwDRbFJx9qY9kB8kVDqJMjy6r"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransaction({
      shop_id: "7d0c35ee-368e-4367-b1b9-7450d58a908a",
      customer_id: "03b55bbd-4b51-4d0a-a651-09f86bc0644b",
      private_money_id: "3e4e52d2-8a22-4bf6-858b-12737d17e30e",
      point_amount: 7732,
      point_expires_at: "2020-11-06T18:59:57.000000Z",
      description: "uMJ3q8UHdGY9c6av2inoQmoszzzj7gjncZRjG49ZyE9dB8fCGfTM2Oyolj4kfEe2uvMtiKxUivt9MIJ97msI3tBe6ti0SO07EXHC5hQ61pWDcVyEH0QvPCR5IiYZhX71qxxCDFjWtGssb86D9XZfo8j2fPJCGzVYdohDRxcepsSsd"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransaction({
      shop_id: "7d0c35ee-368e-4367-b1b9-7450d58a908a",
      customer_id: "03b55bbd-4b51-4d0a-a651-09f86bc0644b",
      private_money_id: "3e4e52d2-8a22-4bf6-858b-12737d17e30e",
      money_amount: 3726,
      point_amount: 4261,
      point_expires_at: "2022-09-28T03:30:59.000000Z",
      description: "EcH6zAIM8ju98Xf3eDqYA5vYg7TRPpd99WNI7yrXSKnnTIb76zTEtm8AaIiuGx9L9HalOMU5vigXX7Icn5jXA5QxJPbbGkUILhTXtRtmknLVk7hQOvzRC9zFhAU2LnJOGL09rr"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      per_page: 919
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      prev_page_cursor_id: "3580c4d2-028a-4796-9842-f025a2f41ce1",
      per_page: 963
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      next_page_cursor_id: "0706164f-d02d-459a-a482-fb8edacd3057",
      prev_page_cursor_id: "6784f557-b9ab-4c04-9228-6f478252a04a",
      per_page: 884
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      to: "2023-06-26T08:22:04.000000Z",
      next_page_cursor_id: "270f32a0-4407-4887-8b29-f1417229627e",
      prev_page_cursor_id: "dfdbdc26-3ff2-4e67-99a3-7ac95ca97e26",
      per_page: 607
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      from: "2023-04-28T23:57:41.000000Z",
      to: "2020-06-25T12:11:33.000000Z",
      next_page_cursor_id: "e871a3ed-bacd-43d6-a416-ec6c2dc4d301",
      prev_page_cursor_id: "e1dcdf9f-e897-43b3-b13e-1dece65c4803",
      per_page: 792
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      types: ["expire", "payment"],
      from: "2022-07-22T05:53:04.000000Z",
      to: "2023-05-16T12:44:52.000000Z",
      next_page_cursor_id: "c512e76c-40fc-4937-9a21-5cfed5a9d92d",
      prev_page_cursor_id: "d07280a2-3f55-40c8-a824-c11168220404",
      per_page: 379
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      is_modified: false,
      types: ["expire", "exchange_outflow", "exchange_inflow", "topup", "cashback"],
      from: "2023-05-01T01:22:20.000000Z",
      to: "2023-11-10T11:11:51.000000Z",
      next_page_cursor_id: "3853e632-aa6e-4db2-b4d1-473bda0390e6",
      prev_page_cursor_id: "fdb745ee-b8a7-4f7b-808d-68d814ade819",
      per_page: 158
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      transaction_id: "078",
      is_modified: true,
      types: ["payment", "exchange_inflow", "exchange_outflow", "expire", "cashback", "topup"],
      from: "2022-02-20T01:58:35.000000Z",
      to: "2023-12-25T17:38:13.000000Z",
      next_page_cursor_id: "fde713fb-cbbc-4784-9bc9-d3ca0deb4372",
      prev_page_cursor_id: "80c15927-f442-4824-84b5-3f441dff992f",
      per_page: 568
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      description: "pKjeG53Xpalhw5eupOSaoLetupiLJGKA08kULtDXm7mGq20CccqYOFtqhMLy1fSrOZfn",
      transaction_id: "mwT",
      is_modified: false,
      types: ["cashback", "exchange_inflow", "exchange_outflow"],
      from: "2022-07-17T16:43:00.000000Z",
      to: "2022-03-03T09:05:02.000000Z",
      next_page_cursor_id: "a2ae1316-ff74-48cf-8672-9863aefcb860",
      prev_page_cursor_id: "22dfc944-ae9e-495e-bb06-d74c482a7837",
      per_page: 44
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      customer_name: "osyloW0gLyNig5qU771SYwG9bLFfHIbs98VpOgmc8pS7WZiumuB2TNJcJGvSmksA1MuW1A79SIV4QucaCTIuwp4PaSBE0QhobjzNQVW3hP0Ve0rN3Em7q1SjNjatjjDZX7RIKgDX3b9oA142xLkpis0qy5MfISyoLqEQKhMnAGBrL3KeptreugpuZPDhn3kvKQdinTisU7JGahMN0pspm5VBpWaMfH3OlTb5uoxVylmhf3",
      description: "SdF0EHZGgpE19g89rUgV81h6fR4XXAReVSL8MjPf2nDJncUb7prKqWXHoSFTkZLdy8B9WWqNrXVXI1wRTqwqzVsahBGWwps3iARDJTRZkOOEQFC19Wtss23YjQBhHozeYJjV02y90GWowMI3ASCsApxBJptaJJRDQ6YTYkiFEIISprQ3cmpI6bh8YrVsWGSghDCw1U",
      transaction_id: "nnaTSFcz",
      is_modified: true,
      types: ["exchange_outflow", "expire", "cashback"],
      from: "2021-08-01T03:32:16.000000Z",
      to: "2020-05-21T08:24:35.000000Z",
      next_page_cursor_id: "152b45f3-0798-4c98-abe1-66f461698421",
      prev_page_cursor_id: "46be782a-4282-4ce7-9408-245376dff141",
      per_page: 108
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      customer_id: "8dab7933-e2e1-4c88-b889-cc1f27f5c4ad",
      customer_name: "TcT02JvhzyAvEGRwH1gqt79bzapcrIrLu",
      description: "lrAgRY4qmYCDpX8Ny7Ex4zLyYmVuuwRZjnfSOf90ILh1FnEv5pCv1",
      transaction_id: "tIL",
      is_modified: false,
      types: ["exchange_inflow", "expire", "payment", "cashback", "exchange_outflow", "topup"],
      from: "2023-04-20T08:04:40.000000Z",
      to: "2020-03-24T09:16:50.000000Z",
      next_page_cursor_id: "c8061d81-5ae3-414e-ac03-e37c86770697",
      prev_page_cursor_id: "1c8ce978-6707-4407-a3e2-efb14a1ffd27",
      per_page: 418
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      terminal_id: "488b608e-a077-4d10-9530-5c5e3fc35406",
      customer_id: "a2b98866-9e3b-44c1-980d-9143495de810",
      customer_name: "RcSE6z5QHSLVITcWyXkWwNeThLpKI1N6RIMY7t0u9TuR54ZsbCHGDImjW34z4jE8W9hhkpYWEzZLn5uyvbNkfkqdGOYba42tK1ETZVrimXQx2toEzw7Z1gM6fgx4uEjyIUvTVKqmlOa23",
      description: "scUcryj4GBWTbDzAVeKXVT",
      transaction_id: "NRuvNAUp6l",
      is_modified: false,
      types: ["exchange_outflow", "exchange_inflow", "expire", "payment", "topup"],
      from: "2020-04-23T07:49:21.000000Z",
      to: "2020-01-19T16:53:33.000000Z",
      next_page_cursor_id: "360cba0d-8c75-40e2-9d17-3d6a69d725d1",
      prev_page_cursor_id: "2af6c1b0-51b3-48ec-8452-6e0e9b19ab75",
      per_page: 47
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      shop_id: "8496382f-2afc-4db1-a4c8-b779b379e79a",
      terminal_id: "ada577f0-d92d-493a-8504-9b75e7f44626",
      customer_id: "fb5ee814-1ab4-4570-b152-63dc0f0215eb",
      customer_name: "KXyywxfAsvQQw8eNXwtPfKAW4UwDxtqXzHNdytk1inQrWiktMK0FHLyLnv",
      description: "dFf0Y1JODoBhEEJFs7RURiJHf6mnglgKA3t551AWYy2EKxgIvudVQKM3ivlyVYA6fe68jtm2G7nC3SW8MPeFK",
      transaction_id: "YT7eE",
      is_modified: false,
      types: ["exchange_inflow", "payment", "exchange_outflow", "topup", "expire"],
      from: "2022-09-01T04:47:50.000000Z",
      to: "2022-09-06T07:46:16.000000Z",
      next_page_cursor_id: "bc6b75de-2451-43aa-864b-c9c43d6da9c9",
      prev_page_cursor_id: "f422e10d-c411-428c-8ced-8356f46522b0",
      per_page: 146
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      organization_code: "yarfQj--Brx71-H5nVNeMB0",
      shop_id: "4ed094e2-2037-4eb6-84b1-c7c9fec5220a",
      terminal_id: "d1ad1ad7-9fc0-49d3-b7fa-51d456ab8933",
      customer_id: "bdbd8b5e-828a-41a2-88a6-ad7e4af6e197",
      customer_name: "mF3XMzgKDKO5o6UqQsbMF41dYUnemzRdROKbGph7rDrumGN6tQ3vZwFKRF7w7plclcWB9bNRwQ0LABzLS5AginlSJbgCOpN21EzYv53e8C68gL6nh3hboA1VaXQqYz47H8v5OYX2Bb7kgjpYtpWxkJ26TN1VktFjJy7P4SbKkoz4u4vqNtkYjPXUyJ1V0r5CHRNT2ecfLdc33OSn94wpSCBGnb27KI1Ko9Ro9P2UOPH",
      description: "KcZd7kJ0a09BOfpTrIxahzBDxgf0eAPjokEVHRFLghiMn2sJjV2bGnLruRc9c27Gpu7iWb08UbIXfazIWogjdxJNEfM7ZphEzx62f8FNzaDel7ro4JT6XY3Y33ek4ahxmsrZJPb",
      transaction_id: "B1K9ZL",
      is_modified: true,
      types: ["exchange_outflow", "exchange_inflow", "topup"],
      from: "2020-03-16T17:05:11.000000Z",
      to: "2021-03-24T13:43:28.000000Z",
      next_page_cursor_id: "5df4745f-a378-4b8d-b939-b630b229ff44",
      prev_page_cursor_id: "b58a3135-7c9d-4ae7-85ef-09b4a954927e",
      per_page: 613
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 15', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      private_money_id: "5287b28d-fe04-4e01-82cc-77bf308ad1e4",
      organization_code: "yF-gp3cx9F7-LNFt2g-WsHJ",
      shop_id: "b93c833d-dad0-487b-80a9-9c3a3b0ee3b8",
      terminal_id: "70df68c8-de8a-46ee-a474-d14ce55a324b",
      customer_id: "71153ee7-b6bb-4a0e-8ec6-502675025857",
      customer_name: "IeB413C8zcpa0a0ipuLt3IQKQQHb6fikVg8U3XBigR3jya01cL7edhmrVi5N",
      description: "IsblUeDquiQL8YRreNoLAWMJdywYSICtYcbHl2kt",
      transaction_id: "16gpa54",
      is_modified: false,
      types: ["topup"],
      from: "2020-03-28T03:49:02.000000Z",
      to: "2020-03-04T21:55:30.000000Z",
      next_page_cursor_id: "87e37bcf-08da-4963-92c2-d183eeb3ebe2",
      prev_page_cursor_id: "043f9ae5-69ea-4760-9a53-f7b996f86977",
      per_page: 94
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "bc169a64-af6e-482b-aea5-644e3a99af4b",
      customer_id: "3b371ec9-b97b-494e-9cc9-273769a54af6",
      private_money_id: "36e755ea-965c-402b-800f-a7a465758538"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "bc169a64-af6e-482b-aea5-644e3a99af4b",
      customer_id: "3b371ec9-b97b-494e-9cc9-273769a54af6",
      private_money_id: "36e755ea-965c-402b-800f-a7a465758538",
      request_id: "02df57f1-b0fc-4ac5-848c-010637a40950"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "bc169a64-af6e-482b-aea5-644e3a99af4b",
      customer_id: "3b371ec9-b97b-494e-9cc9-273769a54af6",
      private_money_id: "36e755ea-965c-402b-800f-a7a465758538",
      metadata: "{\"key\":\"value\"}",
      request_id: "c1279baf-daf3-4c64-8ab8-a90ede8edd4a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "bc169a64-af6e-482b-aea5-644e3a99af4b",
      customer_id: "3b371ec9-b97b-494e-9cc9-273769a54af6",
      private_money_id: "36e755ea-965c-402b-800f-a7a465758538",
      description: "L6K4fbUtzmymsdzvhUXmrc210VozYCz4wR9Gfv1ooHMcqzJF0zVNZ8zHF5mnetJol0g7uhhZVwBBSB9NQuG198o4cE8ye8xiCptr8X3OQSs9",
      metadata: "{\"key\":\"value\"}",
      request_id: "5d68bce3-c8a2-4a9f-a38f-cef62f90ddcd"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "bc169a64-af6e-482b-aea5-644e3a99af4b",
      customer_id: "3b371ec9-b97b-494e-9cc9-273769a54af6",
      private_money_id: "36e755ea-965c-402b-800f-a7a465758538",
      point_expires_at: "2022-09-28T18:13:42.000000Z",
      description: "MzYpfEHHq4AVCPhpFJVl2NE9OohrFLhvA",
      metadata: "{\"key\":\"value\"}",
      request_id: "47821942-0474-4d1b-b991-6e32cfb01dd9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 5', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "bc169a64-af6e-482b-aea5-644e3a99af4b",
      customer_id: "3b371ec9-b97b-494e-9cc9-273769a54af6",
      private_money_id: "36e755ea-965c-402b-800f-a7a465758538",
      point_amount: 9601,
      point_expires_at: "2021-11-14T01:54:50.000000Z",
      description: "eNGkeRyZCxDwnyuzPdWfYw482S6oHFsZh9ksnqTSKQYaLtgBF21Mao0iMx72McbAtuQfbwPK5Ol2Udeu5ClBnNsqGtwvAjO8SQrjpTlUKU7ix6vD3BTnNcaIv4Cy2qiGNeSDJueWNAF2iLh",
      metadata: "{\"key\":\"value\"}",
      request_id: "8c138815-f8eb-46c2-8330-e7b84bbc97ed"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 6', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "bc169a64-af6e-482b-aea5-644e3a99af4b",
      customer_id: "3b371ec9-b97b-494e-9cc9-273769a54af6",
      private_money_id: "36e755ea-965c-402b-800f-a7a465758538",
      money_amount: 6798,
      point_amount: 4376,
      point_expires_at: "2023-08-08T19:37:37.000000Z",
      description: "SEw4Yfnz5e3bjXKldANGzSZe49qKV1rholLnfHAgpNJKDDEjuzSmETPUL6TDRxNmjKWPDEzen9VEh9JKwUlzsxb9tQKSZdMATJHlP3s2aiyvcn73",
      metadata: "{\"key\":\"value\"}",
      request_id: "1b486310-689e-468e-9532-0fcb4f82b93d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 7', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "bc169a64-af6e-482b-aea5-644e3a99af4b",
      customer_id: "3b371ec9-b97b-494e-9cc9-273769a54af6",
      private_money_id: "36e755ea-965c-402b-800f-a7a465758538",
      bear_point_shop_id: "3eccd5d5-3c94-4859-8f70-d276e3788bf0",
      money_amount: 3072,
      point_amount: 4410,
      point_expires_at: "2021-08-03T13:36:10.000000Z",
      description: "2DUcmsWBTf3SfgLVNlOhNoRUioebBno3",
      metadata: "{\"key\":\"value\"}",
      request_id: "abcb0548-73da-43af-8e9d-cd04c2a3ffe8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransactionWithCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransactionWithCheck({
      check_id: "7a2c959c-e505-4bee-b9ce-985a2d126a35",
      customer_id: "4d01fb19-1f51-459b-bb37-101654160837"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransactionWithCheck | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransactionWithCheck({
      check_id: "7a2c959c-e505-4bee-b9ce-985a2d126a35",
      customer_id: "4d01fb19-1f51-459b-bb37-101654160837",
      request_id: "403a998f-a5d5-40ab-9830-bbb458a827e1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "04fce82c-e9de-4890-a52d-fda939f20a17",
      customer_id: "d11a71cc-4111-4273-8116-d33dd34cd134",
      private_money_id: "b297bce8-5a6d-44f9-b4c3-6eb2026b58df",
      amount: 160,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "04fce82c-e9de-4890-a52d-fda939f20a17",
      customer_id: "d11a71cc-4111-4273-8116-d33dd34cd134",
      private_money_id: "b297bce8-5a6d-44f9-b4c3-6eb2026b58df",
      amount: 160,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "aa9eba9a-af06-4238-893b-50a8e0abd640"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "04fce82c-e9de-4890-a52d-fda939f20a17",
      customer_id: "d11a71cc-4111-4273-8116-d33dd34cd134",
      private_money_id: "b297bce8-5a6d-44f9-b4c3-6eb2026b58df",
      amount: 160,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      metadata: "{\"key\":\"value\"}",
      request_id: "a31802d7-f60d-4209-ae01-b64337f29b9a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "04fce82c-e9de-4890-a52d-fda939f20a17",
      customer_id: "d11a71cc-4111-4273-8116-d33dd34cd134",
      private_money_id: "b297bce8-5a6d-44f9-b4c3-6eb2026b58df",
      amount: 160,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      description: "fz2leovb1R7O6QOgboW2zpcaLxa2QZma6CRo8nyJO9Y3f9djMgk8QSZwJ1udEIb7zDJ6KZTEk0mDRGqd8jGihF2zo2GN3QYDG6CZS1PVe5LZzi2NmWBluHrzflOyt",
      metadata: "{\"key\":\"value\"}",
      request_id: "d47b42ce-bfdc-401f-bc18-ba5deed634e4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateCpmTransaction({
      cpm_token: "3ROmH9nMfAHnX3LOs6P3dx",
      shop_id: "d15140cc-1a68-49c4-a1ea-7e8a71ca7b90",
      amount: 6258.0,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateCpmTransaction({
      cpm_token: "3ROmH9nMfAHnX3LOs6P3dx",
      shop_id: "d15140cc-1a68-49c4-a1ea-7e8a71ca7b90",
      amount: 6258.0,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "e0f8fc21-5d34-48af-838c-f146147b01bc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateCpmTransaction({
      cpm_token: "3ROmH9nMfAHnX3LOs6P3dx",
      shop_id: "d15140cc-1a68-49c4-a1ea-7e8a71ca7b90",
      amount: 6258.0,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      metadata: "{\"key\":\"value\"}",
      request_id: "3cf72fc5-ee7c-45de-9653-6d578d29a4ca"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateCpmTransaction({
      cpm_token: "3ROmH9nMfAHnX3LOs6P3dx",
      shop_id: "d15140cc-1a68-49c4-a1ea-7e8a71ca7b90",
      amount: 6258.0,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      description: "nPC",
      metadata: "{\"key\":\"value\"}",
      request_id: "54f6eb4c-7455-498b-b8c7-991f6258a2be"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransferTransaction({
      sender_id: "9f28baab-ebbc-46bb-8ce0-6cf4a2eb2a5c",
      receiver_id: "29a294f2-5267-4f6f-a75b-b0906c5b6e68",
      private_money_id: "3790ff07-84d3-40b3-b050-703c0b800fa3",
      amount: 1853.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransferTransaction({
      sender_id: "9f28baab-ebbc-46bb-8ce0-6cf4a2eb2a5c",
      receiver_id: "29a294f2-5267-4f6f-a75b-b0906c5b6e68",
      private_money_id: "3790ff07-84d3-40b3-b050-703c0b800fa3",
      amount: 1853.0,
      request_id: "0b630ec8-8345-4b35-b7b4-483c3a769fe5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransferTransaction({
      sender_id: "9f28baab-ebbc-46bb-8ce0-6cf4a2eb2a5c",
      receiver_id: "29a294f2-5267-4f6f-a75b-b0906c5b6e68",
      private_money_id: "3790ff07-84d3-40b3-b050-703c0b800fa3",
      amount: 1853.0,
      description: "eX1ksH4R2MgyW6z149JBRZmQUgzecqWdDVSs",
      request_id: "bbd0f0f4-faef-42c5-b47b-28d03521db56"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransferTransaction({
      sender_id: "9f28baab-ebbc-46bb-8ce0-6cf4a2eb2a5c",
      receiver_id: "29a294f2-5267-4f6f-a75b-b0906c5b6e68",
      private_money_id: "3790ff07-84d3-40b3-b050-703c0b800fa3",
      amount: 1853.0,
      metadata: "{\"key\":\"value\"}",
      description: "tA6l7WDayqQLAKXyhWYdlIHfSBBKI1KQl4cK6HLesoN7AsxjaX4bkzoW5SSzFCKjOEE829PJZq44v95w5OTBAsM3ixdWcd35lzG",
      request_id: "707c49e7-e3b9-41eb-b883-167aa33bae58"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateExchangeTransaction({
      user_id: "f935e499-c935-4b01-a726-f028e6bd6e2e",
      sender_private_money_id: "dcee76da-0e8b-4878-a8b6-6d72ac16f23d",
      receiver_private_money_id: "f277ab0d-7add-49e4-ba29-8fdac6f3b7c0",
      amount: 2875
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateExchangeTransaction({
      user_id: "f935e499-c935-4b01-a726-f028e6bd6e2e",
      sender_private_money_id: "dcee76da-0e8b-4878-a8b6-6d72ac16f23d",
      receiver_private_money_id: "f277ab0d-7add-49e4-ba29-8fdac6f3b7c0",
      amount: 2875,
      request_id: "7948078e-5e36-4bff-abcb-58690634d4f7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateExchangeTransaction({
      user_id: "f935e499-c935-4b01-a726-f028e6bd6e2e",
      sender_private_money_id: "dcee76da-0e8b-4878-a8b6-6d72ac16f23d",
      receiver_private_money_id: "f277ab0d-7add-49e4-ba29-8fdac6f3b7c0",
      amount: 2875,
      description: "0EKpO7FL05ARSiRG2UPRPUxcw9rvtxOfCP20hUm1E2Nlz5V1CO5TSFy",
      request_id: "364edb23-5e81-4a4e-9c74-a86fca208929"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check BulkCreateTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new BulkCreateTransaction({
      name: "qI6bCrDgQTiBz8hop",
      content: "Wuv10d",
      request_id: "zqDmxXKufPIjjJpzSXKPSRMVYMVxniANdM0y"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check BulkCreateTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new BulkCreateTransaction({
      name: "qI6bCrDgQTiBz8hop",
      content: "Wuv10d",
      request_id: "zqDmxXKufPIjjJpzSXKPSRMVYMVxniANdM0y",
      private_money_id: "b197b1f9-901d-4a36-b372-eb1f540fbc52"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check BulkCreateTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new BulkCreateTransaction({
      name: "qI6bCrDgQTiBz8hop",
      content: "Wuv10d",
      request_id: "zqDmxXKufPIjjJpzSXKPSRMVYMVxniANdM0y",
      description: "ZNC9bYJUFWp4SJDd9Vw0ghvUwHY4GPMgqa4p3NBV6jnDEmNinmBAkCQlWqd4V",
      private_money_id: "d8a356a7-f6e7-4af4-a0e1-d1d40a999d97"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new GetTransaction({
      transaction_id: "ba270637-518a-400b-aebc-c105421946f8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new RefundTransaction({
      transaction_id: "0f9fca39-628f-4b18-a4ee-5fc35929c428"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new RefundTransaction({
      transaction_id: "0f9fca39-628f-4b18-a4ee-5fc35929c428",
      returning_point_expires_at: "2022-06-13T21:29:55.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new RefundTransaction({
      transaction_id: "0f9fca39-628f-4b18-a4ee-5fc35929c428",
      description: "GOYqsqY3PQB7j8S1LcJM99jV6h5DQ4TL9sXbFiutZ4wFjGxBLsRpox6uXLc6he8K",
      returning_point_expires_at: "2023-03-08T05:24:29.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetTransactionByRequestId | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new GetTransactionByRequestId({
      request_id: "51dd435c-73b6-4fc6-aa17-75aab3d6833a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new CreateExternalTransaction({
      shop_id: "a098b950-7461-4bbb-bb40-9c5a16b099b8",
      customer_id: "9ea97398-30c9-4d8b-b60a-36c1a04e5df8",
      private_money_id: "742ee5e9-b979-4ebb-8d62-774943935f55",
      amount: 1770,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new CreateExternalTransaction({
      shop_id: "a098b950-7461-4bbb-bb40-9c5a16b099b8",
      customer_id: "9ea97398-30c9-4d8b-b60a-36c1a04e5df8",
      private_money_id: "742ee5e9-b979-4ebb-8d62-774943935f55",
      amount: 1770,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "e76494df-ae26-4c4a-9bbc-97eccb08a75b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new CreateExternalTransaction({
      shop_id: "a098b950-7461-4bbb-bb40-9c5a16b099b8",
      customer_id: "9ea97398-30c9-4d8b-b60a-36c1a04e5df8",
      private_money_id: "742ee5e9-b979-4ebb-8d62-774943935f55",
      amount: 1770,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      metadata: "{\"key\":\"value\"}",
      request_id: "0ed68ecd-85d3-4714-bcd1-033669dd0e2b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new CreateExternalTransaction({
      shop_id: "a098b950-7461-4bbb-bb40-9c5a16b099b8",
      customer_id: "9ea97398-30c9-4d8b-b60a-36c1a04e5df8",
      private_money_id: "742ee5e9-b979-4ebb-8d62-774943935f55",
      amount: 1770,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      description: "V8dRYSFDiggsas4Nm4Pbqn0MLycuAIyd8Tc91YrDumA0BEPaxu5hz8quH88gYqQC45YQseyms9QyHVorEq6zLZyg3cEPs9bN7e1DJRmWCvXV5f7NFxRTTWOKh4cp2t8rtdj0F82hhuu2d72PSRBNNGTP71wcJL",
      metadata: "{\"key\":\"value\"}",
      request_id: "ab2941ca-c3c7-42eb-89f6-1fd42fa7639b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundExternalTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new RefundExternalTransaction({
      event_id: "07dc24da-d2ee-41d2-8ea0-2f0e02a88cc1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundExternalTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new RefundExternalTransaction({
      event_id: "07dc24da-d2ee-41d2-8ea0-2f0e02a88cc1",
      description: "oeQjUez1G0bwCFurxmaLHHuXDOcuycPW2WYY40yWZt9ZjHKqLir6qmCF3zfoEN4hG6jzrPFiN4YTSJ9o4hVc0u6tzaZ3sbYKCNybmAlkaNJiOvuRswwQSmiJco3KwhjqpMqyENnnotJKNM2DvQSu06FE8juzeNINZktFZU0JpHpSrpNbF8O3WzYF"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetExternalTransactionByRequestId | 0', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new GetExternalTransactionByRequestId({
      request_id: "c074c653-bac7-4159-b9ae-8c6277072ad7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      description: "5jbNBEz14f9BIpTXI2luGWaGy1CoCYoYmaLr1BLYdgsrsB7nf3z7z76OYqLZhd2VmnwZ1YQAtf2GPfHYeeJWiJL"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transfer_types: ["campaign", "topup", "cashback", "coupon", "transfer", "payment", "expire", "exchange"],
      description: "VNqKCYgaN"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transaction_types: ["cashback", "topup"],
      transfer_types: ["transfer", "topup", "coupon", "campaign", "cashback"],
      description: "127yVjYZzSkjksojB4PnV9sBfF1BkHf1A87wLQ9bOIRS2WYI"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      is_modified: true,
      transaction_types: ["cashback", "expire", "payment", "topup"],
      transfer_types: ["coupon"],
      description: "RSP5FHw4UX4tGWi4N1WpwhPzDe8V1DYdcKn6nAl4cEX71br7jv7EDkwXN76HyKk1SGbd2fzw9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      private_money_id: "64ec2bee-b9c2-4ce9-9ccb-64d8cd44399c",
      is_modified: false,
      transaction_types: ["transfer", "topup", "exchange", "payment", "cashback", "expire"],
      transfer_types: ["transfer", "campaign", "cashback", "coupon", "topup", "exchange", "payment"],
      description: "cXyEVzhZ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transaction_id: "3040d36b-eef5-460d-97a9-0032981f6a4f",
      private_money_id: "9d013a3e-874a-4502-a716-9d772f37b15b",
      is_modified: true,
      transaction_types: ["expire", "payment", "transfer", "topup", "cashback"],
      transfer_types: ["exchange", "coupon", "payment", "topup", "campaign"],
      description: "dNhZgpKbkXWC5tLFNUhqVPCyC44juCu9OYkti8QhcNElbkx4K7ompotaJBLyz8KN17fLxPU1GvU5oJnH6hOfBgmDSuxOmphkziTG6p4HsLeIcNrFvlQBIX1JBgnrD1yLFlL5kbgs6xUgxf5sOofYseOtl3ilNOPpyIVjtUkLTSkOKux630Id9YuKsTGECVvJsAnq"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      customer_name: "jel2la3rWWdK2ybDtXJiikZzBktm983ksDdKfbC96DBMvuC0QTfx8l2ZZBjyQqeO19KhFrkxiVRAQ6FFjz1wnjIRjO9MofqJJncHBCR1qP1zId4mLJCzHpOgkhaasWI8ELqJwRA62Ghe0ne6pcNR1V7JprfFD47gNL9WM6cSeojzOZZrLxO3x6r1ViuOnspa8l8OxqMpLrB8ZQmhXHGSVgVcs3OQMdHqZLlv01wGqOn2jIsFsWbo7bpQq9anT6",
      transaction_id: "30060b28-d3d0-4f23-a30d-f7f3665f7c7a",
      private_money_id: "628a046b-b08c-4e4e-9a86-ecbc8d2fdb87",
      is_modified: false,
      transaction_types: ["exchange", "transfer"],
      transfer_types: ["coupon", "payment"],
      description: "YsuiE88p3Ho"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      customer_id: "78bb4967-bd05-4214-a6b0-e86b4f1fab38",
      customer_name: "xuKgCFI0Qv1brn8ATMTNMMEyVApkaDeYuOtBoCZgc4gwc8RSE7B5wsqfAkho5yO5EQGpb9AHk6UF1UjWUyw97H5Wi0UlM5hWRopq8",
      transaction_id: "9e59eb11-cf66-4d10-9b6d-c40f4e141921",
      private_money_id: "a7d8b2b3-88bd-41e0-8651-e9feedc2402f",
      is_modified: true,
      transaction_types: ["transfer", "expire", "cashback", "exchange"],
      transfer_types: ["expire", "exchange", "transfer", "payment", "topup"],
      description: "bGEOQG1PZp7fjd91zgh1RHHtL55R7YEprCJ0U4QnLZWmGvTqLQwaZ9vOnv67spoRoPKUgWvYVa3Gv9xbfzvgScohGvfvszFZKZ0fsird"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      shop_name: "b8N5N4uLXeppDXZ9aq2pYugtiiL7qWoYElTKmZkEzCv7OKUa8NeEnF41oUMWRj1sxtSyQgT1GkRhboXHY39x3Xs6KbKOjUQYLsphxNcJXceDU70KRGU02ETtMe",
      customer_id: "293c3c2c-1733-429b-b035-fcc211734ff2",
      customer_name: "uF5QOJx8zwWTQtwhgEUQrpqVtFI20RqU84wWVej7KjR7PO79YOuc2btzI2HvKaIy1dRKuzOlLMmdBSZr220xtZpZdQ9ssluYJHAlylPpV6xWxt7f2oLFlgp2lLhVbHghg4lZSVxXqYiDQPFv2xIXmI4PlPvyiodipyOhBLv",
      transaction_id: "a76fc7ae-3bca-4b02-8064-e3b10a1d36b8",
      private_money_id: "d3fa4246-66b7-4ced-a773-de567fb84543",
      is_modified: true,
      transaction_types: ["payment", "transfer"],
      transfer_types: ["exchange", "topup", "cashback", "campaign"],
      description: "3pAwidsKM1ZphpLhv7NIoqmlJpzKOYIsRtFF9xx8GHcZXN3Xa70o7nFXURkjCcagg1x0DCy4shXKR7nTWCyIt3Gr6ubUQRiycmsaOa8T2aG0PP6tnqHnuoUILOizvfJbTrh0kbVP56HQVtzlq6MKoBezSZGJZ1h8km3mkAPAZ0UMnnwlo100h7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      shop_id: "96063097-7148-4834-bcc2-2b542745e7b2",
      shop_name: "dLeJZDTCEki4ZW2q7YUbIlt759XkPd0Pd9Lm5F7XmpoqfPmIraGVhsLJiqbQ3MQR9CltXlG6ahNcft22PrlsKWxGtQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6LmEP7tafjyhKgvwh227cUJMuQ1t83oitBAmKCKeNp7Z6KeHafoOKYuUs7zf9dIsiva1vYlz4sIXfB3ep9eH",
      customer_id: "98d160ee-3bce-4079-9cb5-1a0601a109b4",
      customer_name: "9YZjsWtY1WGlubcf8poH65gFI1eD4xOb3KkBBLymzX1iKABzsalQh9et3sJPwGPZVdfeHb6D60qrRKjcydAgQf1kjgylUDTK4jhJH0jAjNW1ZH6MoDDkoySCPKncEWYebt4RUGRqT3wcuceySCabxrgTXSxZbg1Ud9jBS9CQqv6T7eIQXHJd8SnpNPnO39WNWvjXlHUhCIHkbLQ7KL6y3Sdoxdn1tpYM1z5XMrmRY7bQCW9sPYWAKIaPAnl",
      transaction_id: "0834f167-d21f-4e27-8704-a0188cb3bb01",
      private_money_id: "e5797c89-913d-4d0e-a2b8-40a6168f505d",
      is_modified: false,
      transaction_types: ["topup", "payment", "exchange", "expire", "transfer", "cashback"],
      transfer_types: ["exchange", "topup", "coupon", "cashback"],
      description: "eP1Vs1el3tVDmtz0qcHqLIsXtLIzc5kRp3WnRoU2x23XKfAMBShU6I6qbRRo0KsKQjbIFpDLYbMMvlh9JCT1xGcQLRIyKzcfWhCzi1Z89pSvPCqCpyLyZq50fssjoNH"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      per_page: 9411,
      shop_id: "e38a02c1-943f-4a12-956e-343d0dab3e81",
      shop_name: "qZzCUWIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQL9XINJ3Yd9vs5R5vReMbbVX8HS4JwKvfQBXbwG5FfObbKUS2wO8JUS6TcMNwfudd0OcDN26kEZNJtfvLzUTMMVxGv3INa5f54YI1Ph3OUBAsVaG6TxK3slQw2Vv1qEnKcaw1pz9vX015U",
      customer_id: "4ee9c33e-9bc4-4039-b171-0fe0c2f5e900",
      customer_name: "TdX",
      transaction_id: "b90d6aa9-883e-4480-84ee-d9ebc868e291",
      private_money_id: "d5469691-3f11-44c0-8c1e-e05bc3c7b948",
      is_modified: true,
      transaction_types: ["expire", "payment", "exchange", "transfer", "topup"],
      transfer_types: ["payment", "cashback", "coupon", "transfer", "expire", "campaign", "topup", "exchange"],
      description: "28vDsYr2EOFyjAKpCpIzZXmsoGSwaJTi7OUK0vKQ13gfO1QSAIUcA7AjSSLuHYzu2Ra1BMEr62gevnEoyfpAANnkoel9aDgdNSfmE5De5bTvMyHpd2S0WD3FaqRKAgoYEGpNOGzwWmNqL0QHxylFWlu94S"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      page: 3297,
      per_page: 441,
      shop_id: "955006fc-2f46-4207-9653-5e4434697ccd",
      shop_name: "5BU7ZXRTfnNFoNra90XKkUB3tuq1X9Hm0SHBKCUruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yNfh8NoRe5r",
      customer_id: "7eb27e58-03c0-4fb0-9b72-e8561aec20a1",
      customer_name: "mpqdlLHNNlbdnW1ooZFRDSiyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45c417ClVPZadCz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDf",
      transaction_id: "1f3e21d5-f316-4cf4-807d-2fb459bdb925",
      private_money_id: "982f1d5e-d2d9-4167-8979-01da54ab9d00",
      is_modified: false,
      transaction_types: ["cashback", "payment", "expire", "topup", "transfer"],
      transfer_types: ["exchange", "payment", "expire", "campaign"],
      description: "ShoExxXDz"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      to: "2022-04-04T13:09:11.000000Z",
      page: 622,
      per_page: 5213,
      shop_id: "84ad7475-84bd-4aaa-9f30-bd4020d89d8a",
      shop_name: "mtxroKVUk7sDu4lw8ZxL5ooBCUmbexHlOYPdRDRXfcFEKebPAHiatKRmL7K8IMJIBW1vB1RC8WQ75Zq",
      customer_id: "b20ca7b2-a03e-49c3-90a5-b390f50ba945",
      customer_name: "ph5LyiHrKKZ",
      transaction_id: "3fedc792-2f3a-46c8-8090-5459edb3ce95",
      private_money_id: "46ffd7a7-b5e5-4add-acc1-a3090d5b7b9d",
      is_modified: true,
      transaction_types: ["cashback", "topup", "transfer", "payment"],
      transfer_types: ["exchange", "coupon", "payment"],
      description: "fNhFwjSSUkqouGV2ULftf3KLiOm0u6Od"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      from: "2024-02-27T08:22:21.000000Z",
      to: "2023-01-08T01:26:49.000000Z",
      page: 218,
      per_page: 6793,
      shop_id: "66729419-18d7-478c-8d83-149b011f45e1",
      shop_name: "6BMdHbor9Bi8VjYj",
      customer_id: "ed0ac265-39c1-40c6-9eb8-7fe0ee0b134e",
      customer_name: "8XvRYyNjj6LzPNoFY0NPc7gW3tdaerbfAUj6MGuDCQRgbbh69IfOOqdFvcvTYHWhMSc2JtDSCuxpXIBKjX0wbEINtuhWyJmxhctiEpL1KlL20SY28CEIpXvCz2lX0WFgkUTJYHHOr63hjnglJCcSZdRjCOwyap0lsb8d4Dc5yMU",
      transaction_id: "d59e9431-15a1-4f54-944e-4e02a1dc8d30",
      private_money_id: "d8651879-e2d8-4d24-b687-def752387178",
      is_modified: false,
      transaction_types: ["cashback"],
      transfer_types: ["expire", "payment", "topup"],
      description: "klncfGkEwHBWOqOmjPQjCJIqduyEzfF4ihEMnqIdNLL8T5msTmgqj81RXJ34GFY2SrpQfm9Le0rSPWlrPa8fbLwdjVaS9JydpHqXjqW7D3uCGCdE3Z7gIcLSudPl4JIrQmLFWJxcGB9NLriuIsMTYyCUoOEa9YZaUNPTMagDSPeHLGCGYvgqbqCId"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      to: "2024-03-15T11:16:19.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      from: "2021-12-08T00:35:28.000000Z",
      to: "2020-02-17T21:59:01.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      description: "yGfjAlvbOwBRftL3mTfJhTjDs9c8QNUGvnht1UycVdhwjqe",
      from: "2021-07-18T07:26:47.000000Z",
      to: "2024-03-10T23:40:38.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      transfer_types: ["campaign", "exchange", "expire", "coupon", "topup", "cashback"],
      description: "a3mrtCxkktM",
      from: "2023-10-05T23:45:02.000000Z",
      to: "2021-01-24T19:25:29.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      per_page: 813,
      transfer_types: ["topup", "campaign", "coupon", "transfer", "expire", "payment", "cashback"],
      description: "5nebRZC0vDYNEWMfxXSVHRY4YZdsEswk",
      from: "2020-01-10T18:04:26.000000Z",
      to: "2022-09-21T02:52:28.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      prev_page_cursor_id: "30436f3b-b8bd-4066-b974-68d78563c727",
      per_page: 789,
      transfer_types: ["expire", "exchange", "cashback"],
      description: "xjsUzeefEvU98BI4BdtnYVFOF5IXA6lNw66Yqs62ry4EX0H5SsjBGi2vt3IV",
      from: "2023-09-06T23:39:56.000000Z",
      to: "2023-10-22T05:39:11.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      next_page_cursor_id: "45f7c5f5-296a-48e6-af65-78bce066bede",
      prev_page_cursor_id: "3c6f0cd8-1f2d-41ff-ae13-c6492d2740a6",
      per_page: 762,
      transfer_types: ["payment", "expire", "transfer", "coupon", "topup", "campaign", "cashback", "exchange"],
      description: "21XE55hc29pv4sZBooZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFF",
      from: "2022-01-10T14:36:21.000000Z",
      to: "2021-09-30T20:25:35.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      transaction_types: ["exchange", "expire"],
      next_page_cursor_id: "9e38166d-dfe6-4e4d-bc30-50df1ab71f58",
      prev_page_cursor_id: "d63838cc-6c9c-41ab-9963-6de5580f0c22",
      per_page: 2,
      transfer_types: ["topup", "exchange", "payment"],
      description: "jVYhbh4RW4SjcPHu2gIp7HlCgxYlFZzBuHZ8tjsh68ScZg3aAMEr",
      from: "2023-06-26T11:29:49.000000Z",
      to: "2020-01-05T02:46:51.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      is_modified: false,
      transaction_types: ["transfer"],
      next_page_cursor_id: "e515b982-1985-4763-87a7-b84a031c1124",
      prev_page_cursor_id: "62ed6b60-4526-4607-abc9-764a2ead0667",
      per_page: 773,
      transfer_types: ["transfer", "topup", "expire", "cashback", "campaign", "payment", "exchange", "coupon"],
      description: "TjY4B83KCbssdnciBK2yKUyBpazsFHLyPhoCqWWrzikH0DrThI9ndCARX9iZhUIwUrsQ8Uijo55dyiBxXbKWYhqIQcADAJhWFwASll2hGkEzja1NmQHCUATGGz590dtBhucZ4e0BzAWy80f2MmxJUnd92RrjDmsbpR1t9",
      from: "2022-10-10T15:58:32.000000Z",
      to: "2020-03-11T20:58:53.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      private_money_id: "4d78281e-5e65-4db9-953f-b9fde46cb540",
      is_modified: true,
      transaction_types: ["expire"],
      next_page_cursor_id: "9880413f-0d87-4f52-98ab-5a3d8813f976",
      prev_page_cursor_id: "ed714a9a-e3bb-46af-814e-be2f9cd6f517",
      per_page: 789,
      transfer_types: ["topup", "payment", "exchange", "expire", "campaign"],
      description: "6H5p2Y5YBaOZdS1seolNILNbVpFGvZ3N4x3uvaLnbw12Ii4C82SzJJG4lODNS2Ij7U5b72UTWbjXGfzCmZ2vkYmrCrWwA7IkDmk9acr8tX9JQSHyiFo",
      from: "2021-02-16T15:55:51.000000Z",
      to: "2020-04-12T14:19:17.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      transaction_id: "3b6cdea5-c415-4e88-9dc8-2be092c47df1",
      private_money_id: "9841e2fb-1459-4195-b925-321f2da0aa4b",
      is_modified: false,
      transaction_types: ["topup"],
      next_page_cursor_id: "212a02d0-9c09-4008-bc92-92c7323413ad",
      prev_page_cursor_id: "710dcfd5-eeb4-4735-9f24-b0f5c546e4fa",
      per_page: 849,
      transfer_types: ["coupon", "campaign", "cashback", "payment"],
      description: "JeNNvUC0bqs1hvmd",
      from: "2022-05-21T10:30:13.000000Z",
      to: "2020-08-07T19:13:13.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      customer_name: "8evbr",
      transaction_id: "78e874c1-0ed1-4afe-8c2c-0347a5be9cf0",
      private_money_id: "19c2b3ee-89d9-455d-afdd-ff6df51b3b22",
      is_modified: true,
      transaction_types: ["cashback", "topup"],
      next_page_cursor_id: "039d2aa9-ba0d-43db-b2e3-e8bf4c0c3f70",
      prev_page_cursor_id: "26e3ad3e-e998-4999-9dc4-60dedc223b1d",
      per_page: 772,
      transfer_types: ["topup", "campaign", "payment"],
      description: "O2LW0e3G1sTmjjHcN57ZbAikJ2opGyr1ja3zumve771kQ7mwZnfGMQasC1yb1Dq2UL9Kx0jYk7sZRicO",
      from: "2023-06-01T13:38:47.000000Z",
      to: "2021-11-10T03:54:07.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      customer_id: "6a2e22b2-2c88-45b3-a713-d181c7944617",
      customer_name: "5GXrX6ozTzm0HG0TosxKz4jitwHtujKhwCFGwiyv4vlRBRxfHZeKBVf4jVtecQNubIdHetIBPUrvpeN86f46tWgyM43AJZ0KTwWOYBSX4EzfsIiIDCSxoowqwobMRj4K8plKuk4zON6lsKCXAkk07Q9YuV27x2ZZwJNPJ0aXH1uRWCYsw6VRBfXAF7xeoT0y6lNlDnKEOyMV89HUL5OwvTmfkSpdcLQvsJQRiuv",
      transaction_id: "f497bed7-68dd-4e1b-b0d2-3395daddad6b",
      private_money_id: "0877d370-91db-41e8-ba6e-2474073e6d71",
      is_modified: true,
      transaction_types: ["cashback"],
      next_page_cursor_id: "a73f828f-2596-4886-8631-0ebaf7804469",
      prev_page_cursor_id: "ba56958a-b5a7-4388-9f46-d922daec4601",
      per_page: 684,
      transfer_types: ["transfer", "topup", "campaign"],
      description: "e8hiTzwkLtzBfAa7kaQm6vULSy1FKdTtu83N0tnRGbdpbMjOs6NsjUaiDroY6Q3IK7BQ6AmswdAM3IJrwVbs9pMxfMCthiv1a2EEHFmQw4OmJsXraAGliEBPm",
      from: "2020-06-19T15:14:58.000000Z",
      to: "2022-03-02T07:01:28.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      shop_name: "6ocsr7yZptwOIMGRxZLktLdV7uiWarFr5GP0wp4l70ZsGyPlyZYRURgUMf0P5ozHDn0iOeoWIRRMyR0nQkh8Zz7eaFGoiOPKR0rUW9UTcnGDBsZuPfABdiNvfS9Anufij6THnocikBJOkD3FvwnaI0WeOGlWmmegc1KGhe3TxnuKac7CS1DK4Gnr",
      customer_id: "e565affe-5272-4f33-bc2c-52ef05cd5f42",
      customer_name: "GMXHrz9mqfRhRmUp8pN9pjtBKEK15Dd3XxCT0Zmu6u7tOxquneNatGolCf6SjeF7SeZXyMS6WkNJ2",
      transaction_id: "716e4ac7-7976-44d3-98f7-7b3faa388596",
      private_money_id: "5bab6090-7c12-4205-8c87-d53e21fffed1",
      is_modified: true,
      transaction_types: ["expire", "cashback", "topup", "transfer", "payment", "exchange"],
      next_page_cursor_id: "0db85fd9-febd-4350-b448-7a0acb39b695",
      prev_page_cursor_id: "62384cb5-9e63-469f-831a-5177a1739735",
      per_page: 454,
      transfer_types: ["topup", "payment", "transfer", "exchange", "coupon", "cashback", "expire", "campaign"],
      description: "FwVmaHYw6oEFbK8",
      from: "2021-11-27T05:19:55.000000Z",
      to: "2023-11-24T11:05:02.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 15', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      shop_id: "36318b3e-9fa7-47b1-8c7b-f6fbf33da76c",
      shop_name: "AIi5qYTqeIN9jftsBTkZDKCnQigIBcgyeHE0tecRrYBgXoYNaRDH3xa5ZXl3L94kmDiQZVmfdCV9wGJUROgp1VTNstKsbk2wvZcZmJCZwuee4w9Rkvag9C19xRl1IlJpGXqlhd5uwOg53j3Qic0iyKLnZxaZi9i",
      customer_id: "2e6f34c3-990d-4e61-b291-7d0cd4fa7feb",
      customer_name: "9IDD4FLU53H4cTCafuN856J50SdiADG37eydGENMPuSUGCPNHip0Y3dBWcNdXe1sIjLSVztCspdpKcDGU85LATApzQ2dQG1XtK0UfX1fzmKZw4jAX5TdVMZA3FsBWHTaR7q8iHovbTWoPNbCUX3WmvU0lnYW7MWulxJqejEoXiemEzy22TP2wtSY9IoDSrJUA2sSTBsOwjVmr0bTbO79fqhITnnz7WaCAiQd9B8sle8",
      transaction_id: "c66f10b8-ab01-4f16-b30a-a9ec13246a37",
      private_money_id: "eee041f2-d0d3-4b12-80ae-8dd7ae0d5b9a",
      is_modified: true,
      transaction_types: ["exchange", "transfer"],
      next_page_cursor_id: "39553d01-776a-4dc8-898d-072e58f941f3",
      prev_page_cursor_id: "1a3bf73e-4c94-48bf-8e58-5734423941b8",
      per_page: 471,
      transfer_types: ["transfer", "payment", "campaign", "coupon", "cashback"],
      description: "zE1L2wv36YuE4jwp0IiR44I5KLiOr",
      from: "2022-02-17T11:01:20.000000Z",
      to: "2022-10-03T18:51:13.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListOrganizations | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizations> = await client.send(new ListOrganizations({
      private_money_id: "9325e82f-d6bc-4952-8d8f-933d2d15c386"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListOrganizations | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizations> = await client.send(new ListOrganizations({
      private_money_id: "9325e82f-d6bc-4952-8d8f-933d2d15c386",
      code: "Kq3q"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListOrganizations | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizations> = await client.send(new ListOrganizations({
      private_money_id: "9325e82f-d6bc-4952-8d8f-933d2d15c386",
      name: "xt",
      code: "T"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListOrganizations | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizations> = await client.send(new ListOrganizations({
      private_money_id: "9325e82f-d6bc-4952-8d8f-933d2d15c386",
      per_page: 2120,
      name: "fN6KrraD5u",
      code: "ojwDm"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListOrganizations | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizations> = await client.send(new ListOrganizations({
      private_money_id: "9325e82f-d6bc-4952-8d8f-933d2d15c386",
      page: 1618,
      per_page: 997,
      name: "IlDiaOh78",
      code: "fh"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 0', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "bZ3YfGhlbqaOElv",
      name: "ScjtjkG1WEjltqaYkhp7caXjUtBcNe9XyY4wthFo0glXBErIUB1p7aPMzXnA",
      private_money_ids: ["ddc8bbc4-b872-40dc-85d9-4b394d376f5b", "2bac5982-8db6-4147-aedd-edaf58059e30", "b8a22ccf-10c1-44db-9281-11d1b2da4fb9", "4cbe28f8-70bd-40fb-8653-150ae55ae2ce", "2380f798-5f30-407a-9b98-48e67b07a3ff"],
      issuer_admin_user_email: "Kx7ivixiVq@jgvB.com",
      member_admin_user_email: "NcsQLQxAtJ@mVTc.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 1', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "bZ3YfGhlbqaOElv",
      name: "ScjtjkG1WEjltqaYkhp7caXjUtBcNe9XyY4wthFo0glXBErIUB1p7aPMzXnA",
      private_money_ids: ["ddc8bbc4-b872-40dc-85d9-4b394d376f5b", "2bac5982-8db6-4147-aedd-edaf58059e30", "b8a22ccf-10c1-44db-9281-11d1b2da4fb9", "4cbe28f8-70bd-40fb-8653-150ae55ae2ce", "2380f798-5f30-407a-9b98-48e67b07a3ff"],
      issuer_admin_user_email: "Kx7ivixiVq@jgvB.com",
      member_admin_user_email: "NcsQLQxAtJ@mVTc.com",
      contact_name: "XWtKUzkNd35gyuBKlwozbM8BIp6WWFtoNM3mKKWyblmmAHRSYCV0EDw10SY48ZoA8oj9alrEKYDjBWPKCwbirzvScUvjsqVkcSInvOjFPIL9qlVMwg0ANEHCj5eM805Swts"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 2', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "bZ3YfGhlbqaOElv",
      name: "ScjtjkG1WEjltqaYkhp7caXjUtBcNe9XyY4wthFo0glXBErIUB1p7aPMzXnA",
      private_money_ids: ["ddc8bbc4-b872-40dc-85d9-4b394d376f5b", "2bac5982-8db6-4147-aedd-edaf58059e30", "b8a22ccf-10c1-44db-9281-11d1b2da4fb9", "4cbe28f8-70bd-40fb-8653-150ae55ae2ce", "2380f798-5f30-407a-9b98-48e67b07a3ff"],
      issuer_admin_user_email: "Kx7ivixiVq@jgvB.com",
      member_admin_user_email: "NcsQLQxAtJ@mVTc.com",
      bank_account_holder_name: "\\",
      contact_name: "2NkJBDvuxWoqdLq3QmHRbZpwbPRidVG7B6hajGJrCJBxTKH0YUW8iwJJuJPCjlaztijN3vebjT869RjYRPCqvnZ1Yzdr"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 3', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "bZ3YfGhlbqaOElv",
      name: "ScjtjkG1WEjltqaYkhp7caXjUtBcNe9XyY4wthFo0glXBErIUB1p7aPMzXnA",
      private_money_ids: ["ddc8bbc4-b872-40dc-85d9-4b394d376f5b", "2bac5982-8db6-4147-aedd-edaf58059e30", "b8a22ccf-10c1-44db-9281-11d1b2da4fb9", "4cbe28f8-70bd-40fb-8653-150ae55ae2ce", "2380f798-5f30-407a-9b98-48e67b07a3ff"],
      issuer_admin_user_email: "Kx7ivixiVq@jgvB.com",
      member_admin_user_email: "NcsQLQxAtJ@mVTc.com",
      bank_account: "",
      bank_account_holder_name: "ｿ",
      contact_name: "oGDpqqjYUa42NN7jWbTA8sT9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 4', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "bZ3YfGhlbqaOElv",
      name: "ScjtjkG1WEjltqaYkhp7caXjUtBcNe9XyY4wthFo0glXBErIUB1p7aPMzXnA",
      private_money_ids: ["ddc8bbc4-b872-40dc-85d9-4b394d376f5b", "2bac5982-8db6-4147-aedd-edaf58059e30", "b8a22ccf-10c1-44db-9281-11d1b2da4fb9", "4cbe28f8-70bd-40fb-8653-150ae55ae2ce", "2380f798-5f30-407a-9b98-48e67b07a3ff"],
      issuer_admin_user_email: "Kx7ivixiVq@jgvB.com",
      member_admin_user_email: "NcsQLQxAtJ@mVTc.com",
      bank_account_type: "saving",
      bank_account: "489",
      bank_account_holder_name: "ｦ",
      contact_name: "9ZtWhMAKSZHQ2Tjahc0hASAcEibjku1fdQetgL0O7DlAF"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 5', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "bZ3YfGhlbqaOElv",
      name: "ScjtjkG1WEjltqaYkhp7caXjUtBcNe9XyY4wthFo0glXBErIUB1p7aPMzXnA",
      private_money_ids: ["ddc8bbc4-b872-40dc-85d9-4b394d376f5b", "2bac5982-8db6-4147-aedd-edaf58059e30", "b8a22ccf-10c1-44db-9281-11d1b2da4fb9", "4cbe28f8-70bd-40fb-8653-150ae55ae2ce", "2380f798-5f30-407a-9b98-48e67b07a3ff"],
      issuer_admin_user_email: "Kx7ivixiVq@jgvB.com",
      member_admin_user_email: "NcsQLQxAtJ@mVTc.com",
      bank_branch_code: "",
      bank_account_type: "other",
      bank_account: "",
      bank_account_holder_name: " ",
      contact_name: "Wu7J4NYirXryPP6taqbm6hsnA9hELkacVB4dzDqQ1LbTyVIgVP7fIz1xemnrDx9P7HPwLX5lwWZKuWWf4n"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 6', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "bZ3YfGhlbqaOElv",
      name: "ScjtjkG1WEjltqaYkhp7caXjUtBcNe9XyY4wthFo0glXBErIUB1p7aPMzXnA",
      private_money_ids: ["ddc8bbc4-b872-40dc-85d9-4b394d376f5b", "2bac5982-8db6-4147-aedd-edaf58059e30", "b8a22ccf-10c1-44db-9281-11d1b2da4fb9", "4cbe28f8-70bd-40fb-8653-150ae55ae2ce", "2380f798-5f30-407a-9b98-48e67b07a3ff"],
      issuer_admin_user_email: "Kx7ivixiVq@jgvB.com",
      member_admin_user_email: "NcsQLQxAtJ@mVTc.com",
      bank_branch_name: "wNPq2rjN28QfQLnQ9Qr2gs4rAyEVt2ws7WkJzpgGUX4mtxobZ9ZCpN",
      bank_branch_code: "",
      bank_account_type: "other",
      bank_account: "7026",
      bank_account_holder_name: " ",
      contact_name: "Ibd8ZNVrafdiivNn4NbNLXIdoiqtrelImUNmLeKEfXUc2dQExu22E4bXnTsrAuXzcUztcjpDcIzv8TjKb1dIcQKt"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 7', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "bZ3YfGhlbqaOElv",
      name: "ScjtjkG1WEjltqaYkhp7caXjUtBcNe9XyY4wthFo0glXBErIUB1p7aPMzXnA",
      private_money_ids: ["ddc8bbc4-b872-40dc-85d9-4b394d376f5b", "2bac5982-8db6-4147-aedd-edaf58059e30", "b8a22ccf-10c1-44db-9281-11d1b2da4fb9", "4cbe28f8-70bd-40fb-8653-150ae55ae2ce", "2380f798-5f30-407a-9b98-48e67b07a3ff"],
      issuer_admin_user_email: "Kx7ivixiVq@jgvB.com",
      member_admin_user_email: "NcsQLQxAtJ@mVTc.com",
      bank_code: "7050",
      bank_branch_name: "9Ynsu0LI4T70lQwB453YpOK96EoFGxVJNTeRlFM4Xw2YneFRtau24",
      bank_branch_code: "092",
      bank_account_type: "saving",
      bank_account: "172",
      bank_account_holder_name: "\\",
      contact_name: "hhPFbHNPhRgnqYnUlh4JbOrMj5jFwrAdcz57ZOWsDr0Djt9M12BOno1AcjM96oftC7mHhiSDgXKvVy5paxKD2XcOfyMo26iqol80j1t4n3lpnoezOx6Ov6eGwj"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 8', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "bZ3YfGhlbqaOElv",
      name: "ScjtjkG1WEjltqaYkhp7caXjUtBcNe9XyY4wthFo0glXBErIUB1p7aPMzXnA",
      private_money_ids: ["ddc8bbc4-b872-40dc-85d9-4b394d376f5b", "2bac5982-8db6-4147-aedd-edaf58059e30", "b8a22ccf-10c1-44db-9281-11d1b2da4fb9", "4cbe28f8-70bd-40fb-8653-150ae55ae2ce", "2380f798-5f30-407a-9b98-48e67b07a3ff"],
      issuer_admin_user_email: "Kx7ivixiVq@jgvB.com",
      member_admin_user_email: "NcsQLQxAtJ@mVTc.com",
      bank_name: "QCqxdtQnDY4S9N4H",
      bank_code: "",
      bank_branch_name: "J5rCsXRcUZY47cpIh03BvqB7CzLjYHoO28zEE65Ul",
      bank_branch_code: "",
      bank_account_type: "current",
      bank_account: "128",
      bank_account_holder_name: "V",
      contact_name: "2dxrA2428zEWnFZLX87qtedPzV8NdiYCurcmVOPZzwMWHgQ0VESfspW9b9NBdczTSynCfTiWLEN2pEbq7ZeB8PV"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      per_page: 4363
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      page: 2476,
      per_page: 6366
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      with_disabled: false,
      page: 3014,
      per_page: 9772
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      external_id: "9",
      with_disabled: true,
      page: 4101,
      per_page: 6882
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      email: "eTptZ5kX9r@Lpag.com",
      external_id: "dWQnEnTlLyubwibc5uG9Y4cn6ApRZ5NX6",
      with_disabled: true,
      page: 3271,
      per_page: 5676
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      tel: "05531849230",
      email: "n022H3wQmN@FzbL.com",
      external_id: "mfFSz1u",
      with_disabled: true,
      page: 4339,
      per_page: 7200
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      address: "YHhU5vbLxW8Yq15XpRuu89q3NykiRPYO2oQiAYMcKkXBWEu4RSjxgCW3jFlgob7yobgqdqFleVhpCebdmmx3jJLFYo72YjP5pod5QaLCZTmFLxumOnvrupx16EXCUXyPfCabjEtMliIf7wKoPmNQW",
      tel: "06538750",
      email: "oCe5IIfEba@Rlpd.com",
      external_id: "TTQpQoSRT6b0IY83jSy9CLjq8yjjxInoB",
      with_disabled: true,
      page: 3851,
      per_page: 5709
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      postal_code: "675-8180",
      address: "7CI9Yb5tOQ2qp6BlopujNmJIuVKWvjUjC0u3f2Lo9NqlV6uXM4yE9kd7lV6QKkz6REzoI7cZYW4c0GyNh6EpQVqX4KE4B5KRDxSSppVORQLy6PO73cHGKqjz0v27dHE8reh9b3v7zqeYS2n0EGsPPbvQvYkAPBJ7wmg",
      tel: "037407-356",
      email: "xAKZBD2FhN@oFZK.com",
      external_id: "bAgSoRCKxx",
      with_disabled: true,
      page: 582,
      per_page: 4656
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      name: "WQZO9yz4Mc4BWxPS7UaVHpVi4pZYZOGKLSewvJuaN97ObUNQZ0A0Rwk2Z2omGatDjCcJfOMaGd4kHySUJYrKI48UyLazcdaqg9M9b56VUQzIG7Yr7fsBnFuG56tOVY8vi9Z9lrbTGfh4QbdPS2D",
      postal_code: "856-8855",
      address: "w9jsvLcXjFRqAsdyU0EjzFGdoCEVoN09yrlyTlHcxkp",
      tel: "0280273836",
      email: "eoAqvgg01z@ZW75.com",
      external_id: "gRDgWRTNwobRsB1baR1aePdc9fGHLcw",
      with_disabled: false,
      page: 8469,
      per_page: 320
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      private_money_id: "ff4bb52b-a4a2-40a9-a66c-ece0ef216b5b",
      name: "g5Jr7zEeO7nUDqxXj74j643AIOVakyq8QHWKNric3MBQYWsKtvnxoQJLloM94TQVFchkaVLnKXq1JcpZfZUH2UsKCxnRcuSoLNAly4QR5kzfucn7LZFZwhy5RIJGwbFSZ2qU3L9frpqlrETgz3O9wlyQ0TWfR4Gx21zM7WIQGDsPsJyAShBlCJPjtVj6RA58jW",
      postal_code: "2289672",
      address: "hryHKQAP2bBeZkmIh2UeN7Z047tEp9MnaMKkPTTOh4KlFXKgtixsqVTYrrSHZ1a0tz4EzkuhUCHWp85qyAYWUJWst1yIlHOt0XiM6Qkur8SbZd3wcuCesxkTgeUlIAlQvL5t780R8L5VrLxzRQlVu0ZdkmHWdPUiV",
      tel: "0558501649",
      email: "lOjSB31Mxq@8SXp.com",
      external_id: "HJRZi52y7KvoeklIR5ig",
      with_disabled: false,
      page: 5009,
      per_page: 1805
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      organization_code: "K-yh-oi8WGat--v2xM8n-u-zD8",
      private_money_id: "35519bc3-e0fb-40ed-90a1-f720da93ab83",
      name: "yUfJm7Fg98YgjSKRGLQpNx8ciNrKweGJtnGqdSp90ci6D0iGddOVzLT6",
      postal_code: "492-5582",
      address: "ByrAGwszVw",
      tel: "0114847-728",
      email: "YB5YxVquVY@sbDy.com",
      external_id: "ysRisRQ9ectqoj4yKOsEPCrpQPvSjUD",
      with_disabled: true,
      page: 9022,
      per_page: 5101
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "tH57ysDpO4lTbJ9dqwKn5NSHIJ7mbc5qbO"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 1', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "tH57ysDpO4lTbJ9dqwKn5NSHIJ7mbc5qbO",
      organization_code: "v-B8r2--WfW3-"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 2', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "tH57ysDpO4lTbJ9dqwKn5NSHIJ7mbc5qbO",
      shop_external_id: "MHaeJG",
      organization_code: "gJ-j9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 3', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "tH57ysDpO4lTbJ9dqwKn5NSHIJ7mbc5qbO",
      shop_email: "84vybd1Jsf@0jR3.com",
      shop_external_id: "zbwtxyn2FAh1zUedGEpNztrZH",
      organization_code: "0Mg37oZsy--lB-V1h9QKFKHQS4q-"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 4', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "tH57ysDpO4lTbJ9dqwKn5NSHIJ7mbc5qbO",
      shop_tel: "055-3886-628",
      shop_email: "CBHpzVqBZq@NRFU.com",
      shop_external_id: "9Bh",
      organization_code: ""
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 5', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "tH57ysDpO4lTbJ9dqwKn5NSHIJ7mbc5qbO",
      shop_address: "i8jmBN0T80aLvrKoRyTXgPVT4AzeoZEOYuu1RyqlWwyCNVezTDDCUN00F2Vhn3XqmCSMDzeEDKcNHBIUBy90lbfxByyLgJllatyS0exoVZwnX2Y3MjJVkSKFu78PD8Nsi0ghqRiHIikuwLQAi0YorDHLBFs4pFpuxUcIrb43g0nK7tb3btHVGJJQejQb3sdWfi2Z2Wvmx0ZqLEwxwj8U4A4KZBQdvuQb5QYDYt7CyctlhtAXqf6uerXtmV",
      shop_tel: "03-12356",
      shop_email: "DnnO4ty38I@khtT.com",
      shop_external_id: "aQWLqhFbA6TsT4rGSzhCtz",
      organization_code: "R-EhK74jj-975C982FOu2-6---xg"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 6', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "tH57ysDpO4lTbJ9dqwKn5NSHIJ7mbc5qbO",
      shop_postal_code: "2050599",
      shop_address: "6vZBp0zzwPN5DIhcy9tg03Xeu2UN5sKl9fYJxmaO84WKiqpzyFwc0O5qDH6cAdyVZn4o55A5DSTN7FZ8Y8t8MIK7GdyM50XmxAy3ATlXa99m3Ela8zcR94JgHtiXrfi45gdORj3Jla3Pfb8OgNhhqnfBQjVsClPPd45bUBovESo5O7DwwlNZPFf6xG",
      shop_tel: "02-96918379",
      shop_email: "hbuv3B8S8p@H3eq.com",
      shop_external_id: "x8cOR3TFR9a8hMUM",
      organization_code: "R-1f--Bayj6cu-9R7Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "YmTtJYjps5n0FjmTFvO6PZjVX87PLzR29oTCv16fPXjhVlLpKgtr0aXm"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 1', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "YmTtJYjps5n0FjmTFvO6PZjVX87PLzR29oTCv16fPXjhVlLpKgtr0aXm",
      can_topup_private_money_ids: []
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 2', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "YmTtJYjps5n0FjmTFvO6PZjVX87PLzR29oTCv16fPXjhVlLpKgtr0aXm",
      private_money_ids: ["956b5938-33be-4b95-aa7d-128c5c4107c1", "af1d11b7-a81f-4d73-908a-a159b3f2bc78", "eee5efb7-a0cb-411f-929b-085eecd419d7", "693eafba-45f3-457b-b947-8ef287927866", "49a7b3af-f390-476b-a3c7-ef4686738cab", "3f434200-3df8-4290-896c-166b7eccf7bf", "91556f15-51d4-4ea4-8797-0c05c2698a5b", "47b54459-556a-43d9-9815-992317742386", "4dd3a306-cee7-4aa9-906c-93788b76b58b", "d73bf7ee-83fa-48f0-a65e-722218693239"],
      can_topup_private_money_ids: ["52774604-61af-4ca3-a397-1ddbebe2e328", "72302a48-06c4-4b18-bf69-30a08cd46322", "8b50bd20-1377-4397-b8f3-7e09b597ee0b", "81d680f1-aa99-47ff-a016-afcd1d416a8a", "ede34d20-fb54-4c77-9b8b-91b9d7f5cf9c", "1123f743-749d-492f-9dc7-bb4d450967ab", "bed26a85-1407-4606-94f2-9570372a711d", "ef5e3775-7a70-453e-ae5a-48a61252b617"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 3', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "YmTtJYjps5n0FjmTFvO6PZjVX87PLzR29oTCv16fPXjhVlLpKgtr0aXm",
      organization_code: "61--m-kQPQoJ9V-H",
      private_money_ids: ["01bcfe5d-bd82-4fc8-8855-c76e4d4972c3", "18ee3795-f50e-43f6-a389-923452289414", "63fd5441-5fa9-4d35-88ec-c10c5e766643", "1b3b2c6f-2c7c-4112-b240-0c24bc117261", "075be237-59cf-4f04-bcec-c06ceb129fa2", "4514b7be-c3df-4c55-bd87-289b97fa08ff", "042eb16c-268d-443e-8fc3-2b9e64e74f0e"],
      can_topup_private_money_ids: ["617157a3-10a1-4359-a1f0-19569ca578ad", "799e53c9-0621-437c-aea8-4bf91bced3a4", "5f9abe11-0a75-4ce0-831c-c49377536c30", "3daa290e-6dc1-4288-b46f-ef4f06769859", "347a9a16-990f-430b-a17f-19d4db97252e", "87ff147b-f7b3-4b64-98b8-0aae4bb33a2f", "c5218cf8-572a-4290-957c-b92303dbd498"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 4', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "YmTtJYjps5n0FjmTFvO6PZjVX87PLzR29oTCv16fPXjhVlLpKgtr0aXm",
      external_id: "XDGe31wijgcu",
      organization_code: "-AJTm92-I6KEzXENgsqMD-Q",
      private_money_ids: ["3b8b7860-2c3c-426f-9a60-7c379ed9e8f2"],
      can_topup_private_money_ids: ["002b0d4e-a4b4-46e5-8e2d-566904a5ed08", "393747c4-909a-4271-96d9-504a67f8cf56", "94c85145-baa1-44e7-b57d-220fe49dfe55", "e00bc95a-2b96-4aaa-8fdd-975be4d18b06", "263ebc8e-bf3f-4325-a84a-982e5769ebbd"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 5', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "YmTtJYjps5n0FjmTFvO6PZjVX87PLzR29oTCv16fPXjhVlLpKgtr0aXm",
      email: "AbHwNLgu8N@ky9W.com",
      external_id: "RMByjAKTzdQ2llGcXl5Cw9",
      organization_code: "V37-5Q-ke---2-13-y4wk17FtTG-T",
      private_money_ids: ["b53022ad-d5db-404b-83da-ba7796b48d76", "0cf6fd9a-7095-4c34-90f7-569dccf3f61b", "dd067a92-1f85-4b4a-8f19-50be86731e92", "ad5ad079-2208-4349-9cbd-a5630da0d7d5", "4ca4d8cc-6bd7-477a-809a-cef2db6515ce", "318f0065-9427-47cd-8192-35c338e22b49", "620d3c74-feed-40bf-8f6b-49d932222384"],
      can_topup_private_money_ids: ["d2d393a7-820b-4831-905f-3f70316dabd5", "bb3e57cf-774e-4b02-abe6-895a7577918b", "ca6931fd-4d23-4223-8b9d-58d5206e6694", "bbf5f074-2768-486a-9cb8-905d2bd10c04", "d503fec3-3d7d-4654-a68a-5f9a92af510d", "30e44464-6dd0-457d-b72f-8a6b327710fc"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 6', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "YmTtJYjps5n0FjmTFvO6PZjVX87PLzR29oTCv16fPXjhVlLpKgtr0aXm",
      tel: "0277988734",
      email: "ax2gH7mosT@YAgS.com",
      external_id: "jd1Lu4N1G4DllEfWLsx2f1PjIk5L",
      organization_code: "V---std",
      private_money_ids: ["66b0fd01-7fa8-4dee-8ea4-59baa5d5c233", "312ef199-0fbe-4189-92b6-e26e80ab9cdd", "d41ebb5f-5b3d-4b24-b932-b7ccb4bc1d4a", "6f9d35ac-b3ef-4994-826e-395dcbe0c45e", "11203bf8-a456-4957-81b0-4c3bf5683ec2", "7fe802ed-3af8-4330-9033-3473ac9b9653", "155698e8-bb89-4db5-b23f-e564a8ca366a", "ae4f8fab-66c4-4978-b2c5-32a9f5a4b4b8"],
      can_topup_private_money_ids: ["e4290132-2f2a-4e83-946c-95a9d0a7cb30"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 7', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "YmTtJYjps5n0FjmTFvO6PZjVX87PLzR29oTCv16fPXjhVlLpKgtr0aXm",
      address: "6IVYw4zb7KKLj",
      tel: "06-948489",
      email: "Fi73fT2ekf@bMyp.com",
      external_id: "oZArmvOOmVqy7LHITpCS",
      organization_code: "zS-9--GOD-073",
      private_money_ids: ["75f74d95-82bc-456e-bd6a-f0cbf2a8ee5c", "6d3c16f4-21d8-482b-93a3-d57b48c517d3"],
      can_topup_private_money_ids: ["0b1a243f-dfe3-4b3f-b4e2-66b09f807173", "542c9029-5d55-4444-a1ed-ba7dd549f88c", "9288b851-aae9-4826-8a46-e726296e87e1", "8f4ee4dd-4ef6-4366-89bc-730715985c6c", "914de2f3-679d-4151-87ea-76f3e9647bb1"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 8', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "YmTtJYjps5n0FjmTFvO6PZjVX87PLzR29oTCv16fPXjhVlLpKgtr0aXm",
      postal_code: "5800908",
      address: "uoxa9cfqdBZBSSyuPsLgc14jRH1daAJWkWpeGVt7BTtK3VwbUSgXIGfDP",
      tel: "068-54-048",
      email: "mDzxLUbUeg@7w8c.com",
      external_id: "I",
      organization_code: "U--5-Bx4S--HQ-Ro6-Ya7",
      private_money_ids: ["365fdc7a-6b82-40a3-a30f-53c09ead6d97", "a1b4097b-787e-4c17-9457-0812479b1ef2", "3fad58e5-2ab6-4b26-b949-2f938743bbdf", "d9346ac8-abc3-400a-a790-66840a64a5ab", "dc8973ff-c89b-4465-a333-594b44ad06f6", "40259092-3fd4-4903-8d57-e6be75aa0d9a", "667bd33b-94a1-4391-9cf4-772126f75587"],
      can_topup_private_money_ids: ["48c2b041-07cf-4164-8671-b315785fd863", "14484f8d-0ab6-4df4-b402-acb60adf19dd", "457366e2-8e0a-4fb4-9028-1ec59e87b4e7", "ca1bba9a-7cc6-4449-baf0-c502e7f88144", "dd9c4dd6-b1e0-4aeb-9d8a-02b2cf222587", "9d325fbc-6215-41dd-8a73-42851c89f9a6"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new GetShop({
      shop_id: "8420c540-20f1-499f-a25b-115177ece368"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "f46ae5ec-000b-44a0-8f41-49d5e93f3b4e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 1', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "f46ae5ec-000b-44a0-8f41-49d5e93f3b4e",
      status: "disabled"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 2', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "f46ae5ec-000b-44a0-8f41-49d5e93f3b4e",
      can_topup_private_money_ids: ["4c4a8f30-c04b-40fc-9d01-e9f2b1cd167f", "f9f45fb6-e965-4f6b-a4c2-aafe0ced9615", "a94c3bb7-be96-4a06-979c-2a91890c788c", "4c194bd3-4e47-468a-ac9d-4ef32828f454", "d0a215dc-dc32-44b4-982b-2f058882990b", "12414d6d-28fa-4381-ba22-a19ea8a2ef05"],
      status: "active"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 3', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "f46ae5ec-000b-44a0-8f41-49d5e93f3b4e",
      private_money_ids: ["29e44e30-e219-4cf5-a9f8-c896d1e53166", "e0932f7a-e8e7-494d-9337-f793bb43e395", "877f0fde-72c4-4d41-980f-111232b66778", "b97dfdd2-75d6-449a-997d-04981e1e6758", "5f64556a-c481-4d81-9cf0-b2afb61ffd6f", "8bc071d9-6c4f-4ceb-864c-c959c3730c89"],
      can_topup_private_money_ids: ["3b67865d-784a-40cd-b49c-04b630ebe918", "179039d9-8a47-4eae-92a0-58ddc0c20b4b"],
      status: "active"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 4', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "f46ae5ec-000b-44a0-8f41-49d5e93f3b4e",
      external_id: "VQANtfUdHVc",
      private_money_ids: ["118a1e6f-8075-47fc-b896-b258c1532a33", "d851b986-0778-4f49-b912-00c3a90102a6", "720ac3c8-9813-4564-9a5f-1747669526bd"],
      can_topup_private_money_ids: ["ee2eed17-bace-4809-bf12-3fc4b8eed881", "73ca89d3-35eb-46a4-9279-34662af0a9d7", "e78f9099-9b60-414b-8178-306aef30c98c", "69dc5424-46fc-41d1-88d7-03ea3e82798e", "105e3243-2842-40b8-929a-d61fe5823140"],
      status: "active"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 5', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "f46ae5ec-000b-44a0-8f41-49d5e93f3b4e",
      email: "FcqmENfDor@1zgw.com",
      external_id: "F9x3xZsR5bLJPhH3FEHzbfU4cD6smAeq",
      private_money_ids: ["c685e3db-1fe9-4de6-aa4e-3e69166b1398", "8fffe46b-d52c-4271-847e-3fab9f76bb45", "7eaa259f-ef33-4a4f-90ab-d8a1ef2b2df5", "29f04be4-3593-4ad8-b095-67048a140784", "82633b59-d0e8-4e2f-8ef7-7446a7bdf8d7", "c2628355-1841-45cb-8f3c-f0ee2f5845d7", "f670a0ec-b0e8-49ee-8cfc-1ce1a0a044a9"],
      can_topup_private_money_ids: [],
      status: "active"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 6', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "f46ae5ec-000b-44a0-8f41-49d5e93f3b4e",
      tel: "093125-270",
      email: "MVdbi9G5aE@3q4g.com",
      external_id: "N93gHJA1FfneXYRV1FBu9",
      private_money_ids: ["3eebc5f1-92f7-46ed-8b85-a6b24151acdb", "f238309e-7088-4e21-9105-6557188fcffb", "e6fd3b27-fa27-4a2b-85aa-4feb566bace1", "bb9d51c9-da7f-4a90-a7eb-4d1cd4158b12", "8a59d0b3-04ce-4966-b3b0-81b4c942df9f", "20184f1f-9a17-46c1-a552-696fe916e64d"],
      can_topup_private_money_ids: ["f4cebca1-347f-4dee-be19-7f8753c62859", "1704198b-2152-4da6-a50d-87f21cf9de08"],
      status: "active"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 7', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "f46ae5ec-000b-44a0-8f41-49d5e93f3b4e",
      address: "C4cXtKQ0a4OPrt2tro65RM4SYyWPQ4b5EvFhF0JaiWpiphXqNgzf5XFTYAHJdFeGZi1JIa9NTrkMeAKNU2qNMrw4Jay2YBOfulEIFK5T7Dc8oOst1MM9PmjRDk75J779k3qO5Tt2uQGKACRqDnzgekX1v8dvD0ApeDNVXLZhDHmMPohPl8jvZE0kmWyBRnvtcRhoAfyfPvqbgkbgVyEBxJxS2dp5fON6g",
      tel: "051193364",
      email: "k78JxdSgtN@Zkgp.com",
      external_id: "cQrvP",
      private_money_ids: ["c113a406-063b-46f6-8059-180dcef03e05", "7074b575-3339-4288-8726-ad3d8d2ad09a", "4fd80772-e1c2-4cbb-8786-eb7317832d3e", "7fc74c3c-2a23-46e4-a057-0976e57a376e", "23727798-f624-464c-b37d-49702f859fe1"],
      can_topup_private_money_ids: ["85d1e73d-dff7-4ab0-98b1-7ec20b4ca14f", "98c35f22-7129-4dba-b58e-dfd5cc313b95", "5fba5a05-2787-44a5-a372-7f67327165fe", "a0448cc1-1fc9-4a91-8572-327cb5716715", "d823dc21-98ba-4e0b-a129-296c120f770e", "1a70ac9e-99d6-4213-818b-fcdf52da9b0d", "c9fde57b-bae0-4578-88d5-7f78d4d6287e"],
      status: "disabled"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 8', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "f46ae5ec-000b-44a0-8f41-49d5e93f3b4e",
      postal_code: "832-8096",
      address: "N3fJYwkLiu",
      tel: "0608-3983",
      email: "TQ4Ubb8U4L@oGEU.com",
      external_id: "zMVQ4l9",
      private_money_ids: ["f8a80de4-acde-42e6-b760-6d9b630e59ce", "28a82ec0-11b1-4494-9147-c32c50e91a14", "20b9df3c-a1c2-4d3d-8758-71f2a7d1e03b", "57aa3914-ec88-4f62-93ae-33158ad2565d", "3084afc4-64c9-47bd-9996-de065dd73dbe", "a42b50da-1ea5-4b8e-9cec-2159d4d67c4c", "3d7fb5cf-1569-4710-9eaf-56f3523de385"],
      can_topup_private_money_ids: ["d03e67f3-a3ae-460b-82d2-7085b9045008", "e7762dfc-9956-4b02-bedf-fab55fc48130", "c8dd620a-0627-41c5-b27d-4ca8a613f63a", "3a459306-c334-40b3-8cdb-415cc7e251f4", "2d942cdd-14b7-4ba9-910c-bd9dc4d58297"],
      status: "active"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 9', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "f46ae5ec-000b-44a0-8f41-49d5e93f3b4e",
      name: "CkQGlHLmFUomkHrvNClWFSWTgMn5wd60p6qorRSF9NZATmhqoWmfQbT09Lp665rg0d7eGITtIklkYFTO7OJe9dSEOGALN8S7z1KForIQgwx8oosJLK5Rq67VXMpZGMSz7kvOMHYRjzAZw05Ty0nenwzHOaIVwMTjPFMGevwVMeZt8EqIv",
      postal_code: "992-8615",
      address: "alqxA7HuqvdSNveWzWI5L6stQvZvRJLln3CmVmPz2bcH2xVBHTbiOHYbzW7EYCf76ToHcl8dtzcq",
      tel: "062-7764-624",
      email: "ojGjigHpZl@8InH.com",
      external_id: "QBhMIrdZJT9MnQgGfElkSct56tB3QvYjy8m",
      private_money_ids: ["6ce4fe92-b0aa-4900-a7c4-5679cd343c95", "0b0218d8-5e2e-488e-913a-62a382675314", "d48a3c59-8307-49cf-8eaa-ce182f38af01", "3bf70fd3-7073-4dae-a818-c1199f4aa6f0", "27138bbd-f847-4bcd-836b-6fe5a7c4cdb1"],
      can_topup_private_money_ids: [],
      status: "active"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      per_page: 924
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      page: 4071,
      per_page: 1825
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      organization_code: "Wc1ojkaff9J",
      page: 9714,
      per_page: 6907
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "999c5565-9e89-4619-a1ec-1c820b465bc7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "999c5565-9e89-4619-a1ec-1c820b465bc7",
      page: 7551
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "999c5565-9e89-4619-a1ec-1c820b465bc7",
      per_page: 2495,
      page: 8490
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "999c5565-9e89-4619-a1ec-1c820b465bc7",
      from: "2021-06-19T02:30:28.000000Z",
      to: "2023-02-21T19:36:47.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "999c5565-9e89-4619-a1ec-1c820b465bc7",
      from: "2022-06-07T05:05:11.000000Z",
      to: "2021-07-06T09:58:45.000000Z",
      page: 2272
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "999c5565-9e89-4619-a1ec-1c820b465bc7",
      from: "2024-01-20T01:21:48.000000Z",
      to: "2021-03-01T12:10:37.000000Z",
      per_page: 2350,
      page: 1447
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneySummary | 0', async () => {
  let status = 400;
  try {
    const response: Response<PrivateMoneySummary> = await client.send(new GetPrivateMoneySummary({
      private_money_id: "cefc7f4a-2620-41e6-9eec-f83274a3d7c8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneySummary | 1', async () => {
  let status = 400;
  try {
    const response: Response<PrivateMoneySummary> = await client.send(new GetPrivateMoneySummary({
      private_money_id: "cefc7f4a-2620-41e6-9eec-f83274a3d7c8",
      to: "2023-05-13T02:12:04.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneySummary | 2', async () => {
  let status = 400;
  try {
    const response: Response<PrivateMoneySummary> = await client.send(new GetPrivateMoneySummary({
      private_money_id: "cefc7f4a-2620-41e6-9eec-f83274a3d7c8",
      from: "2021-10-21T12:20:47.000000Z",
      to: "2023-12-23T07:51:21.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "8835f261-a18c-4593-8157-69301ea06047"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "8835f261-a18c-4593-8157-69301ea06047",
      per_page: 6892
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "8835f261-a18c-4593-8157-69301ea06047",
      page: 4743,
      per_page: 3250
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "8835f261-a18c-4593-8157-69301ea06047",
      to: "2020-06-14T12:39:12.000000Z",
      page: 9872,
      per_page: 464
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "8835f261-a18c-4593-8157-69301ea06047",
      from: "2023-03-18T02:48:51.000000Z",
      to: "2022-07-05T19:59:08.000000Z",
      page: 7589,
      per_page: 1020
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "8835f261-a18c-4593-8157-69301ea06047",
      is_modified: true,
      from: "2020-02-14T07:47:13.000000Z",
      to: "2023-12-31T18:12:24.000000Z",
      page: 4592,
      per_page: 4345
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "8835f261-a18c-4593-8157-69301ea06047",
      type: "transfer",
      is_modified: false,
      from: "2021-08-12T02:38:12.000000Z",
      to: "2020-10-13T20:36:06.000000Z",
      page: 7036,
      per_page: 4414
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "8835f261-a18c-4593-8157-69301ea06047",
      receiver_customer_id: "85296f76-5128-4abb-869b-77225130af4d",
      type: "transfer",
      is_modified: false,
      from: "2022-08-20T18:53:28.000000Z",
      to: "2021-03-25T16:54:46.000000Z",
      page: 6098,
      per_page: 7220
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "8835f261-a18c-4593-8157-69301ea06047",
      sender_customer_id: "a3baf25f-8e7c-497e-863c-0a8bda44ad74",
      receiver_customer_id: "80b438b6-bb08-4e33-bf09-6c9c6d7a8dd7",
      type: "topup",
      is_modified: false,
      from: "2023-03-12T13:13:23.000000Z",
      to: "2020-02-21T16:05:59.000000Z",
      page: 5471,
      per_page: 6920
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetBulkTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new GetBulkTransaction({
      bulk_transaction_id: "9be76b1c-eaa0-4232-98a2-4b301af29e24"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBulkTransactionJobs | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBulkTransactionJob> = await client.send(new ListBulkTransactionJobs({
      bulk_transaction_id: "edb863a1-ea3e-437d-be28-921afe0124e6"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBulkTransactionJobs | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBulkTransactionJob> = await client.send(new ListBulkTransactionJobs({
      bulk_transaction_id: "edb863a1-ea3e-437d-be28-921afe0124e6",
      per_page: 7304
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBulkTransactionJobs | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBulkTransactionJob> = await client.send(new ListBulkTransactionJobs({
      bulk_transaction_id: "edb863a1-ea3e-437d-be28-921afe0124e6",
      page: 8271,
      per_page: 3342
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "17661868-a0d0-449c-a83d-6225bf063e46",
      shop_id: "86cba24b-62b8-4bed-95f7-cb71215c6bde",
      amount: 5819.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 1', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "17661868-a0d0-449c-a83d-6225bf063e46",
      shop_id: "86cba24b-62b8-4bed-95f7-cb71215c6bde",
      amount: 5819.0,
      expires_in: 2219
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 2', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "17661868-a0d0-449c-a83d-6225bf063e46",
      shop_id: "86cba24b-62b8-4bed-95f7-cb71215c6bde",
      amount: 5819.0,
      description: "sfxVOVqIgogobrlTBvrKruisPGcjRxKz0hnHtPEmOFzye10sMn1hL",
      expires_in: 4466
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CancelCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CancelCashtray({
      cashtray_id: "e682549c-cba0-4085-97a1-008d22f587e7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<CashtrayWithResult> = await client.send(new GetCashtray({
      cashtray_id: "30f1bada-43b4-455b-a50d-ca980aadf8d3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "3821f1e3-3266-472b-ac6b-1c2c80a27086"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 1', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "3821f1e3-3266-472b-ac6b-1c2c80a27086",
      expires_in: 1227
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 2', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "3821f1e3-3266-472b-ac6b-1c2c80a27086",
      description: "djznjOojFztUyYyUwwyS9B5htgNIDpUpzKyj3BEvYp1TbuySIy9vMfjs9RSVIuRLJamUgod9vJRMh5laf7AaoLGt4pe6BC2Sel2QniqdOC9my1YOO8CjR0YFmv40UM5wZgue67e0YlrO8E3L7gW6pVOxZ4jRFN",
      expires_in: 1664
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 3', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "3821f1e3-3266-472b-ac6b-1c2c80a27086",
      amount: 3876.0,
      description: "oBOihdHvejLf7HUNUhMpEnczyOhMWAPbHXytdjUT8F",
      expires_in: 5146
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "ae6de66b-3345-443d-b657-39d84f55ca5c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "ae6de66b-3345-443d-b657-39d84f55ca5c",
      per_page: 5
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "ae6de66b-3345-443d-b657-39d84f55ca5c",
      page: 4787,
      per_page: 7
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "ae6de66b-3345-443d-b657-39d84f55ca5c",
      available_to: "2020-01-06T21:49:38.000000Z",
      page: 8552,
      per_page: 20
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "ae6de66b-3345-443d-b657-39d84f55ca5c",
      available_from: "2020-12-14T21:24:10.000000Z",
      available_to: "2022-03-13T20:14:54.000000Z",
      page: 6068,
      per_page: 34
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "ae6de66b-3345-443d-b657-39d84f55ca5c",
      is_ongoing: false,
      available_from: "2023-02-14T16:04:11.000000Z",
      available_to: "2020-10-19T06:58:42.000000Z",
      page: 9254,
      per_page: 18
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 0', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9",
      private_money_id: "fbb3cdd4-06b5-4ba1-b46c-8f8c53f4e7de",
      starts_at: "2021-09-29T04:12:53.000000Z",
      ends_at: "2023-07-04T21:12:55.000000Z",
      priority: 7764,
      event: "topup"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 1', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9",
      private_money_id: "fbb3cdd4-06b5-4ba1-b46c-8f8c53f4e7de",
      starts_at: "2021-09-29T04:12:53.000000Z",
      ends_at: "2023-07-04T21:12:55.000000Z",
      priority: 7764,
      event: "topup",
      budget_caps_amount: 1014769456
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 2', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9",
      private_money_id: "fbb3cdd4-06b5-4ba1-b46c-8f8c53f4e7de",
      starts_at: "2021-09-29T04:12:53.000000Z",
      ends_at: "2023-07-04T21:12:55.000000Z",
      priority: 7764,
      event: "topup",
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 646899139
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 3', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9",
      private_money_id: "fbb3cdd4-06b5-4ba1-b46c-8f8c53f4e7de",
      starts_at: "2021-09-29T04:12:53.000000Z",
      ends_at: "2023-07-04T21:12:55.000000Z",
      priority: 7764,
      event: "topup",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 1677384297
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 4', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9",
      private_money_id: "fbb3cdd4-06b5-4ba1-b46c-8f8c53f4e7de",
      starts_at: "2021-09-29T04:12:53.000000Z",
      ends_at: "2023-07-04T21:12:55.000000Z",
      priority: 7764,
      event: "topup",
      dest_private_money_id: "0827f94e-d9c2-43af-b471-0830247399db",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 1437438665
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 5', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9",
      private_money_id: "fbb3cdd4-06b5-4ba1-b46c-8f8c53f4e7de",
      starts_at: "2021-09-29T04:12:53.000000Z",
      ends_at: "2023-07-04T21:12:55.000000Z",
      priority: 7764,
      event: "topup",
      max_total_point_amount: 9153,
      dest_private_money_id: "ad958c82-586c-42ff-bde0-523c12a0d472",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 257134048
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 6', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9",
      private_money_id: "fbb3cdd4-06b5-4ba1-b46c-8f8c53f4e7de",
      starts_at: "2021-09-29T04:12:53.000000Z",
      ends_at: "2023-07-04T21:12:55.000000Z",
      priority: 7764,
      event: "topup",
      max_point_amount: 794,
      max_total_point_amount: 1794,
      dest_private_money_id: "7deb01a5-0092-4a2f-95c4-3863fd9d7652",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 1262910443
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 7', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9",
      private_money_id: "fbb3cdd4-06b5-4ba1-b46c-8f8c53f4e7de",
      starts_at: "2021-09-29T04:12:53.000000Z",
      ends_at: "2023-07-04T21:12:55.000000Z",
      priority: 7764,
      event: "topup",
      exist_in_each_product_groups: true,
      max_point_amount: 9176,
      max_total_point_amount: 4189,
      dest_private_money_id: "4885ac95-d93d-4623-a3a4-df1e9881e913",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 1371370584
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 8', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9",
      private_money_id: "fbb3cdd4-06b5-4ba1-b46c-8f8c53f4e7de",
      starts_at: "2021-09-29T04:12:53.000000Z",
      ends_at: "2023-07-04T21:12:55.000000Z",
      priority: 7764,
      event: "topup",
      minimum_number_for_combination_purchase: 5250,
      exist_in_each_product_groups: true,
      max_point_amount: 1606,
      max_total_point_amount: 1671,
      dest_private_money_id: "f5788411-85a1-47c5-a0e4-0d1a618dc330",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 1128467653
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 9', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9",
      private_money_id: "fbb3cdd4-06b5-4ba1-b46c-8f8c53f4e7de",
      starts_at: "2021-09-29T04:12:53.000000Z",
      ends_at: "2023-07-04T21:12:55.000000Z",
      priority: 7764,
      event: "topup",
      minimum_number_of_amount: 8817,
      minimum_number_for_combination_purchase: 3038,
      exist_in_each_product_groups: false,
      max_point_amount: 1808,
      max_total_point_amount: 1021,
      dest_private_money_id: "ab5d9193-1b1c-4135-a58c-3aeee50aeb7d",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 741024430
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 10', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9",
      private_money_id: "fbb3cdd4-06b5-4ba1-b46c-8f8c53f4e7de",
      starts_at: "2021-09-29T04:12:53.000000Z",
      ends_at: "2023-07-04T21:12:55.000000Z",
      priority: 7764,
      event: "topup",
      minimum_number_of_products: 915,
      minimum_number_of_amount: 6765,
      minimum_number_for_combination_purchase: 1327,
      exist_in_each_product_groups: true,
      max_point_amount: 6837,
      max_total_point_amount: 5523,
      dest_private_money_id: "5e90d957-ff5e-41f5-8700-d5d5196b1bdc",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 1220721869
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 11', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9",
      private_money_id: "fbb3cdd4-06b5-4ba1-b46c-8f8c53f4e7de",
      starts_at: "2021-09-29T04:12:53.000000Z",
      ends_at: "2023-07-04T21:12:55.000000Z",
      priority: 7764,
      event: "topup",
      applicable_shop_ids: ["ec332f7c-4a94-4a5c-9bc2-cc0ef7381f1c", "90f5957b-7322-4401-bc89-11b3710a7568"],
      minimum_number_of_products: 3039,
      minimum_number_of_amount: 9339,
      minimum_number_for_combination_purchase: 8964,
      exist_in_each_product_groups: true,
      max_point_amount: 8027,
      max_total_point_amount: 7132,
      dest_private_money_id: "645f2215-67c7-42a5-bf7c-d8b3c6e508b5",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 6358623
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 12', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9",
      private_money_id: "fbb3cdd4-06b5-4ba1-b46c-8f8c53f4e7de",
      starts_at: "2021-09-29T04:12:53.000000Z",
      ends_at: "2023-07-04T21:12:55.000000Z",
      priority: 7764,
      event: "topup",
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["b281d850-0d7e-437e-ae57-5b6c55bd16cd"],
      minimum_number_of_products: 3666,
      minimum_number_of_amount: 5613,
      minimum_number_for_combination_purchase: 2219,
      exist_in_each_product_groups: false,
      max_point_amount: 8982,
      max_total_point_amount: 3152,
      dest_private_money_id: "df26354f-18b6-4b9f-a78a-6535912fe71a",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 1328166474
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 13', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9",
      private_money_id: "fbb3cdd4-06b5-4ba1-b46c-8f8c53f4e7de",
      starts_at: "2021-09-29T04:12:53.000000Z",
      ends_at: "2023-07-04T21:12:55.000000Z",
      priority: 7764,
      event: "topup",
      applicable_days_of_week: [2, 1, 1, 3, 5, 2, 2],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["2f5a4f3e-909d-4f69-97d0-1c7636bc3ab5", "f1fc8993-bd09-4fe4-a496-bdc1d26ce0a0", "0300c1e2-4da8-4455-a042-a2d7402a3d14", "47e986f4-00e1-431b-b6b8-ccf6ac94eb1b", "46448009-5a21-4228-8c86-85b74f133308", "4da9e0dd-7e9f-4db9-994b-364ef87b1267", "f31eec73-7f1a-40ef-ac91-4b8aeb072c98", "41c65f8d-cb1c-4864-920e-3d12b8fa00d7", "9825ff54-ed31-46eb-9036-51347fc0d292", "711ce663-4b22-4823-85e8-a45a0cac311d"],
      minimum_number_of_products: 7885,
      minimum_number_of_amount: 5932,
      minimum_number_for_combination_purchase: 3579,
      exist_in_each_product_groups: true,
      max_point_amount: 9507,
      max_total_point_amount: 6170,
      dest_private_money_id: "2eafbf65-d8bf-438f-9710-9058c9d51e2e",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 1129343170
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 14', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9",
      private_money_id: "fbb3cdd4-06b5-4ba1-b46c-8f8c53f4e7de",
      starts_at: "2021-09-29T04:12:53.000000Z",
      ends_at: "2023-07-04T21:12:55.000000Z",
      priority: 7764,
      event: "topup",
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      applicable_days_of_week: [5, 5, 0, 5],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["9cb72f4c-7e20-410e-a9ba-bf6386c3664b", "2ec0e50d-c724-443d-8a75-89910cec8892", "0b91062e-6e67-4d50-8d68-67012a3e539b", "85cb96a3-f3eb-4362-8e1f-7a8ab0a42b57", "98d5df14-2da7-442a-87b4-b5188b3c5a80", "213c7f3f-6134-4178-b5ec-365ba7aa9714", "ab36d9f0-1794-4c21-99e9-521cc876a0ab", "adda7660-557a-491a-a56c-9888103f5578", "fe3a9b7f-aa36-418e-bdda-d6f780992ab3", "ead5fdc1-eace-405d-ab24-f9a7ec283ddf"],
      minimum_number_of_products: 9596,
      minimum_number_of_amount: 7027,
      minimum_number_for_combination_purchase: 431,
      exist_in_each_product_groups: true,
      max_point_amount: 3727,
      max_total_point_amount: 4692,
      dest_private_money_id: "56c9c581-5adb-4c3a-bf2d-163d12e7e0ee",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 1541735834
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 15', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9",
      private_money_id: "fbb3cdd4-06b5-4ba1-b46c-8f8c53f4e7de",
      starts_at: "2021-09-29T04:12:53.000000Z",
      ends_at: "2023-07-04T21:12:55.000000Z",
      priority: 7764,
      event: "topup",
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      applicable_days_of_week: [6, 2, 4, 1, 2, 3, 4, 6],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["1ae15e8f-4868-487c-a87c-c30ea56da60f", "82327103-61ea-4222-8437-77a2c6321109", "76cdf9d9-0321-4886-be2d-3631d90c9e0a", "83a826bb-bfec-4f16-a0bc-5ebe907d9c21", "8710fa67-9e7a-41f1-8982-0fe8c88d4cb5", "c6a0544d-f3cc-4f93-b0d5-13702ef8cd41", "22b84365-8ef5-4390-9298-baeeb278b24a", "ba929a21-5b18-4df1-9716-529db65ceddc", "02c7d9bd-3260-4b7b-986c-ec040706a33b", "0566fbad-b054-4c89-9b95-8f50b7eaf50d"],
      minimum_number_of_products: 9154,
      minimum_number_of_amount: 1972,
      minimum_number_for_combination_purchase: 4497,
      exist_in_each_product_groups: true,
      max_point_amount: 8783,
      max_total_point_amount: 8284,
      dest_private_money_id: "a78a956e-b91d-44d0-8a60-7bafd188a0ef",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 34257956
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 16', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9",
      private_money_id: "fbb3cdd4-06b5-4ba1-b46c-8f8c53f4e7de",
      starts_at: "2021-09-29T04:12:53.000000Z",
      ends_at: "2023-07-04T21:12:55.000000Z",
      priority: 7764,
      event: "topup",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      applicable_days_of_week: [0, 1, 3, 5, 0, 1, 2, 1, 6],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["fa2a767d-da16-41e6-b726-3c6611905dff", "0c3f02a0-f4b3-45c8-a63e-0065954a45de", "495056a8-5bbe-45fc-b1e6-84b080111d1d", "9a634ed1-3b59-443a-9c5f-87c55d49efeb", "16b9a667-7aca-42ee-a333-e969d2867d69", "1f329b1f-d085-4800-935d-e1ae45c36340"],
      minimum_number_of_products: 7883,
      minimum_number_of_amount: 6928,
      minimum_number_for_combination_purchase: 6964,
      exist_in_each_product_groups: true,
      max_point_amount: 8769,
      max_total_point_amount: 5156,
      dest_private_money_id: "b0f546db-a0d6-450f-861f-436bb20f903a",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 1598119427
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 17', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9",
      private_money_id: "fbb3cdd4-06b5-4ba1-b46c-8f8c53f4e7de",
      starts_at: "2021-09-29T04:12:53.000000Z",
      ends_at: "2023-07-04T21:12:55.000000Z",
      priority: 7764,
      event: "topup",
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      applicable_days_of_week: [2, 3, 3, 6, 3, 2, 0, 5],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["4eab07d8-2e78-4e61-bb79-bd7f2537c7f8", "35d34e3d-d63d-4afa-8db2-ca898075cdff", "aae1a663-fbe7-4903-a864-a65f71aea906", "c38cc1e3-e332-4100-8c1b-7aea48b07fa0", "b9ea4661-a2fc-413c-920c-c8ea17faa90a", "2cc5f6b2-747d-42c7-b31e-ab751a27152d", "a4eba469-be9b-453f-a87e-59d6d131a915", "03db2939-b4d5-4d73-849a-79beb78a1a6e"],
      minimum_number_of_products: 8597,
      minimum_number_of_amount: 1535,
      minimum_number_for_combination_purchase: 2859,
      exist_in_each_product_groups: true,
      max_point_amount: 1298,
      max_total_point_amount: 313,
      dest_private_money_id: "ced19f17-9f17-486e-a7e0-26a1e3699168",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 1044918877
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 18', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9",
      private_money_id: "fbb3cdd4-06b5-4ba1-b46c-8f8c53f4e7de",
      starts_at: "2021-09-29T04:12:53.000000Z",
      ends_at: "2023-07-04T21:12:55.000000Z",
      priority: 7764,
      event: "topup",
      is_exclusive: false,
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      applicable_days_of_week: [3, 5, 6, 1, 2],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["4fa170e7-683f-45dd-aeca-f434c6d9af03", "6c1dba40-9508-4c04-a484-5caeaa80a54f", "e88a5db8-7813-40bb-9645-05a1eafe2e60", "653b57a9-e299-413c-bea7-c41c68ef6d74", "1268aa33-8d14-40e8-b94e-c030a176b127", "07527f8b-175e-4eb1-b8d7-74a182d130cb", "89be1570-7fa5-4af9-bc66-355d369c2806", "4dfbdefb-15fd-4d9a-9304-66df9ab625ca"],
      minimum_number_of_products: 8921,
      minimum_number_of_amount: 6706,
      minimum_number_for_combination_purchase: 1232,
      exist_in_each_product_groups: false,
      max_point_amount: 5035,
      max_total_point_amount: 8456,
      dest_private_money_id: "055b4e8d-0615-43ab-ad55-810de68587e2",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 393061924
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 19', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9",
      private_money_id: "fbb3cdd4-06b5-4ba1-b46c-8f8c53f4e7de",
      starts_at: "2021-09-29T04:12:53.000000Z",
      ends_at: "2023-07-04T21:12:55.000000Z",
      priority: 7764,
      event: "topup",
      point_expires_in_days: 5933,
      is_exclusive: false,
      subject: "money",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      applicable_days_of_week: [5, 5, 5, 2, 0, 2],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["37499e29-284c-4b6d-8db8-b33eb828485f", "d160e90b-175d-4684-9771-f9947f761ffa", "5d017726-5c99-43dc-ba9e-ceee02cb1c0b", "3c745dcb-2649-4c6e-a4b9-68409a5e24f5", "c3b2a242-bb5e-4b2e-af71-0e8df270cd4e", "42de9b33-a3ba-4adc-9887-6b0aef7f6d9a"],
      minimum_number_of_products: 3148,
      minimum_number_of_amount: 1004,
      minimum_number_for_combination_purchase: 8824,
      exist_in_each_product_groups: false,
      max_point_amount: 8874,
      max_total_point_amount: 4622,
      dest_private_money_id: "d9e2fa1b-916e-4702-884c-b8aeb0641d4c",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 1026974769
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 20', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9",
      private_money_id: "fbb3cdd4-06b5-4ba1-b46c-8f8c53f4e7de",
      starts_at: "2021-09-29T04:12:53.000000Z",
      ends_at: "2023-07-04T21:12:55.000000Z",
      priority: 7764,
      event: "topup",
      point_expires_at: "2023-02-04T00:10:16.000000Z",
      point_expires_in_days: 9307,
      is_exclusive: false,
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      applicable_days_of_week: [2, 6, 2, 4, 5, 3, 5, 6, 0, 6],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["03220bd6-c89d-4386-aeea-5ac6b5fd5c91", "3f61025b-efef-4cc5-897d-6973f8194db5", "c4e163e6-5eab-43bf-879e-cd3652d0d908", "d20e9714-2bb4-4809-ad76-157c12616dd8", "2ad2094b-2a0e-43bd-83a3-de3027d6a479", "760dccc9-318b-422e-a02f-c03a2245ef08", "3364f713-fcd9-4644-b2a2-1dcf33e448ed", "026fffa8-2866-4283-98da-548e8efcfc76", "a91dc663-99e6-4380-8321-0b2523e86c7b"],
      minimum_number_of_products: 8933,
      minimum_number_of_amount: 6421,
      minimum_number_for_combination_purchase: 604,
      exist_in_each_product_groups: false,
      max_point_amount: 7330,
      max_total_point_amount: 9547,
      dest_private_money_id: "0f8385ad-f960-44a3-9c1d-a5085bee36be",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 258846055
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 21', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9",
      private_money_id: "fbb3cdd4-06b5-4ba1-b46c-8f8c53f4e7de",
      starts_at: "2021-09-29T04:12:53.000000Z",
      ends_at: "2023-07-04T21:12:55.000000Z",
      priority: 7764,
      event: "topup",
      status: "enabled",
      point_expires_at: "2021-06-01T00:56:04.000000Z",
      point_expires_in_days: 3761,
      is_exclusive: true,
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      applicable_days_of_week: [1, 4, 0, 2, 0, 1],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["3f5f12ce-3181-4e1e-b296-a8d03864e13d", "cb2e4aa7-d3b3-4034-8b68-48a8a6a8b744", "bd59d03b-f0b1-41f5-b82f-fb4987bdcbe2", "6410ef5f-1f75-4ba0-a450-748067ce53e7"],
      minimum_number_of_products: 5836,
      minimum_number_of_amount: 2916,
      minimum_number_for_combination_purchase: 1632,
      exist_in_each_product_groups: false,
      max_point_amount: 2505,
      max_total_point_amount: 5941,
      dest_private_money_id: "09fb47cc-635e-4971-85a9-cef4e8abf576",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 980713615
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 22', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9",
      private_money_id: "fbb3cdd4-06b5-4ba1-b46c-8f8c53f4e7de",
      starts_at: "2021-09-29T04:12:53.000000Z",
      ends_at: "2023-07-04T21:12:55.000000Z",
      priority: 7764,
      event: "topup",
      description: "nYdJrsgVxWy0PirB5ccKSjPsnaJy0xSUaUZ3KYipGveNp11WiSr08uCzB0JSt7hZNL6cvcqBnhGnyRs1ZbgEX46DL0EY9Dfg2K2KSBJ32yceHkpeJS53rQYrIERvl0KriuNlhP5R",
      status: "disabled",
      point_expires_at: "2021-12-29T19:19:26.000000Z",
      point_expires_in_days: 3283,
      is_exclusive: false,
      subject: "money",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      applicable_days_of_week: [6, 2, 6, 6, 4, 2, 3, 3, 6, 5],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["aa8a62cc-76cf-4e40-b575-04bd917be9ff", "063d1f75-5918-4472-9ae1-14fee6344f05", "f85684e1-8e0f-4ed0-b596-60a45eede309", "f138df7a-8256-47f5-a974-7dca37cc6ec1"],
      minimum_number_of_products: 3160,
      minimum_number_of_amount: 9539,
      minimum_number_for_combination_purchase: 7791,
      exist_in_each_product_groups: false,
      max_point_amount: 722,
      max_total_point_amount: 9,
      dest_private_money_id: "f0502183-db07-4409-b2f1-03d15503ac4c",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 1510341987
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 23', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9",
      private_money_id: "fbb3cdd4-06b5-4ba1-b46c-8f8c53f4e7de",
      starts_at: "2021-09-29T04:12:53.000000Z",
      ends_at: "2023-07-04T21:12:55.000000Z",
      priority: 7764,
      event: "topup",
      bear_point_shop_id: "40e5be18-49b4-4a0a-8627-c0865ff1a546",
      description: "79GcsdDtM3uSEYbuaOy1AtJbZFvX4DTrnYj6rE9HuWGm5xmBEPErYjV24xKSbfZiVFE1mx2zGT1xfUftI30JyBIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxP",
      status: "enabled",
      point_expires_at: "2021-06-18T14:39:25.000000Z",
      point_expires_in_days: 2048,
      is_exclusive: true,
      subject: "money",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      applicable_days_of_week: [1, 2, 3, 6, 4],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["16ec469e-5a42-4731-9e4a-5077adc2cf40", "ec2a33c9-54df-4234-8874-8d8c3a94efc8", "392f7550-a36c-40c8-bf46-9ba79aab1fc5", "e8ff4075-e150-4047-bb9a-6e9fd7e8b16f", "71a3be33-93c7-4ceb-8d64-3328e85fa1f9", "8945efe7-52fe-4b4f-8fd6-89d3a4f1bc94", "874b3279-0484-4c86-ba2f-13d129ee3dc0", "7343169c-e971-41c0-bde5-8654559bd7f8", "c5608523-7e8a-4542-b2fb-1a53933a58e4", "c4793847-f9c2-4eff-b4db-68db0b40ce74"],
      minimum_number_of_products: 8755,
      minimum_number_of_amount: 2430,
      minimum_number_for_combination_purchase: 3313,
      exist_in_each_product_groups: true,
      max_point_amount: 6481,
      max_total_point_amount: 5372,
      dest_private_money_id: "52e7bd0f-1821-4a8b-81b3-3fcbd13a9e6f",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 142608105
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCampaign | 0', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new GetCampaign({
      campaign_id: "656caf2b-2de2-42cf-aeda-0313bd9c4c73"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 0', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 1', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9",
      budget_caps_amount: 821943708
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 2', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9",
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 956913766
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 3', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 108195313
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 4', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9",
      max_total_point_amount: 3682,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 545797216
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 5', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9",
      max_point_amount: 4593,
      max_total_point_amount: 4835,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 1757118529
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 6', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9",
      exist_in_each_product_groups: false,
      max_point_amount: 8931,
      max_total_point_amount: 16,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 127213637
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 7', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9",
      minimum_number_for_combination_purchase: 5810,
      exist_in_each_product_groups: true,
      max_point_amount: 666,
      max_total_point_amount: 18,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 970204403
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 8', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9",
      minimum_number_of_amount: 1706,
      minimum_number_for_combination_purchase: 208,
      exist_in_each_product_groups: false,
      max_point_amount: 4291,
      max_total_point_amount: 8418,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 1511783271
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 9', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9",
      minimum_number_of_products: 4116,
      minimum_number_of_amount: 7689,
      minimum_number_for_combination_purchase: 5788,
      exist_in_each_product_groups: false,
      max_point_amount: 2774,
      max_total_point_amount: 1359,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 2025959893
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 10', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9",
      applicable_shop_ids: ["dc81e191-5cbd-4f87-9158-3349657cf1d6", "7813c47f-4d91-42b1-b73d-a2831cb3de9b", "2b732418-b7ac-49c7-bd09-1bf03643f98a"],
      minimum_number_of_products: 6279,
      minimum_number_of_amount: 5359,
      minimum_number_for_combination_purchase: 7510,
      exist_in_each_product_groups: true,
      max_point_amount: 4501,
      max_total_point_amount: 7230,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 709581834
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 11', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9",
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["87fd1416-c4cb-4f3e-9173-728ce092261f", "8a8d1baf-73af-472b-8113-d9edcb22f064", "010f4ed6-0327-4089-9813-1c2ac1a83ba3", "208dd801-eed1-4822-a43f-5b905bab6fff", "8e498872-310d-4355-bd1e-57e9092dad0e"],
      minimum_number_of_products: 4457,
      minimum_number_of_amount: 3407,
      minimum_number_for_combination_purchase: 6707,
      exist_in_each_product_groups: true,
      max_point_amount: 5760,
      max_total_point_amount: 1548,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 1343698086
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 12', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9",
      applicable_days_of_week: [3, 3, 0, 4, 6],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["ec92f73d-7c95-42ac-9a77-7e0aec01c40d", "60ef44b3-1bd8-4dfc-bb5f-944f89cff8e6", "bc42713a-d376-4171-8789-9ebd17a6b2cc", "45e43bba-6a71-44d1-a982-b82baef589a3", "35e2eaa3-ca92-4a71-a147-ce3b0c0656aa", "a6d7f92f-49b2-4070-b981-f4e9a663b080", "a1caa772-64d6-480e-8efe-e8a20932947e"],
      minimum_number_of_products: 7080,
      minimum_number_of_amount: 676,
      minimum_number_for_combination_purchase: 7843,
      exist_in_each_product_groups: false,
      max_point_amount: 3982,
      max_total_point_amount: 9040,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 929481934
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 13', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9",
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      applicable_days_of_week: [6, 3, 5, 1, 5, 0, 6],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["3cf2db81-e6b2-41a5-b39d-4b9fd729c162", "c9b63a05-67be-474d-ba06-1735f94735f3", "1675ba5c-7d22-43c7-b10f-a4a6f7eff38e", "2d5f9f80-54c7-4300-a7a1-9979210e2272", "1bfdfccf-05b7-4a7d-952c-492331b644ef", "cb0c2ce1-eafc-4b91-9281-91493c86c5d0", "5fa20815-0cfe-47aa-bc47-8316913b624a", "29332437-64ca-4347-827e-fac3e1233b00", "e1548f9f-bd0b-4eb1-976f-1991bc37e435"],
      minimum_number_of_products: 1107,
      minimum_number_of_amount: 221,
      minimum_number_for_combination_purchase: 6566,
      exist_in_each_product_groups: false,
      max_point_amount: 2106,
      max_total_point_amount: 9791,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 1010222263
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 14', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9",
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      applicable_days_of_week: [2, 2, 3, 4, 0, 0, 2],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["bc66c7e4-7796-4e97-906e-aa1c7ee21a70"],
      minimum_number_of_products: 8351,
      minimum_number_of_amount: 32,
      minimum_number_for_combination_purchase: 2740,
      exist_in_each_product_groups: true,
      max_point_amount: 297,
      max_total_point_amount: 3091,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 18435859
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 15', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      applicable_days_of_week: [5, 2],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["f8dcee70-b51b-4170-8fa8-7d62e11db238", "afbab276-1022-4c7f-8fc1-9c2a16010acc", "46343905-42e5-487d-8361-b49b5355045f", "23dbb2d6-0d05-4cac-8886-1e0e7a9881da"],
      minimum_number_of_products: 6368,
      minimum_number_of_amount: 8352,
      minimum_number_for_combination_purchase: 5036,
      exist_in_each_product_groups: false,
      max_point_amount: 4075,
      max_total_point_amount: 275,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 2089151352
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 16', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9",
      subject: "money",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      applicable_days_of_week: [2, 3, 6, 0, 1, 1, 0],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["2d3e6b97-4f59-42eb-a67c-0af1c7c7dac1"],
      minimum_number_of_products: 2931,
      minimum_number_of_amount: 6034,
      minimum_number_for_combination_purchase: 9345,
      exist_in_each_product_groups: false,
      max_point_amount: 5881,
      max_total_point_amount: 960,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 1692198697
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 17', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9",
      is_exclusive: true,
      subject: "money",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      applicable_days_of_week: [4],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["271abaf2-32e5-41eb-b8ea-b1aa1bdf4e20", "1bd8f4b6-a1de-454b-a056-004689f84ee2"],
      minimum_number_of_products: 3230,
      minimum_number_of_amount: 7451,
      minimum_number_for_combination_purchase: 4554,
      exist_in_each_product_groups: true,
      max_point_amount: 7742,
      max_total_point_amount: 9479,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 300064242
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 18', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9",
      point_expires_in_days: 4547,
      is_exclusive: true,
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      applicable_days_of_week: [0, 3, 1, 1, 5, 0],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["de8e4292-6dcf-44f6-9c6e-afb3051aa853", "af29f425-4c7e-47c8-b716-1d8be8f18f6c", "ce4285ea-7620-4829-8c71-28076bf5b6c5", "f08aaf64-c470-44ba-87aa-fd2a00b03b71"],
      minimum_number_of_products: 8856,
      minimum_number_of_amount: 8932,
      minimum_number_for_combination_purchase: 2513,
      exist_in_each_product_groups: true,
      max_point_amount: 7376,
      max_total_point_amount: 4030,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 1240121350
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 19', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9",
      point_expires_at: "2021-11-19T02:34:14.000000Z",
      point_expires_in_days: 8742,
      is_exclusive: true,
      subject: "money",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      applicable_days_of_week: [6, 1, 3, 1, 3, 6, 6, 4, 5, 4],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["4bb12986-873c-49dd-aa2f-65302b79ef0b", "34ee93d9-15bb-4086-9776-fc7d397a7aec", "abf86ce4-4c3b-4ab3-bc49-55658cbe1eca", "8f7c7517-7111-47f9-a83f-912daabf6412", "bb8900af-d454-4a7d-acd2-e02219ed9167", "c61c77a3-8b54-4ad4-9da2-cabd2846c532", "9d539fba-464e-415e-b8d3-a769d50124f0", "ad5c1868-e614-47da-a452-141c428728ec"],
      minimum_number_of_products: 1923,
      minimum_number_of_amount: 7984,
      minimum_number_for_combination_purchase: 794,
      exist_in_each_product_groups: true,
      max_point_amount: 6000,
      max_total_point_amount: 5421,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 2124414499
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 20', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9",
      status: "disabled",
      point_expires_at: "2020-09-03T07:32:22.000000Z",
      point_expires_in_days: 8909,
      is_exclusive: true,
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      applicable_days_of_week: [3, 5],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["541888d1-b216-433f-990d-d4846489e799", "21c34914-33ad-4120-8710-e4c08f0b6de8", "1ded8883-6465-4eb4-b4c8-2283712e7150", "1cb62d3e-9508-4bdc-a4ec-02c044110c76", "6e7940cb-df60-4e78-8d43-6b19820dfebf", "b69ecc38-965e-4e10-8c51-840f17bcd1aa"],
      minimum_number_of_products: 2710,
      minimum_number_of_amount: 4501,
      minimum_number_for_combination_purchase: 321,
      exist_in_each_product_groups: false,
      max_point_amount: 7683,
      max_total_point_amount: 8555,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 1793897737
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 21', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9",
      description: "KN0zqICt7BPEIsHw9iaxaPzoaDv6U6SXLkHad9cOSRej1Twb2rvpiwJLSyhoqY6ZnwMWmZEdo3TtkAPfziyB2HYxaSuFevcjssU2Qn83gWH7hF0T8Nh7eoO6asjOox0RRzWzgJ8qllmxnkMgshIHzbucfDhID3qemlo7JMNmGU",
      status: "disabled",
      point_expires_at: "2021-12-23T22:11:22.000000Z",
      point_expires_in_days: 8863,
      is_exclusive: false,
      subject: "money",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      applicable_days_of_week: [2, 2, 4, 1, 6, 5, 2, 1, 1],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["d2c1b946-1263-43d7-9d30-a6206b2d6855", "dbfb8ff5-66db-419c-9ebf-f46340210e23", "dc6061b5-887b-45f5-a791-eb7edd159595", "45aca532-97d3-4cfc-b08a-52c4a811d6ef", "1295b6e5-32c7-4ec0-b220-f379bb5b350a", "0ee93ebb-2683-4349-8919-8d1e4c9266bd", "eff5d035-8d5d-4acf-9a51-65d173aa2839", "2be42c25-4fc7-4582-af85-ba9fb60cfa52", "1b79b6e5-2926-4d68-90e1-9b1dbdac0900", "bd68eb89-7599-49d3-ab0d-a9b99aee0b4f"],
      minimum_number_of_products: 7167,
      minimum_number_of_amount: 1437,
      minimum_number_for_combination_purchase: 5405,
      exist_in_each_product_groups: false,
      max_point_amount: 5122,
      max_total_point_amount: 5799,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 851069333
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 22', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9",
      event: "payment",
      description: "3fskqX8WbkxbWTp66iGj1lRR9Xu",
      status: "disabled",
      point_expires_at: "2020-01-17T21:38:30.000000Z",
      point_expires_in_days: 4141,
      is_exclusive: false,
      subject: "money",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      applicable_days_of_week: [2, 2, 3],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["c70248d1-6705-4351-a27f-ddd1cd8d18dc", "2f16662a-8ff7-4162-bb35-e5b1a25f57a5", "6f0646ba-651b-407a-9544-bceaaceb8e81", "416eb166-48f9-4721-aac7-8f02743ef470", "e38ce69f-1380-4513-8ea6-8ede7213a46b", "c0796849-742b-47e9-8255-d0445ca8f75b"],
      minimum_number_of_products: 6519,
      minimum_number_of_amount: 9204,
      minimum_number_for_combination_purchase: 9604,
      exist_in_each_product_groups: true,
      max_point_amount: 4268,
      max_total_point_amount: 5989,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 144416934
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 23', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9",
      priority: 8247,
      event: "payment",
      description: "i3GyEdt6GGJ1GXo5UPiFJuScrEGcY5I6vYJqEcansSsP2ceIvKP9bgYanQbVQM9Z6RG0kCsPdzwEr",
      status: "disabled",
      point_expires_at: "2020-07-29T01:23:09.000000Z",
      point_expires_in_days: 6701,
      is_exclusive: false,
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      applicable_days_of_week: [2, 5, 4, 2, 5, 3, 6, 3, 6, 2],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["e73eacda-4468-4949-bb3a-a62f4d64406f", "0e45d18f-75ea-4cd6-8f5a-0defac9e50c1", "e88924f0-6b65-4f30-8f56-e86309e16306", "f65a840e-fcc1-4358-ba02-ad566c4a794a", "4a599929-8fce-49a7-bd05-338a9b37e89b", "3b8bf004-db9c-4895-9301-29ce399bc410", "ddc19920-12b8-4f27-b109-5ccc97edf707", "fdbcc7c9-aefb-4f8b-b4af-3cb45eb58378", "88d770a4-c68d-4e27-bb7f-e24cfe9835b3", "2154056d-782d-4723-a1e6-ab28035349f2"],
      minimum_number_of_products: 7111,
      minimum_number_of_amount: 7179,
      minimum_number_for_combination_purchase: 1745,
      exist_in_each_product_groups: true,
      max_point_amount: 4369,
      max_total_point_amount: 8390,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 93050173
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 24', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9",
      ends_at: "2022-12-16T14:04:32.000000Z",
      priority: 4304,
      event: "payment",
      description: "zDCyUBg3VaVg5lQKirhrBQImBbFTGr24vRn0V1KmKqNh",
      status: "enabled",
      point_expires_at: "2023-07-26T15:30:19.000000Z",
      point_expires_in_days: 3207,
      is_exclusive: false,
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      applicable_days_of_week: [2, 0, 0, 6, 0, 3, 2, 6, 1, 3],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["7c0f9847-e3ae-4082-a124-a6e0901a7354", "6428d187-e8a0-461a-8618-3e3d644a5536", "6b330ba7-6b29-4067-ad58-68a02c5fa774", "21210cdb-3264-4533-9812-330b448ad2ee", "2e26dfbd-43ca-48f9-b910-07cec711f065", "3e37e0b7-68df-4ebe-b451-bf5c7632c5a7", "8e2a9215-44c0-44b2-9718-6afb4cd24690", "bda74400-51e2-4476-a3ba-b78536bffb26", "c9de83de-e946-4774-97e0-6fc4e98f70ef"],
      minimum_number_of_products: 8578,
      minimum_number_of_amount: 9647,
      minimum_number_for_combination_purchase: 3878,
      exist_in_each_product_groups: false,
      max_point_amount: 8549,
      max_total_point_amount: 8145,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 1647064328
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 25', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9",
      starts_at: "2020-09-09T10:07:27.000000Z",
      ends_at: "2021-10-02T08:34:09.000000Z",
      priority: 6174,
      event: "topup",
      description: "J09whlF6CVlMKFH",
      status: "disabled",
      point_expires_at: "2023-05-28T23:31:32.000000Z",
      point_expires_in_days: 4189,
      is_exclusive: true,
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      applicable_days_of_week: [5, 2, 1, 6, 5, 2, 3, 1, 1, 3],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["1b2f93ed-0cff-467c-8178-907a363fe61f", "c96a90df-021a-4146-94d5-30c68664d2b6", "6cba6b82-eee9-4068-acf6-406c5caee18d"],
      minimum_number_of_products: 970,
      minimum_number_of_amount: 896,
      minimum_number_for_combination_purchase: 4732,
      exist_in_each_product_groups: false,
      max_point_amount: 1589,
      max_total_point_amount: 9503,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 1353495558
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 26', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "c40efd25-fe2d-4e41-a7b8-970d9814bca9",
      name: "uoOEnKraNjpsN9SjDxtxrgs7e0d",
      starts_at: "2022-08-19T07:43:24.000000Z",
      ends_at: "2022-04-24T15:08:25.000000Z",
      priority: 5313,
      event: "payment",
      description: "8jwX6FLCB1XlvzBazSCE1hEG2Ek",
      status: "disabled",
      point_expires_at: "2022-07-19T17:18:22.000000Z",
      point_expires_in_days: 5133,
      is_exclusive: true,
      subject: "money",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      applicable_days_of_week: [6, 0, 1, 2, 6, 3, 0, 6, 1, 5],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["c19cdb24-efc5-4e5e-a5a7-dd5ccf62acb7", "3fc330a8-a9a9-40fe-b36b-43c2d3beb8b9", "bfaec73a-3edd-4e20-88bc-621f345c0d12", "6017b142-1029-4642-a8b1-389ef1c39d18", "bd988fd9-4983-4d4e-af43-66ecacabce7f", "9754d593-6e3a-4bc5-b028-f16edc1ca33b", "de898838-9237-44c1-b38a-7d92016c2f06", "32d42e89-1830-460c-acb6-e3c0d183e10b"],
      minimum_number_of_products: 8567,
      minimum_number_of_amount: 8797,
      minimum_number_for_combination_purchase: 1756,
      exist_in_each_product_groups: false,
      max_point_amount: 4753,
      max_total_point_amount: 5617,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      budget_caps_amount: 620091485
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RequestUserStats | 0', async () => {
  let status = 400;
  try {
    const response: Response<UserStatsOperation> = await client.send(new RequestUserStats({
      from: "2022-09-14T13:31:42.000000Z",
      to: "2023-09-20T15:50:49.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListWebhooks | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizationWorkerTaskWebhook> = await client.send(new ListWebhooks());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListWebhooks | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizationWorkerTaskWebhook> = await client.send(new ListWebhooks({
      per_page: 5967
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListWebhooks | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizationWorkerTaskWebhook> = await client.send(new ListWebhooks({
      page: 9276,
      per_page: 8540
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateWebhook | 0', async () => {
  let status = 400;
  try {
    const response: Response<OrganizationWorkerTaskWebhook> = await client.send(new CreateWebhook({
      task: "bulk_shops",
      url: "H9u8x4Yq"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check DeleteWebhook | 0', async () => {
  let status = 400;
  try {
    const response: Response<OrganizationWorkerTaskWebhook> = await client.send(new DeleteWebhook({
      webhook_id: "5a68800c-8596-4032-bc92-26edac99e578"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateWebhook | 0', async () => {
  let status = 400;
  try {
    const response: Response<OrganizationWorkerTaskWebhook> = await client.send(new UpdateWebhook({
      webhook_id: "c5fed56a-1c94-46dd-8975-6a62e2f55fb5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateWebhook | 1', async () => {
  let status = 400;
  try {
    const response: Response<OrganizationWorkerTaskWebhook> = await client.send(new UpdateWebhook({
      webhook_id: "c5fed56a-1c94-46dd-8975-6a62e2f55fb5",
      task: "process_user_stats_operation"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateWebhook | 2', async () => {
  let status = 400;
  try {
    const response: Response<OrganizationWorkerTaskWebhook> = await client.send(new UpdateWebhook({
      webhook_id: "c5fed56a-1c94-46dd-8975-6a62e2f55fb5",
      is_active: false,
      task: "bulk_shops"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateWebhook | 3', async () => {
  let status = 400;
  try {
    const response: Response<OrganizationWorkerTaskWebhook> = await client.send(new UpdateWebhook({
      webhook_id: "c5fed56a-1c94-46dd-8975-6a62e2f55fb5",
      url: "fa79S",
      is_active: true,
      task: "process_user_stats_operation"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserDevice | 0', async () => {
  let status = 400;
  try {
    const response: Response<UserDevice> = await client.send(new CreateUserDevice({
      user_id: "a7691048-87d3-4466-9bea-2b0a828f304b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserDevice | 1', async () => {
  let status = 400;
  try {
    const response: Response<UserDevice> = await client.send(new CreateUserDevice({
      user_id: "a7691048-87d3-4466-9bea-2b0a828f304b",
      metadata: "{\"user_agent\": \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:120.0) Gecko/20100101 Firefox/120.0\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetUserDevice | 0', async () => {
  let status = 400;
  try {
    const response: Response<UserDevice> = await client.send(new GetUserDevice({
      user_device_id: "5d1dc15b-ebeb-4570-b37c-a9518c2ae8df"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ActivateUserDevice | 0', async () => {
  let status = 400;
  try {
    const response: Response<UserDevice> = await client.send(new ActivateUserDevice({
      user_device_id: "d01d2d97-d06b-41a9-899c-029db3babd9f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBanks | 0', async () => {
  let status = 400;
  try {
    const response: Response<Banks> = await client.send(new ListBanks({
      user_device_id: "597206b1-aeb1-4add-aba7-e6ab643ab750"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBanks | 1', async () => {
  let status = 400;
  try {
    const response: Response<Banks> = await client.send(new ListBanks({
      user_device_id: "597206b1-aeb1-4add-aba7-e6ab643ab750",
      private_money_id: "ce16cbd5-82cf-493b-a257-b82a91a0ecc9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBank | 0', async () => {
  let status = 400;
  try {
    const response: Response<BankRegisteringInfo> = await client.send(new CreateBank({
      user_device_id: "3ee4ea1e-ed97-438a-9ecf-3ec3f8058f43",
      private_money_id: "19edc2a0-36a6-4009-b9d8-b2bea9720b52",
      callback_url: "XSkWvgwMdC6YsQVBM615BSLRTB4phpjbt6QHeDKxXdEg3OxGlsZaVSpjoQ6ff",
      kana: "Ae6kpXiCTiSBUIe5iqIMOcjyqB"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBank | 1', async () => {
  let status = 400;
  try {
    const response: Response<BankRegisteringInfo> = await client.send(new CreateBank({
      user_device_id: "3ee4ea1e-ed97-438a-9ecf-3ec3f8058f43",
      private_money_id: "19edc2a0-36a6-4009-b9d8-b2bea9720b52",
      callback_url: "XSkWvgwMdC6YsQVBM615BSLRTB4phpjbt6QHeDKxXdEg3OxGlsZaVSpjoQ6ff",
      kana: "Ae6kpXiCTiSBUIe5iqIMOcjyqB",
      birthdate: "KlSFGLuq"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBank | 2', async () => {
  let status = 400;
  try {
    const response: Response<BankRegisteringInfo> = await client.send(new CreateBank({
      user_device_id: "3ee4ea1e-ed97-438a-9ecf-3ec3f8058f43",
      private_money_id: "19edc2a0-36a6-4009-b9d8-b2bea9720b52",
      callback_url: "XSkWvgwMdC6YsQVBM615BSLRTB4phpjbt6QHeDKxXdEg3OxGlsZaVSpjoQ6ff",
      kana: "Ae6kpXiCTiSBUIe5iqIMOcjyqB",
      email: "Dn2oMYRFh8@cqnV.com",
      birthdate: "spF"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBankTopupTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateBankTopupTransaction({
      user_device_id: "9731bdef-c9cb-4562-aab7-3260e6e80821",
      private_money_id: "6430956a-8159-4b67-b891-12b31abaa62d",
      amount: 6180,
      bank_id: "b2a8d913-e1e7-4b54-a0ca-35cb623fc62c",
      request_id: "a4b2e108-b3f9-4a0d-b68c-9b1921501664"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "980c3e90-4e8b-4dfe-9cc2-5abf8be18e0e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "980c3e90-4e8b-4dfe-9cc2-5abf8be18e0e",
      per_page: 2045
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "980c3e90-4e8b-4dfe-9cc2-5abf8be18e0e",
      page: 1763,
      per_page: 3892
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "980c3e90-4e8b-4dfe-9cc2-5abf8be18e0e",
      available_to: "2020-05-14T21:58:17.000000Z",
      page: 6920,
      per_page: 6780
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "980c3e90-4e8b-4dfe-9cc2-5abf8be18e0e",
      available_from: "2020-06-02T22:18:05.000000Z",
      available_to: "2022-08-31T19:46:53.000000Z",
      page: 9818,
      per_page: 2778
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "980c3e90-4e8b-4dfe-9cc2-5abf8be18e0e",
      available_shop_name: "RZ4jdyf",
      available_from: "2020-05-07T18:57:37.000000Z",
      available_to: "2021-06-29T00:36:35.000000Z",
      page: 5192,
      per_page: 5210
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "980c3e90-4e8b-4dfe-9cc2-5abf8be18e0e",
      issued_shop_name: "a0",
      available_shop_name: "PC",
      available_from: "2023-09-23T05:40:19.000000Z",
      available_to: "2020-05-25T08:26:10.000000Z",
      page: 7197,
      per_page: 3633
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "980c3e90-4e8b-4dfe-9cc2-5abf8be18e0e",
      coupon_name: "HT399",
      issued_shop_name: "N8h",
      available_shop_name: "oSQFYDUU0",
      available_from: "2021-11-01T02:34:20.000000Z",
      available_to: "2022-01-12T14:30:40.000000Z",
      page: 9416,
      per_page: 1075
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "980c3e90-4e8b-4dfe-9cc2-5abf8be18e0e",
      coupon_id: "dREQC39nZB",
      coupon_name: "v4F8J7",
      issued_shop_name: "zyDYEv",
      available_shop_name: "7bctcmIq",
      available_from: "2022-01-08T15:42:28.000000Z",
      available_to: "2020-10-23T21:27:28.000000Z",
      page: 32,
      per_page: 725
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 0', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_amount: 211
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 1', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_amount: 3508,
      storage_id: "75d3759f-b13f-4830-b1fb-a893c52a265e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 2', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_amount: 640,
      min_amount: 5626,
      storage_id: "1e1861d9-ceba-49bc-9539-cfadcb22fd05"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 3', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_amount: 335,
      usage_limit: 693,
      min_amount: 226,
      storage_id: "6947f9ed-75f8-45bd-8b25-52a69472aaef"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 4', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_amount: 4100,
      code: "R8HDeI",
      usage_limit: 3047,
      min_amount: 3379,
      storage_id: "d973ea08-2cb8-4a3b-9429-df556027307b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 5', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_amount: 1500,
      is_public: false,
      code: "RQOsOxJyi",
      usage_limit: 9361,
      min_amount: 9121,
      storage_id: "5ce9d506-a774-4733-9e04-bab03ca2b36f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 6', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_amount: 1119,
      is_hidden: true,
      is_public: true,
      code: "sSLi4FA",
      usage_limit: 5591,
      min_amount: 9450,
      storage_id: "c1f86476-2b9a-43a3-8e2f-5f229d191b7f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 7', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_amount: 2374,
      is_disabled: true,
      is_hidden: true,
      is_public: false,
      code: "GhO7M",
      usage_limit: 4101,
      min_amount: 4079,
      storage_id: "731e5e0d-c89f-45ae-84a9-a046d48528e9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 8', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_amount: 5192,
      display_ends_at: "2022-03-22T04:10:52.000000Z",
      is_disabled: true,
      is_hidden: true,
      is_public: true,
      code: "Yqy7R5Sel4",
      usage_limit: 5098,
      min_amount: 9329,
      storage_id: "4663db44-f4b6-4bed-a41d-57429d8eff32"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 9', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_amount: 2663,
      display_starts_at: "2022-04-10T17:45:34.000000Z",
      display_ends_at: "2020-10-24T23:11:39.000000Z",
      is_disabled: false,
      is_hidden: true,
      is_public: false,
      code: "0FIdNSbIr",
      usage_limit: 3116,
      min_amount: 7710,
      storage_id: "4b1f7e04-e9dd-43ef-b15e-50c9e0e1ca89"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 10', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_amount: 9523,
      discount_upper_limit: 1248,
      display_starts_at: "2023-08-18T20:58:26.000000Z",
      display_ends_at: "2020-09-09T17:53:38.000000Z",
      is_disabled: true,
      is_hidden: true,
      is_public: true,
      code: "k",
      usage_limit: 1740,
      min_amount: 1014,
      storage_id: "0a85af75-3f55-4851-acc8-d7c8cd054ed7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 11', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_amount: 8637,
      description: "HdfJKJGJOe4o3A7Ast7GZKKewMQbpvWdRIf0j2NcGpd9k",
      discount_upper_limit: 7065,
      display_starts_at: "2021-11-01T00:17:59.000000Z",
      display_ends_at: "2023-04-22T21:35:54.000000Z",
      is_disabled: true,
      is_hidden: true,
      is_public: true,
      code: "Wu",
      usage_limit: 1690,
      min_amount: 1665,
      storage_id: "ad2ae724-d2c7-406a-9532-eb07c7ff581e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 12', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_amount: 4237,
      is_shop_specified: true,
      available_shop_ids: ["24655338-f20d-49e2-913f-4903e8b2dafc", "b8d0486a-650f-43fa-af4d-6d60b5616f0d", "69b492eb-34d5-40e6-9102-47a5eac749da", "0209ae79-d1c7-4bae-b6ba-57110a5247f1", "7ebbc2ec-c339-4e6b-b649-517ee36f89ba", "080ccf20-32e3-44b3-b53b-118a3b224ee7", "65eda1d1-a682-4088-952f-d0668758efd6"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 13', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_amount: 9475,
      is_shop_specified: false,
      available_shop_ids: ["f15ef4cb-9fc5-4715-bf4f-5c411140a26c", "fc981986-ee4d-43d5-95ac-a89576490394", "78d88e5c-4959-43e2-aca3-907bf9069ec1", "082471ee-a54f-4f18-8a55-fd5d4a04e7ff", "46aaff20-eef7-467c-a32b-949c56be44b5", "cfc3ee75-4795-4f85-ba8f-9f3a1cd88f12", "6b481d5e-52a4-4159-9e67-3ccc80520a55", "041478ea-833a-4095-ac8d-7132cd7f5824"],
      storage_id: "adac31cc-1b5b-4f28-970f-e9c9640bc4ad"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 14', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_amount: 5372,
      is_shop_specified: true,
      available_shop_ids: ["2fc051da-0b29-437f-b55f-51a9baf18990", "4669fe4b-8207-499a-a686-e7e8b4f3fbb7", "5d54ab93-6655-4a01-adf0-f3de0e0840f4", "d688adb9-d93e-49e6-8ddf-34a74799467f"],
      min_amount: 3214,
      storage_id: "95d85e32-8754-45e8-a4fd-a12c06350980"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 15', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_amount: 9111,
      is_shop_specified: true,
      available_shop_ids: ["adad19ff-532f-4234-9c5a-31823ea88eae", "337654c7-e6ed-431d-8333-0d9c56dbfb6c", "375ec5d9-fa9a-4453-9c64-ae6b09e0a27e"],
      usage_limit: 4306,
      min_amount: 1213,
      storage_id: "45af2c49-36c8-4e6c-826f-a5b7a222e490"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 16', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_amount: 7401,
      is_shop_specified: true,
      available_shop_ids: ["94aa6ff3-6fa8-4397-ac2e-4191001a3a51", "1ce9a5e5-8d4c-42fa-94e7-2139e0d28846", "5e95c68e-8c3d-46be-bd43-69d0f2fcdc36", "6e35aee2-23ef-4eca-bfa3-cbbd97650c2c", "e6a0c518-3f13-4dbc-9fe0-d1eb6e8c9cc1", "07852ea4-e28d-4abb-8e45-5f895413d2bc", "3ccc7586-33d7-4a5a-b0f8-05bc4634a087", "5a2fd7bd-6283-4c22-816b-a16fcd543f9b"],
      code: "rtXdkj",
      usage_limit: 3339,
      min_amount: 1355,
      storage_id: "cfb0c6de-448f-4794-9510-cb581e739114"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 17', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_amount: 9901,
      is_shop_specified: false,
      available_shop_ids: ["8ffb3e4d-86f8-44b1-ab7f-2f3d07e56a48", "6a29f496-ff14-47d4-963d-9b86bc6376e2", "840b2470-0b21-4eaf-92d2-0f85346dbca1", "64d68188-88f8-4e37-b909-0f87c1e8cd9f", "ff679cae-1a71-47ef-81c6-5ad45501dd2f", "5c144aaa-1e28-41d6-a9d7-22de755aecc7", "0a6d636b-ff0d-493b-a23f-6637f42d7b23", "8b362472-c602-43f3-8b11-631baa686ee7", "028cd575-fe40-4fb2-a9e8-f280168cb8ef", "757ac34d-0129-43a0-b828-78c4e69be2aa"],
      is_public: false,
      code: "fU3T",
      usage_limit: 5546,
      min_amount: 7700,
      storage_id: "5589f5c3-788c-47b1-81fc-8f38d0f43b66"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 18', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_amount: 9174,
      is_shop_specified: false,
      available_shop_ids: ["5ceabfee-19eb-4683-baf9-d5e1eacd3507", "809e5b4d-316f-481c-b62c-d410f3bdb948", "fec823ce-c0ff-4a8b-86ea-51ce8acc4f31", "5b997cb6-664d-41f4-b14e-ca176fc69707"],
      is_hidden: true,
      is_public: true,
      code: "T0LSnWyLC",
      usage_limit: 5449,
      min_amount: 6633,
      storage_id: "208fa5e1-1053-4c6d-b802-8da1b68446cf"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 19', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_amount: 7705,
      is_shop_specified: false,
      available_shop_ids: ["86f68ee2-d2f9-4f81-832c-b146b6aec9bd", "21e620a6-7e1b-47c2-9755-abda1b60ec80"],
      is_disabled: true,
      is_hidden: false,
      is_public: false,
      code: "wMvzRhZdC9",
      usage_limit: 9996,
      min_amount: 9168,
      storage_id: "0f7ce2c9-7b8b-41e2-b89b-e9ffc23a3452"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 20', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_amount: 7791,
      is_shop_specified: false,
      available_shop_ids: ["7a0ff43d-82ae-4772-95d3-b8cd81a1fdbe", "a30dd904-b8ab-4e63-81ae-cc24b19369e5", "4241a7b6-3e19-40c4-9c91-e90c60b09bdf", "49f7e798-8e0b-4989-accc-69706d919796", "ee4ab866-17e8-45bb-a577-693b47eb551f", "39ebbaac-5c96-4d9a-ab16-0c6a67fc6168", "ee21fb11-81ef-4139-9c71-3f412161b6ea", "af607901-bfbd-4fb0-831b-f9b3ac5d9da5", "9737867b-1eb5-4265-ab6d-e221016d8b32", "775bc3a7-8bba-4887-863c-cdc2113f9d8b"],
      display_ends_at: "2023-01-21T02:56:37.000000Z",
      is_disabled: false,
      is_hidden: true,
      is_public: false,
      code: "QxL4LWrEkU",
      usage_limit: 4873,
      min_amount: 1345,
      storage_id: "61c54144-fcac-47d9-a461-ced5c04d01ff"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 21', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_amount: 8397,
      is_shop_specified: true,
      available_shop_ids: ["0d4ffd34-0e8a-4517-bbd6-f60b82e8bf31", "b27ea8af-4fdb-47f8-9930-8a031c5e5a03", "7434137a-3eb6-4df1-8ab9-4e524483acbc", "3ac83c6c-c7ff-482a-a975-db715c5220cf"],
      display_starts_at: "2022-08-25T22:18:49.000000Z",
      display_ends_at: "2023-04-18T08:03:26.000000Z",
      is_disabled: false,
      is_hidden: true,
      is_public: false,
      code: "77B",
      usage_limit: 5258,
      min_amount: 4731,
      storage_id: "ac0c702a-f3fa-4bab-8656-cfd1e7757485"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 22', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_amount: 6934,
      is_shop_specified: false,
      available_shop_ids: ["1d4d183e-d10e-433a-8632-9cdc6c751e60", "37dfec06-f6d8-42bd-b92a-4f012f95706d", "784d2a2b-7ed1-491e-8a4a-4069a0b84fc5", "a255d145-1a4c-432c-94d6-96fdac0a94ba", "565aacec-11f9-4184-9de3-265bb02ce98f", "4100048e-9b66-4b5b-a47c-587ef280f724"],
      discount_upper_limit: 5416,
      display_starts_at: "2023-07-12T06:22:38.000000Z",
      display_ends_at: "2022-02-06T20:19:13.000000Z",
      is_disabled: true,
      is_hidden: false,
      is_public: true,
      code: "Jp",
      usage_limit: 4980,
      min_amount: 630,
      storage_id: "5eb4e058-13f2-495f-b8ea-777307269e70"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 23', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_amount: 3541,
      is_shop_specified: false,
      available_shop_ids: ["5525cca4-e18a-40ca-af66-7082b2211d94", "677441e2-b8ad-42a5-91e6-ed6403d70405", "309043b8-987c-426c-99c9-f437723311e3"],
      description: "3oyQQIsUl3rCM2ZMpE4WDor4IADTHdTPsjhUsWbuhnbIUFlfvobOclFXKfvdQivs3hjtD1VYnThEQOLtlkRPIAeI3C1kLwoSJ0",
      discount_upper_limit: 8491,
      display_starts_at: "2023-02-28T17:23:51.000000Z",
      display_ends_at: "2022-11-09T13:24:04.000000Z",
      is_disabled: true,
      is_hidden: false,
      is_public: true,
      code: "wzgZ3SAsj",
      usage_limit: 2544,
      min_amount: 2421,
      storage_id: "9a8f0350-1c8a-4ead-9120-14775cc30fcf"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 24', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_percentage: 1997.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 25', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_percentage: 888.0,
      storage_id: "a5811193-26ba-4643-b1f7-a2b6fea4f569"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 26', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_percentage: 825.0,
      min_amount: 1754,
      storage_id: "5d673855-75a7-4c16-9510-791088c91073"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 27', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_percentage: 3572.0,
      usage_limit: 6402,
      min_amount: 9385,
      storage_id: "51e099f1-776a-4237-836a-3ca830f7dbca"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 28', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_percentage: 7601.0,
      code: "azd0M0QE8",
      usage_limit: 8179,
      min_amount: 489,
      storage_id: "29f6c691-56b7-40be-97eb-8886839228f4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 29', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_percentage: 7919.0,
      is_public: false,
      code: "SIs3s",
      usage_limit: 2822,
      min_amount: 9971,
      storage_id: "163a513a-d3b0-43e2-935a-f5b14948a6fc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 30', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_percentage: 928.0,
      is_hidden: true,
      is_public: false,
      code: "rMDg0i",
      usage_limit: 9666,
      min_amount: 1044,
      storage_id: "c6245312-6532-45e5-9874-cb119eea6e36"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 31', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_percentage: 8453.0,
      is_disabled: false,
      is_hidden: true,
      is_public: true,
      code: "vRehYIZbMh",
      usage_limit: 3877,
      min_amount: 9677,
      storage_id: "baafb710-262f-49e6-bfa5-2803664303bb"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 32', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_percentage: 6013.0,
      display_ends_at: "2023-05-17T12:52:46.000000Z",
      is_disabled: true,
      is_hidden: false,
      is_public: true,
      code: "8D",
      usage_limit: 9652,
      min_amount: 6464,
      storage_id: "f7bde4e0-65c5-4cf6-b70f-1e1a035bbf21"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 33', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_percentage: 4572.0,
      display_starts_at: "2024-02-18T17:56:07.000000Z",
      display_ends_at: "2022-07-31T18:18:40.000000Z",
      is_disabled: true,
      is_hidden: true,
      is_public: true,
      code: "T70LQ2ep",
      usage_limit: 9489,
      min_amount: 2168,
      storage_id: "faab7968-148e-4713-9894-af76bd351dae"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 34', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_percentage: 4966.0,
      discount_upper_limit: 4594,
      display_starts_at: "2021-06-16T18:20:46.000000Z",
      display_ends_at: "2020-01-11T14:32:17.000000Z",
      is_disabled: false,
      is_hidden: false,
      is_public: true,
      code: "wCwzvGv5",
      usage_limit: 4980,
      min_amount: 1833,
      storage_id: "69d87ffc-5b83-440e-9842-f9399c396eb3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 35', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_percentage: 2045.0,
      description: "41AdQSvr2jD2CPBEg6qDXhSH8hafJy0sDTnMPtA7T3E2nC8JZcqIcqZB2nkhw5Vunnh29qWQZz14xB891rPV7FcdDeB61vcO",
      discount_upper_limit: 9434,
      display_starts_at: "2022-03-17T14:02:08.000000Z",
      display_ends_at: "2021-06-03T04:50:37.000000Z",
      is_disabled: false,
      is_hidden: true,
      is_public: true,
      code: "NBAdr6",
      usage_limit: 2330,
      min_amount: 7435,
      storage_id: "ae7481fe-25ec-4fbc-a619-477a74124162"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 36', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_percentage: 497.0,
      is_shop_specified: false,
      available_shop_ids: ["6abc231e-fd47-4eb4-bf2e-3e30873c1003", "1cd8f3ac-ecf7-45da-af82-823013980552", "df7d3e02-8d80-45db-9404-e6390aa62230", "152b702d-66ed-4dd4-b680-fe7c47425f39"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 37', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_percentage: 8588.0,
      is_shop_specified: false,
      available_shop_ids: ["34ab3c1f-f07c-4f2d-bf6d-e9655dffd7ce", "9671f68a-22e9-45a6-be59-2bb60549d4b2"],
      storage_id: "79373a42-4063-48b0-8f6e-5735ec7a2179"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 38', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_percentage: 4472.0,
      is_shop_specified: false,
      available_shop_ids: ["ad5efba7-c378-4258-b6bb-354b73ccc006", "fdf63b24-cddf-4144-a12a-e3181842ef30", "704a7f0d-aa5f-4563-97b2-94760e99ed35", "def3c63c-c44e-4cf6-bec5-f352aff7efff", "edd3e0d2-3c1b-488f-b1ef-fd0b839dc4f6", "cae95ad5-2d3b-4a6f-9053-9a4debeaa614", "ce9f70f8-2289-4775-abf7-7414776b113c", "91eb071f-46ef-4569-b3b4-3f33614c8f0c"],
      min_amount: 4925,
      storage_id: "fec78886-c115-4168-8bcf-778e7836c574"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 39', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_percentage: 4104.0,
      is_shop_specified: false,
      available_shop_ids: ["28db048d-7f58-4a88-a737-7d271935306f", "1ce20970-362c-4814-b561-44e59e8bfb23", "7a6c2c37-a86c-479a-90cf-1a2e9c7b8ab5", "e3c517ad-8e38-43c1-bd22-8a7cebf34ee5", "25e031b6-e2a8-4a3b-a854-bfeec78298a1", "0fd6c17d-55f2-4029-86d3-a36ac47eff62", "ead15dc2-d7fd-41ba-9c8e-9f97f161eeb1", "8d14362d-ca0e-49e8-a952-44ea487b2493", "e9a2c518-7754-4597-8ed3-5da746c40c15", "d5ea4095-5f28-4155-81b4-05a831fc71dc"],
      usage_limit: 1732,
      min_amount: 715,
      storage_id: "90f9a9d0-3aa2-4c07-8f76-132d0e6819f9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 40', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_percentage: 3211.0,
      is_shop_specified: false,
      available_shop_ids: ["79af150f-106b-46a1-b49b-d5cb889fa51d", "f9e3f481-1021-4f63-9918-fcba262743d7", "1b157b5d-77c3-4ff9-8107-0dbe6ad6f5fd", "7423d03f-7f7d-40cb-ad34-1df41a774247", "1a1137dd-1432-481b-867a-8ae5747a7c03", "a596cdae-6adf-46d7-9878-65d0cb368b4e", "707ed936-aa52-42e9-8d56-7668e94d4286", "41c76fda-69ed-4a1f-8290-4d6d5abdff47", "2f0abaea-505e-4130-9154-8d8d53f76d4d", "e7b17c91-7a0e-45a3-aad0-2e0686b77f17"],
      code: "FLM0DLd",
      usage_limit: 2039,
      min_amount: 704,
      storage_id: "1657df15-8d56-4fd8-a4a2-2b314b3a25aa"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 41', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_percentage: 9764.0,
      is_shop_specified: false,
      available_shop_ids: ["18cd3bee-e2bf-4866-905a-5b1e0b4dfef4"],
      is_public: true,
      code: "unVJbtCn",
      usage_limit: 6003,
      min_amount: 666,
      storage_id: "09fdb62f-b5e0-47ff-bce4-390d8b71a125"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 42', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_percentage: 4678.0,
      is_shop_specified: false,
      available_shop_ids: ["415103d6-778f-4a2d-9f63-a88327a71bdc", "e3901aea-8fc6-4d78-ae20-bdf052e59ee0", "80ee48eb-068b-41ae-8b2e-1e7289377305", "8035730f-915b-49b7-ae7f-b0426898b9db", "4ef516e9-d7aa-40ae-aae1-316160710034"],
      is_hidden: false,
      is_public: true,
      code: "ZK",
      usage_limit: 1634,
      min_amount: 4626,
      storage_id: "a35f97c8-1a22-48d1-80d4-9234467568fe"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 43', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_percentage: 6931.0,
      is_shop_specified: false,
      available_shop_ids: ["8e51fe3b-d25e-4b9e-a728-d89b81dc7144", "eab0f53f-8025-40c2-b675-af31675c0299"],
      is_disabled: true,
      is_hidden: true,
      is_public: true,
      code: "M",
      usage_limit: 7626,
      min_amount: 8180,
      storage_id: "8828df58-a2cc-484d-8df7-e3dd65d054e0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 44', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_percentage: 3177.0,
      is_shop_specified: false,
      available_shop_ids: ["f67037cd-d21f-4e69-b350-19a8573ccdd4", "0695de81-53d8-403b-b6fe-99ca5843f5b9", "013b0a99-f0c1-4450-bebc-59276a539257", "fb6937d6-44fd-4d2c-a6b0-16a592992ac0", "5991d5a1-f95c-4c8d-aeeb-5f4963c3c6b2", "eaf58ae3-5c70-45db-a9da-d2726b4fe55f", "f466ca77-d82f-4ce8-b4e0-198210a8cb90"],
      display_ends_at: "2022-03-07T03:21:20.000000Z",
      is_disabled: false,
      is_hidden: true,
      is_public: false,
      code: "dhT",
      usage_limit: 6259,
      min_amount: 4233,
      storage_id: "0dd17f90-bf18-4753-bb3a-310cd42e4f78"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 45', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_percentage: 7055.0,
      is_shop_specified: true,
      available_shop_ids: ["275127d8-8784-4ea7-82f5-dcc0c1d07f89", "cd4bf5e8-c04c-491b-81f8-d403dc2586af", "c95875d0-e03b-4df8-824c-bfa677b05288"],
      display_starts_at: "2022-09-09T11:42:10.000000Z",
      display_ends_at: "2023-12-28T16:04:43.000000Z",
      is_disabled: false,
      is_hidden: false,
      is_public: false,
      code: "F",
      usage_limit: 1079,
      min_amount: 976,
      storage_id: "f95a6c48-852d-4e39-9bbc-126a8cc8f50f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 46', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_percentage: 8307.0,
      is_shop_specified: false,
      available_shop_ids: ["1b26b3bd-f4ff-42ef-ab29-d7b3c9bab7f1"],
      discount_upper_limit: 6370,
      display_starts_at: "2021-01-28T12:04:45.000000Z",
      display_ends_at: "2020-12-13T10:32:35.000000Z",
      is_disabled: true,
      is_hidden: true,
      is_public: true,
      code: "6h",
      usage_limit: 8373,
      min_amount: 9003,
      storage_id: "fabf3eb5-6710-43db-821f-ffcef66f1236"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 47', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "94ea973c-8356-4a38-9ed2-c042ff96f8fa",
      name: "p0gixsKZWoUeORL98QDv9TW3tonru5DxxR1k",
      starts_at: "2022-10-22T05:24:38.000000Z",
      ends_at: "2024-02-05T16:19:09.000000Z",
      issued_shop_id: "203fe008-09e9-4a52-b464-4b61675c04d4",
      discount_percentage: 9482.0,
      is_shop_specified: true,
      available_shop_ids: ["59785c20-161f-431c-9314-5e7172e10607", "60df8aaf-23fd-4fec-90db-d611c05931e8", "fb148318-6fe3-47bc-81a7-c36c55ce455d"],
      description: "xbbI1pwNVNkX1wbtHq7h4XHkBbxR0Rn",
      discount_upper_limit: 267,
      display_starts_at: "2020-05-26T09:28:44.000000Z",
      display_ends_at: "2023-04-01T05:36:41.000000Z",
      is_disabled: false,
      is_hidden: true,
      is_public: false,
      code: "S2N5S6E",
      usage_limit: 1403,
      min_amount: 4886,
      storage_id: "59ca5ddb-25c0-4945-8f29-edbcb996e20a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCoupon | 0', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new GetCoupon({
      coupon_id: "f1a86eb5-c142-4b97-a2f0-7eac00280ab0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 0', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 644
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 1', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 1164,
      name: "BrmndiCNxXXwjFaRAeTxfe0YQCHzm8OG8zcqkOxIGcWZjjM6j3edDcpZu9iiE"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 2', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 4874,
      description: "wcokneeQ36NR2IjhyB4vKQ7cGlo7S",
      name: "Cjimdlgwn9qvauQ2kDhj5HLJcSNTCm30yK3y8WItCe9VYgMydEalG76qE4T1vOrKA4IwgS5AgijWRyxneekV8cIDT0hnm8h8evW68NKpdkq0PMSo6iR"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 3', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 6922,
      discount_upper_limit: 8020,
      description: "AHpgNTXOxFwqhkpZVaDhpFPp5bfKVt9DPYJAVzV6vyI6ywfpyKilj5zg8pn57kF0DYbPLXjuwrpeD0A9IDYP4sAiFNwaac9r9GBqh0SVIl9M1spjv4mKXU1rVLf6U0K44BovHKqYzk7GBG1DZKj2tBRFerhSuL22gGga7pF0nmLMfnIYTQdqHJZ8WnDHEVfpIBtEOMP2U7IkYygmkkDxd3MzpkzvPsP",
      name: "2vcZvKaf470Dw5YI6SeAOBDBgRAgmjxZGGCqaBwJ9iXjXSEfbkdsvlfnd1NOUEcUOGTeYua5DveJsn8lhIUcgIkY0oNU4ZtZZObHmdr0N6vylnlZ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 4', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 8274,
      starts_at: "2024-01-02T01:19:29.000000Z",
      discount_upper_limit: 5316,
      description: "xuj8A7eDOAWeoDpeF6vcSyg1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0Fz",
      name: "VGqOKFoU3xJNKm"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 5', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 8309,
      ends_at: "2021-11-21T21:05:38.000000Z",
      starts_at: "2023-07-10T02:25:46.000000Z",
      discount_upper_limit: 7485,
      description: "MSAgHDAlLlP6Lo5yS1v7L6lCM4yrq4lI3mHyvfAo1Zkwkd2ADoyNq2PW9ePZH1V16DlcE5mr4I9qCPq1klPYIi4fgZzpFf9vCRDU8J59OtcokEMMVhmKz2iBoGU1OxU",
      name: "mIl7jlWxrfEKMQ8FCs062PLb59yfzniw8Z7TrjWh0BQdrr7bOC0AUfJnZnSogxeCW"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 6', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 8735,
      display_starts_at: "2020-12-07T20:20:30.000000Z",
      ends_at: "2020-06-04T10:50:10.000000Z",
      starts_at: "2020-12-09T09:09:55.000000Z",
      discount_upper_limit: 5044,
      description: "wl0P2Dqh3DSK23Mk8m6Cln0nexx5CEw583J2WEBiiOFuwneTfWH1pqqlIhFKkOnPRe3g3OqYMD6Y7flopJpL06wROQZ33dSb51CrQZVorM80jAnbL9pF2AijYf8ydTws4HIQ4AniWPzD9CM0oL6ak44VafBlkQEtaE8xbTpd0",
      name: "PiIwS54q66i2nXWkvfusE3magRZXBvYQN11diT"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 7', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 9545,
      display_ends_at: "2020-09-19T01:26:40.000000Z",
      display_starts_at: "2021-09-24T16:43:05.000000Z",
      ends_at: "2022-12-07T21:31:57.000000Z",
      starts_at: "2024-02-11T15:09:26.000000Z",
      discount_upper_limit: 8988,
      description: "lP78XJI2fkoYuaeWPZ92K6Zt1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWMOeqgVzvGmf46VZC1gROo7yDwwPoswLPrFl08abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWq",
      name: "6XqlqrR9lgptmz4nyVSUDS2rGPI8RxpE3teEPiaYEeN8ncoL5boSBHerEtGhFgJdxHlskgg6LM7DHhWIQ2aljg7pW5tLDSL3EPYXvMXdIXxGA8eO"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 8', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 7441,
      is_disabled: false,
      display_ends_at: "2022-06-27T07:38:28.000000Z",
      display_starts_at: "2023-01-28T03:21:34.000000Z",
      ends_at: "2023-06-26T03:13:33.000000Z",
      starts_at: "2020-11-19T20:34:12.000000Z",
      discount_upper_limit: 2824,
      description: "mZxxvv3UzyZmkPPeL3QSeHszKal8UJ7mvjTFU0wWAMu89mD0TpxWczQUyWaVgBaLWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARX",
      name: "bk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNoucy"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 9', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 1665,
      is_hidden: false,
      is_disabled: true,
      display_ends_at: "2022-05-26T22:20:53.000000Z",
      display_starts_at: "2022-07-23T11:21:13.000000Z",
      ends_at: "2023-04-15T08:29:59.000000Z",
      starts_at: "2023-01-21T22:21:15.000000Z",
      discount_upper_limit: 4227,
      description: "X7PDggrznNWBV0p9BBTTp6AGpMMO3btHYGiB4Qalu6chDV2Pcj2ctvmZzuG53qZWTYzGouuBX6LUUUBENz9R18rNQjTARxcKWcb1nyLLVIf7PJ4PKIYRAl1UCuQycWgFlQrGdRqVd3CIlE3dO8Hdi7PJayBT5IgAK5b9hyZhcZh8MuSlVRKgCSpIL13YYuGN17rfT9n",
      name: "OtCiuSxp7i1rcacR4EWmJRYE0vgL"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 10', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 6813,
      is_public: false,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2021-10-21T16:11:41.000000Z",
      display_starts_at: "2021-10-24T07:32:12.000000Z",
      ends_at: "2020-12-19T19:38:47.000000Z",
      starts_at: "2021-09-28T17:42:48.000000Z",
      discount_upper_limit: 5636,
      description: "n2OdxgxwF29eViuwKtjsRjzvb8XUneGNN0gcbjHE0ykOW2yVlHndMAdWY9HjNAOFWD0f28rlwLb9YSbpNpmMET9MPbipC8utokXPq016coqfiAUWXxFRzN5EfouqVIJLmWFeGJqYbyf9xqeV9Lg6T4ooRxK5KRr3h8egFMY",
      name: "CN7QJ0QWlqwtDL88aLfgCd3mseLQBXIUiYpTvNgfaK3PoowpKAx3kfA31wXd04SY1O8gGOF1kRrye61uzmBIXd"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 11', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 1724,
      code: "NFs3jB",
      is_public: false,
      is_hidden: false,
      is_disabled: true,
      display_ends_at: "2021-11-29T11:20:23.000000Z",
      display_starts_at: "2023-08-10T20:41:45.000000Z",
      ends_at: "2024-02-21T12:45:53.000000Z",
      starts_at: "2022-05-22T21:41:06.000000Z",
      discount_upper_limit: 9156,
      description: "72DB37CRt8PxiPIwClGZ1KOGgE2sj7Hu6WK5M7npguch6s2J670P8hn4WhIeMSn521mnmeh5QEBdCZJtrUa6Fgp7ym0hYqDUAWMYxWfGNC0wV3aBOX1Ig8hROFB3MljH",
      name: "XrpVSkSdQBQzqXHWCk88yAdkNbUUlXp2sT5T809AbvtJaUy0K5oRI2Afv57nsS8pT7iwNl9C"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 12', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 7758,
      usage_limit: 2432,
      code: "yCsDMu",
      is_public: true,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2023-04-25T15:41:07.000000Z",
      display_starts_at: "2022-09-13T10:30:47.000000Z",
      ends_at: "2023-09-03T20:41:11.000000Z",
      starts_at: "2023-09-27T09:19:37.000000Z",
      discount_upper_limit: 1135,
      description: "FJU5quwxFBXnJ5Eq6GcNPCEVPq46GdIPJm8acYbz4K3IA8JYUILwDYHWq9h3ayYxNgOJ9lz7HMs7r8Mwpfor2g0yfZY1uTlDfXz0uDeov2GaxLjZM7ftEliKPQLWJArPq3tph1c8gKwadNnw5eCqfZdksVLOzbmWJa8YkV10V05hf8WtQGHpv3xPQzPNZMa3cTmTslTDHzq00PkzT3rjRscSaTD",
      name: "EUxwAJXNLOLDUjAEUO9KUSGzbSRmd"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 13', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 5505,
      min_amount: 8099,
      usage_limit: 2528,
      code: "66",
      is_public: false,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2023-09-06T14:36:47.000000Z",
      display_starts_at: "2022-07-24T20:56:45.000000Z",
      ends_at: "2021-08-07T19:50:16.000000Z",
      starts_at: "2020-12-20T10:12:54.000000Z",
      discount_upper_limit: 611,
      description: "wf0VsciZqVg9CY4JyxUqm9QYX9eOR0RPX1REGDLSjexe42N6h2JPSKXOz8JwoXWD3OcRqlTHYwOestfQFumGQVfUsw4hfYXr8Tws7k48pGfLa44NJMCeJ8jlsCf1ZGfe6gS6x1DqMOxCGU3f6AMPJnByO8IAY8ZIAKOHAMaB7ZxbhLpAG3vIR",
      name: "MVqbJVgHdPhvPKwzwzrbVYcpu84LTKQxDTzMnM7RDpI6DZQTPfIajSBmWzFbVf"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 14', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 2785,
      is_shop_specified: true,
      min_amount: 8652,
      usage_limit: 3005,
      code: "2cPjc",
      is_public: true,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2021-08-06T11:49:00.000000Z",
      display_starts_at: "2021-09-19T07:57:15.000000Z",
      ends_at: "2023-03-08T00:28:00.000000Z",
      starts_at: "2022-08-27T16:49:29.000000Z",
      discount_upper_limit: 8027,
      description: "5QzauCKeqrCHLOb6c1NzcpMx2l8O1vhN74ziDPGC2ST6zTd6xVdSlQkj4Z4gR5YjMf",
      name: "JAECo2gNDDCrV3PxozvlpngWpA6xbZMfc0uwppINu3aeeMh7MwqqZDhOobPpK6TParuulg11gUrgW"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 15', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 4465,
      available_shop_ids: ["2a247e31-94fc-468e-819f-867f27496618", "b43954ac-fff5-4cd5-bdc0-ddbb4deb6cbc", "80f685bd-7a3c-449f-af0d-d875cf97f8ee", "bbcdeb79-6248-4ddd-b635-945d922b6637", "9fa4de72-59a6-44c4-a299-90f66a0d631d", "f248241a-3eed-42f5-bf8c-c04c5ef02a0f"],
      is_shop_specified: true,
      min_amount: 1335,
      usage_limit: 5348,
      code: "8Yl",
      is_public: true,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2021-09-19T00:27:49.000000Z",
      display_starts_at: "2021-07-01T15:05:52.000000Z",
      ends_at: "2022-02-26T16:37:38.000000Z",
      starts_at: "2020-08-13T00:03:39.000000Z",
      discount_upper_limit: 8300,
      description: "x603bU9utxlgE1LKaCgZVizYnvZve6TUWFWHy2b5Vs5gPuvHuA5HWIqhNUoMi9wNIaJyI2pADs2B4yB1GZTk4B1PKHR2EWhPZSvV8nScTvJ4VHpUajLmD9cCimPwC97LHWaSOnICBJimGKiopraV9Fu47WiDgn9VJjED17kjNr295nMRl2EDxJjIsLyTAA5MEWhdNFDbX7fss0ltmaJnxslaUL7RrxqbBxY5tCbxb35Fz",
      name: "Afmkd3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 16', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 6172,
      storage_id: "a34504e4-2592-46f5-ac77-3ad5f06e8a27",
      available_shop_ids: ["ccc6da7d-af83-4685-a796-495b199f35eb", "526de772-eff1-427b-adf2-ad76004c99ca", "934f580a-4633-4dc7-96d6-8ebf30dc8600"],
      is_shop_specified: false,
      min_amount: 9596,
      usage_limit: 2358,
      code: "sJ8XiLAp",
      is_public: true,
      is_hidden: true,
      is_disabled: false,
      display_ends_at: "2023-01-31T13:04:25.000000Z",
      display_starts_at: "2020-07-13T20:31:30.000000Z",
      ends_at: "2023-01-13T19:15:54.000000Z",
      starts_at: "2020-08-13T19:55:53.000000Z",
      discount_upper_limit: 197,
      description: "qTZCuDots6oOpUnX5paeprWtPSGZrL9UrmNU3vFgZ69vwXIbJ7yB2uIbdTxo63tcXPzmao0EWnRVCjlgZcfxXnQfXvfoocz3td7BZ",
      name: "N78kqzJ0Us2fGr"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 17', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 2762,
      discount_percentage: 6265.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 18', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 2175,
      discount_percentage: 8715.0,
      name: "sRHFPpRHSTTSFxnvRwj3O"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 19', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 8161,
      discount_percentage: 8195.0,
      description: "urFP8R4bhOdaBwGLVVHwtN3AFb20DhVqIxWOmhxrSYnMI0dEOIqO",
      name: "FLqn2ZuLk5GF2FUuyDVUpZnC5UYez0zM0cPo"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 20', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 3320,
      discount_percentage: 6019.0,
      discount_upper_limit: 4998,
      description: "DGq4e7wXOOVc8GIqj26qcMQ423OrAYOyd21L95eAaG4JW0HS7",
      name: "0O"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 21', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 7375,
      discount_percentage: 1109.0,
      starts_at: "2024-01-01T19:21:47.000000Z",
      discount_upper_limit: 490,
      description: "LeGCgLyc3XcFOYpAAHYYK9z73uxDP2ictixYSW0AnlJyQ4ogjQgbj8PRfNm4vkTJ8joyTSHmI2se",
      name: "5qGgNKlkv5vEcEoMjbT4VP8lZF0AhpuShoXCly79fXYfw5LEwfbe5dxC9nFb6EnR37XI7b090WiBtRh0avWom7iSFIO4uZdtJGn6HW"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 22', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 1937,
      discount_percentage: 6693.0,
      ends_at: "2021-02-08T14:42:20.000000Z",
      starts_at: "2023-08-03T03:42:52.000000Z",
      discount_upper_limit: 5035,
      description: "Vq7JKL8IsIw17O7EyRwbRgUy7vFea5WeBAkgIciVnQYB9t75iPCouDaOPQZR4UpdKms",
      name: "N8b2gkMcSPrmt0hjIJu43wB7scWlYirrj6XmXYoqVEvKvw3AdEs5hGDLuaSpYl1TGEiugglxJJBGt0dcPbtQc4uSkk26uSRwX6Rx7fOEoFSQiDYpT"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 23', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 1472,
      discount_percentage: 5384.0,
      display_starts_at: "2020-06-25T12:53:17.000000Z",
      ends_at: "2020-03-23T06:40:20.000000Z",
      starts_at: "2022-12-02T12:11:19.000000Z",
      discount_upper_limit: 5086,
      description: "ywklVD4mELe2edQd6Mwu12UeT7ThuLLgJ9PT2zGkxOOzhTpPLnUQXea3eTBlP1za1n7IcWMlrV1ey0F13qC7iArhwm76E35ql4XfUae14Wbt93t26Li",
      name: "AMBYx057AoBwLeryNecuIhUBXRQRCvkSHsmDbMU34aVyZLcCNEj4KngWmPwy7k0E27omWruIWs4TAGfq9u"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 24', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 7636,
      discount_percentage: 6390.0,
      display_ends_at: "2023-04-29T22:15:45.000000Z",
      display_starts_at: "2023-07-01T22:11:39.000000Z",
      ends_at: "2023-03-16T19:38:36.000000Z",
      starts_at: "2020-04-23T03:13:29.000000Z",
      discount_upper_limit: 7943,
      description: "MntyIPzqAGarjc22UJafoQs8oM8ozozHv7pSUjn2vqwiu14DVHGOrsaIKsQ11QA0zf5QFhEcKjjKztGRK6K9KAPEUIedziHih60",
      name: "hQZO78Ysa8FmX0ccAumcgyg4cqEaxSmm8kmOYz37PEcPNNiKvN5Ht8RLA9ghACTJRDSXhb0oNXnX7lDuTKN6ygQ5h7kN0paU2HC64wcGrUcdcRO2Sa3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 25', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 3493,
      discount_percentage: 9466.0,
      is_disabled: false,
      display_ends_at: "2023-05-05T04:49:09.000000Z",
      display_starts_at: "2020-06-29T16:30:49.000000Z",
      ends_at: "2024-03-20T01:46:03.000000Z",
      starts_at: "2021-05-13T20:22:09.000000Z",
      discount_upper_limit: 4493,
      description: "A6JlqvTos7",
      name: "SrIAldP5taDahvoqIf3H7H22Xm9qyhmrKIzglEahNrgMO9grD73ccOw2h3Fa222"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 26', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 9947,
      discount_percentage: 6344.0,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2020-01-29T12:21:00.000000Z",
      display_starts_at: "2021-05-14T08:31:29.000000Z",
      ends_at: "2020-05-17T18:25:58.000000Z",
      starts_at: "2023-04-04T17:28:09.000000Z",
      discount_upper_limit: 6325,
      description: "0bAHdVRRVqtJb7GLA5jeThW5qr3yEd4dXuL0rYsAz43Mmx6hv0Ug3INp6i2B7flubMg8I3PFzXHSWu8scihqWwWKLIsgxoxZCQ2441blMtSOZHoWLqvzthoXVcLebdhYmokN15vn0WBXfGwW2mMW1f9b8gICLPqqow4qG8fKRsijZT9ACb",
      name: "FhSbUnXdQpmPpnHFqiJvOHOlQFLdxOm16oejI9dat1CLgQoRlzuyxB2QGrCPmQ415Et2SGqgy7Wowcm3CmFfxpyCPpsziVloAtynLsPgO9CFz87kImOLWynZ7sTqS"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 27', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 652,
      discount_percentage: 4768.0,
      is_public: false,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2024-02-07T10:14:25.000000Z",
      display_starts_at: "2021-05-21T07:17:35.000000Z",
      ends_at: "2020-09-18T01:11:59.000000Z",
      starts_at: "2023-05-13T03:11:22.000000Z",
      discount_upper_limit: 8045,
      description: "yY4qSDce16GC4wPtLkv3o4mk88yYjRj6ppJLnlec8JObXuRsPVeFJcsOCB9dZH0k0NKC7bYH6IQhPn4Xu22OkprhqhwvNpMEMbpSnLulsX8V7SnJwOTksCozm6o1k9oepRB7yq0Oa1SzxnfEtxAkEm7sWqtjzoUhtWxAFotkA3GwpJ6pUWjvsxF7sC23pAVbXivHZtrIAyP3B3n1m451mPU8dTD7bnX1r8l3hCw6Sn",
      name: "m9mfcT5cLUh34lWYk1AXf6CZiEJmgnIHDOUd6m8h"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 28', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 5511,
      discount_percentage: 7170.0,
      code: "pqS5",
      is_public: false,
      is_hidden: true,
      is_disabled: false,
      display_ends_at: "2023-11-24T06:35:07.000000Z",
      display_starts_at: "2023-11-24T16:28:34.000000Z",
      ends_at: "2020-02-26T23:49:31.000000Z",
      starts_at: "2021-07-04T04:31:58.000000Z",
      discount_upper_limit: 2118,
      description: "2Ig4ikrPHEQKtfhnULfkSB8hVVRhZgs0Sh",
      name: "A1T4kxBhv1AOy0nxwzXXsopchwGQjGjB8p2sVlc1F7AjO7bJtO7Dnnc0m9rCGM5hvlyZ4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 29', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 4353,
      discount_percentage: 9536.0,
      usage_limit: 8994,
      code: "8tOl1gapE",
      is_public: true,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2022-10-03T08:00:41.000000Z",
      display_starts_at: "2023-04-01T12:00:08.000000Z",
      ends_at: "2023-06-04T17:36:13.000000Z",
      starts_at: "2023-12-19T00:39:01.000000Z",
      discount_upper_limit: 4265,
      description: "CxJHTvEJuFQdQk10O1BigovU99ROsTZK65zQOhilbvDcAlCpIpPo9knGna2qU0GmaUmeizgJ6BwqETnaq5BggeTTsTdXg3gtXl8b4nZOZsr1VPBj7ivp8ue6C3vcL7BXf3IHjK0XiCg0zcQRlonr1N4IocuKCcZ1hdXCgyALhLsPZ4xEZBaL9gPoE5PnOxSYIBQUZMwQEKQp536z2WYA1sx132uYplZst",
      name: "pjBFQy9bZmz7mGiFtXmRSje5IwYSIqDRQ8l1f3l8HQkQuvmK2Ptks2ZcRpli1kcYUjdKenD"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 30', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 1258,
      discount_percentage: 9313.0,
      min_amount: 9666,
      usage_limit: 2543,
      code: "z7aB",
      is_public: false,
      is_hidden: false,
      is_disabled: true,
      display_ends_at: "2020-12-28T04:42:09.000000Z",
      display_starts_at: "2021-12-13T06:02:41.000000Z",
      ends_at: "2022-12-01T06:09:51.000000Z",
      starts_at: "2023-05-17T04:33:53.000000Z",
      discount_upper_limit: 6394,
      description: "Mmx1hSkje9X0kmePd8GXi22Jw1idAxcQ9RQcA93jzkpVE1oN8GZytUXsp14vePeJl09h1SmS",
      name: "e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 31', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 3962,
      discount_percentage: 3085.0,
      is_shop_specified: false,
      min_amount: 9560,
      usage_limit: 330,
      code: "e9aRBNGFiX",
      is_public: true,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2020-08-25T08:57:32.000000Z",
      display_starts_at: "2022-01-25T09:13:04.000000Z",
      ends_at: "2024-01-06T03:33:03.000000Z",
      starts_at: "2021-09-05T05:31:18.000000Z",
      discount_upper_limit: 2878,
      description: "m9IOMRvPLFSPNSfRkv8Et2jCeNHdXqCXUrpWRI",
      name: "EnGneOjH6PTi68jf1Ll0O4t8yu2YY3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 32', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 1120,
      discount_percentage: 8380.0,
      available_shop_ids: ["64d6b00b-cb1f-4f8b-8718-f26d3cf2fbe3", "16440ee2-c67b-455a-901d-8bd25bab6e16"],
      is_shop_specified: true,
      min_amount: 9542,
      usage_limit: 1347,
      code: "WEFlMAhG",
      is_public: false,
      is_hidden: true,
      is_disabled: false,
      display_ends_at: "2021-11-21T08:44:15.000000Z",
      display_starts_at: "2023-04-11T18:41:38.000000Z",
      ends_at: "2020-08-12T20:18:38.000000Z",
      starts_at: "2023-05-27T17:04:09.000000Z",
      discount_upper_limit: 2662,
      description: "qHBJlao6arWtW2Kf2i4IAcwQjuFWx2kNI9qHm3gWQVGMbEKu4AfuwweTMrw4f2dzO7lqy4kEKJ1Q7c8C0SZpOWKljojyXNatscwZjWuBesyFuc4s",
      name: "WKFJnLD7m3pQpjDhF5ByJUZoKtqULctVH6JYk9cBHdXfv4m"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 33', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_amount: 5368,
      discount_percentage: 4713.0,
      storage_id: "fe9a968a-45b0-4e79-a218-bd8e0dd9174c",
      available_shop_ids: ["be2b48fa-5ad4-45aa-8796-c9e8913f025b", "24dc5d48-c29d-4cf6-a74f-d2d9ca816e14", "294d9a45-59be-4b1c-aa23-892f1c12584f", "5bb5a978-ffca-4e26-9330-ee9f81010233"],
      is_shop_specified: true,
      min_amount: 1400,
      usage_limit: 8115,
      code: "GPvt",
      is_public: false,
      is_hidden: false,
      is_disabled: true,
      display_ends_at: "2023-08-08T04:36:15.000000Z",
      display_starts_at: "2023-03-24T15:04:33.000000Z",
      ends_at: "2021-09-22T13:03:20.000000Z",
      starts_at: "2022-11-05T07:20:17.000000Z",
      discount_upper_limit: 8249,
      description: "a5RpyBdhfD",
      name: "mpMgxIW5ljI6yfgW8zOoaul3ISoLlGYqCoXoGAustVKiyGKg6I2c4vjJ0uuFNk5xEatUCGYnUIhqAnDQImUocNLmlkEs1s3oajWUDkbVb94dhcQmTjATi"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 34', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_percentage: 3227.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 35', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_percentage: 758.0,
      name: "TByqrSIzi26MGgpQ9DKPsTX2x6llLqyqxL"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 36', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_percentage: 3073.0,
      description: "BzmQKSHklP2GNjfKFk3xSPN2EauZcekm4uUHwCvLyAybYYI1PTnYt6AX3ZMraJiLHRNzuStDZHp5MvhzfbMCo9qyaARxtZqgB5ft0k4jfS4r5kfrLJkZytv5gO2QqNTMBVQz08laq2biuqoxBaoCNpyYWsiSLe8XgZiLcB9lkuwUm",
      name: "5gGSX2SbBRPaYeWynmUQkGZMrt25VWYHR7PmuYOuy85eAINi4DCh9E1piomvY0y0iLigYmahsEfLajE38CSizXaYXCbSM5b6xxCi9aS7pUn8sHDE4F3kc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 37', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_percentage: 8159.0,
      discount_upper_limit: 9704,
      description: "Q4a3rPgThS8KkZCOZQxeSP2z9qxNvFrLUebeM3qu8knhRZPaevJazOcUuFHzOggogIb0heOl2hQPfOiPoRxRiCop5Q0A9gBKU33EhyGU9Sc7TWphUCFQOlhJCzSIu3L4oB0QKjjVXdg6wCnP4F0PUy8JyZq3ofPUU0rY2rRd10bnDEPKoSGRnM40Adb2lsHFBNfL0ieognilvSR4pMoCwkxpSpqKLDrvgRvBVvAYQP0NP5o8oIb",
      name: "6bcvTH9KRHlq0wqM01LRxPcYJN00R6J1knyJeLDqePaGS57qQUn9QotexnhecBro7jHBJHSTWFK0aJRYTf"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 38', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_percentage: 3205.0,
      starts_at: "2023-08-14T09:47:57.000000Z",
      discount_upper_limit: 4530,
      description: "ajM6sQRgc1VEyXHMXBj8otEAcFy5ooXoXuzlRpCyCoZoaTfbTmVX0XqqL2DDCdNGv9QaNMmxX2S2fPh6fy135I5DGGggnvkdWrHaspAw5Vcp7CE78JSe44PvWgrDoffEic8syvxPXUni2oM8QHA7lWY5GLHqITj0UgJwxmfaF0gGfgNlG67XOfGi887nNv1eh26ZZWkeJQym7n7CGmj",
      name: "25iFSdny2rQSPU5tCjVy8COfDZrZRHs0hjVGtY7fDHExM6iUcBW9LDUejJe4laTFkcJAyP9v3lR5fJ1SCFuFJVqCc62CsLVYKPyOw"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 39', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_percentage: 121.0,
      ends_at: "2021-09-30T22:48:51.000000Z",
      starts_at: "2022-02-04T03:45:23.000000Z",
      discount_upper_limit: 2439,
      description: "jaFxy00IGCXmzsObY8JjUm176PqMxSejYJwKQkQhcSsOlDNZZsSWHBkBrsiXhCnZzamORmWcssL2FF3HAzhtt18u7MooUueVWo8T9dRNvfu3qkwBDNVzugQpgEVipsMl1opS6XVL1U8vfTPgZQoGXLb8hT5vzbbFys",
      name: "VW03Q8sgkwbt7bycdIa6s2OiS448zYYuSerVgt5xpThqkxWuN4OkYmUnkAFHrW518DEhvGfJFhBLP"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 40', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_percentage: 6302.0,
      display_starts_at: "2022-04-26T17:02:14.000000Z",
      ends_at: "2021-12-31T21:31:15.000000Z",
      starts_at: "2021-07-20T07:15:38.000000Z",
      discount_upper_limit: 2421,
      description: "FRRBCtapsc2OJEtIYHTkPMCnHWRhGK3T2O4zTKZrpJNYtglnu99",
      name: "Onqaf5iTxaKHt4HXxpMz5eg3TFJnOMXlccrSM4N"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 41', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_percentage: 3429.0,
      display_ends_at: "2023-03-24T17:45:54.000000Z",
      display_starts_at: "2023-09-10T01:31:23.000000Z",
      ends_at: "2022-11-15T09:05:44.000000Z",
      starts_at: "2020-08-27T12:14:11.000000Z",
      discount_upper_limit: 5835,
      description: "nhr8JJ6rqJ58uKWhjJEVfg4kmmGr3fEZnBlmzkrtoyKm38BDyuj1U15iB0VVURHNCTBSkvCAJURQ0xc8v3XGoxNYBz",
      name: "F26RRnLKM2vajHzuhk8mM7y90MUBMqpZFx6CyPOvMtoUIDYTTb9YLUK2ZY6omFZc6c5lAiaH7ksthq2qt1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 42', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_percentage: 2406.0,
      is_disabled: false,
      display_ends_at: "2023-10-02T19:37:35.000000Z",
      display_starts_at: "2022-12-07T15:16:28.000000Z",
      ends_at: "2023-07-07T10:43:29.000000Z",
      starts_at: "2023-09-19T07:55:11.000000Z",
      discount_upper_limit: 8201,
      description: "IGy7A4O5EuFDi3ep7E8KTwqzGZlqsrJTtHeL1jl3TaroJ97KS7P",
      name: "YmqHtFEvZxOLgNEFPzTNAeMR2CvVgTRCY2rEPprVjpNeaYJXDFnN5l443TmOvQLPfQxkSjhKrH"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 43', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_percentage: 525.0,
      is_hidden: true,
      is_disabled: false,
      display_ends_at: "2023-05-06T19:46:10.000000Z",
      display_starts_at: "2022-02-24T00:37:36.000000Z",
      ends_at: "2023-10-31T11:36:28.000000Z",
      starts_at: "2022-11-27T22:03:50.000000Z",
      discount_upper_limit: 9249,
      description: "1aNsQcGEPe2hgvk3yuDeTC8XzXR9jncya31KgghsgYe3TbLJN21a8hZtm5so8Mz8sE9uDmHdcukVhdalQqRPyTvG2tPeRbQcNODGa3IhebkRxi8kuGoSk8mmCPAG5TaOSJrFwT6IMSTQQD3aZSLuV5KvsCMKR5EbTWV4WWsRyRXgRYVg4CYuzSBW4stkoPc7UXRyRiV8Pax53IDmwuQOCWjbIPmFGWkh7DMCSqp4SWi3zPKlO0ubMaaWt2sfR",
      name: "wBothNvTY3vFr4ELRXyBW70oqJ1J"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 44', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_percentage: 8481.0,
      is_public: false,
      is_hidden: false,
      is_disabled: true,
      display_ends_at: "2020-11-09T08:02:32.000000Z",
      display_starts_at: "2024-02-04T12:30:24.000000Z",
      ends_at: "2020-02-16T05:18:54.000000Z",
      starts_at: "2021-03-28T07:26:25.000000Z",
      discount_upper_limit: 8409,
      description: "wzYF5YE8jQgUzmyBkd9RsSiJlXzLN5312",
      name: "Qsa3khCQuI0KxC45PIbfMDQsr0pTvhXVGg9hnQlyenzuwrO3gGQmGe09eXlKtPgqSA0ERaGz46vIiA4hbe1yI3CGp5lj6m5fgO"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 45', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_percentage: 5006.0,
      code: "upwc",
      is_public: false,
      is_hidden: false,
      is_disabled: true,
      display_ends_at: "2020-10-08T12:09:59.000000Z",
      display_starts_at: "2021-10-03T13:54:00.000000Z",
      ends_at: "2022-01-21T12:34:10.000000Z",
      starts_at: "2023-08-05T16:51:54.000000Z",
      discount_upper_limit: 4834,
      description: "kfELKrUPd9GpW6Q92PXWpLmGFM1PrngLs4Zq6rjFKNHUPj8OaHLD3inc4333SWlp4s7jMjS5PtJzYsdA5qhl1QGqEwjgkrGn0uAn0iqI2b5rxtzGOZhKJMKwzvYsbBzTdo6bpAqcWNJr",
      name: "Tsv2Llex1ejGQ2ugzGxu81Sx50Yf2M71M8zENOSGlzUlDTz33P2rJ14YHcAJKWHCf11oIN1lhxfCtQo"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 46', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_percentage: 7709.0,
      usage_limit: 1355,
      code: "nkWz",
      is_public: true,
      is_hidden: true,
      is_disabled: false,
      display_ends_at: "2020-05-26T09:53:10.000000Z",
      display_starts_at: "2020-05-09T16:18:00.000000Z",
      ends_at: "2023-10-13T10:13:23.000000Z",
      starts_at: "2023-03-11T22:56:55.000000Z",
      discount_upper_limit: 5124,
      description: "gsSEITDei3yOkB642y5M6ZGKLNmOSXPLkVgGHidiNxSMbU65iFGAAyuGpPep5MlL",
      name: "Dmy5H5WNxLWXFOkEFZiHMkNkDC4XjAgnNgPyTasq1IFexxHoOsY3XmfSCMMI0hPIOcfpt"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 47', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_percentage: 1159.0,
      min_amount: 8171,
      usage_limit: 7914,
      code: "ffHuYKUEJ",
      is_public: true,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2020-09-13T21:12:42.000000Z",
      display_starts_at: "2020-11-21T09:25:40.000000Z",
      ends_at: "2021-03-08T09:09:57.000000Z",
      starts_at: "2022-01-30T00:13:48.000000Z",
      discount_upper_limit: 6350,
      description: "ePvmbsJ6aAodX3lOsSzeTfXuUhrzyKZN2IpvZDbUGNbf92zGejiy7b3srgm7LVnhxTyAZfZDkQ2r2xXuIalmcupP8PaFubqXmo0h47ayHi8",
      name: "sXxsnC42wCpyAiBnUBLAV"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 48', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_percentage: 2863.0,
      is_shop_specified: true,
      min_amount: 4537,
      usage_limit: 1423,
      code: "YftKTMpH",
      is_public: true,
      is_hidden: false,
      is_disabled: true,
      display_ends_at: "2021-07-31T20:35:41.000000Z",
      display_starts_at: "2021-10-08T16:42:06.000000Z",
      ends_at: "2022-02-17T05:06:21.000000Z",
      starts_at: "2022-09-21T05:57:41.000000Z",
      discount_upper_limit: 6844,
      description: "SCmPb9BXoLZ7wKHtX23HwTLkUG7zxtQPL0ebUOhv3B3t2DzpE8re",
      name: "7vFyo7eM4dNHW25nKJYDvzM004QSYdkecoFJzr3brOZ5f3RQvkhtySJKYRUQ3NzIgBoxko0Q38"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 49', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_percentage: 7286.0,
      available_shop_ids: ["6ea346e9-b267-4aec-94b3-5bea2079a612", "f88d4d18-921d-4537-b5cb-f539baf274c6", "db6d5d45-23cf-4938-ba92-21f763c9ab8a", "c52b1efd-39bb-47f0-944d-78629d7f3d05"],
      is_shop_specified: true,
      min_amount: 7637,
      usage_limit: 8079,
      code: "3",
      is_public: true,
      is_hidden: false,
      is_disabled: true,
      display_ends_at: "2020-11-28T05:09:55.000000Z",
      display_starts_at: "2022-09-26T03:37:14.000000Z",
      ends_at: "2020-05-23T12:14:08.000000Z",
      starts_at: "2020-04-04T01:20:31.000000Z",
      discount_upper_limit: 3367,
      description: "bIFy00bHfPtADraHJBywFUVQhJIvCWpCXLp2gUnx8oHUCw9IDU8v5tebk72bnq5V1PYuyQsrCeZvlknHwyCYeoTGD6IVelM1xkQH",
      name: "URZCUVG9E4BcH9vh8Qcd9Qr1jGxJh75seT2MlMasdJCSgZ4nn16A08HMuzRKVjoY87iExdEHTN"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 50', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "e9389154-5989-4461-bda1-8b8d1b2c1599",
      discount_percentage: 8308.0,
      storage_id: "be2ba898-f967-4ac5-9770-d6644de7afdc",
      available_shop_ids: ["54f6f802-c3ab-40cd-bf6c-17a353980658", "5b3bb0ca-2a0e-4ec1-8fdc-654b0df3ad9b"],
      is_shop_specified: false,
      min_amount: 9408,
      usage_limit: 7534,
      code: "VKW5jNB",
      is_public: false,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2021-09-09T08:35:56.000000Z",
      display_starts_at: "2023-10-08T14:37:04.000000Z",
      ends_at: "2020-07-29T22:33:25.000000Z",
      starts_at: "2022-02-19T06:58:48.000000Z",
      discount_upper_limit: 1081,
      description: "PDb3qItRRs3FY6lAlrydgPmYNQmdCCSHSb7PeqbGNNyGMxdwCiRwJpoUBZS7wM2sjFT50Pr6H3Lr5Vqadi7ItSc4oUdi9EYp8oXZ4d1DUqCUDmWqM",
      name: "mM9IYmurAkMd4wDsAO01hvmpIXnG4Vdq7gNAtqrq"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

